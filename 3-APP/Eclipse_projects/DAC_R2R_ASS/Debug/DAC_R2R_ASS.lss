
DAC_R2R_ASS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000940  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000940  000009b4  2**0
                  ALLOC, LOAD, DATA
  2 .stab         000011c4  00000000  00000000  000009b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e13  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000298b  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000299c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  000029d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  000033bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00003439  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 02 	call	0x46c	; 0x46c <main>
  64:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinValue+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinValue+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  7e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinValue+0x1c>
  86:	f1 c0       	rjmp	.+482    	; 0x26a <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinValue+0x24>
  8e:	71 c0       	rjmp	.+226    	; 0x172 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_u8SetPinValue+0x32>
  9c:	52 c0       	rjmp	.+164    	; 0x142 <DIO_u8SetPinValue+0xd6>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	91 05       	cpc	r25, r1
  a2:	0c f0       	brlt	.+2      	; 0xa6 <DIO_u8SetPinValue+0x3a>
  a4:	64 c0       	rjmp	.+200    	; 0x16e <DIO_u8SetPinValue+0x102>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	a9 f1       	breq	.+106    	; 0x116 <DIO_u8SetPinValue+0xaa>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	0c f0       	brlt	.+2      	; 0xb4 <DIO_u8SetPinValue+0x48>
  b2:	5d c0       	rjmp	.+186    	; 0x16e <DIO_u8SetPinValue+0x102>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	19 f0       	breq	.+6      	; 0xbe <DIO_u8SetPinValue+0x52>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b9 f0       	breq	.+46     	; 0xea <DIO_u8SetPinValue+0x7e>
  bc:	58 c0       	rjmp	.+176    	; 0x16e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	48 2f       	mov	r20, r24
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_u8SetPinValue+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_u8SetPinValue+0x68>
  dc:	24 2f       	mov	r18, r20
  de:	28 2b       	or	r18, r24
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	c2 c0       	rjmp	.+388    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x94>
 108:	24 2f       	mov	r18, r20
 10a:	28 2b       	or	r18, r24
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	ac c0       	rjmp	.+344    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	96 c0       	rjmp	.+300    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinValue+0xf0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinValue+0xec>
 160:	24 2f       	mov	r18, r20
 162:	28 2b       	or	r18, r24
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	80 c0       	rjmp	.+256    	; 0x26e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	7e c0       	rjmp	.+252    	; 0x26e <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	88 23       	and	r24, r24
 176:	09 f0       	breq	.+2      	; 0x17a <DIO_u8SetPinValue+0x10e>
 178:	75 c0       	rjmp	.+234    	; 0x264 <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	91 05       	cpc	r25, r1
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_u8SetPinValue+0x11c>
 186:	55 c0       	rjmp	.+170    	; 0x232 <DIO_u8SetPinValue+0x1c6>
 188:	85 30       	cpi	r24, 0x05	; 5
 18a:	91 05       	cpc	r25, r1
 18c:	0c f0       	brlt	.+2      	; 0x190 <DIO_u8SetPinValue+0x124>
 18e:	68 c0       	rjmp	.+208    	; 0x260 <DIO_u8SetPinValue+0x1f4>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	91 05       	cpc	r25, r1
 194:	b9 f1       	breq	.+110    	; 0x204 <DIO_u8SetPinValue+0x198>
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	91 05       	cpc	r25, r1
 19a:	0c f0       	brlt	.+2      	; 0x19e <DIO_u8SetPinValue+0x132>
 19c:	61 c0       	rjmp	.+194    	; 0x260 <DIO_u8SetPinValue+0x1f4>
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <DIO_u8SetPinValue+0x13c>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	c1 f0       	breq	.+48     	; 0x1d6 <DIO_u8SetPinValue+0x16a>
 1a6:	5c c0       	rjmp	.+184    	; 0x260 <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1a8:	8b e3       	ldi	r24, 0x3B	; 59
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_u8SetPinValue+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	2a 95       	dec	r18
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_u8SetPinValue+0x152>
 1c6:	80 95       	com	r24
 1c8:	24 2f       	mov	r18, r20
 1ca:	28 23       	and	r18, r24
 1cc:	8b e3       	ldi	r24, 0x3B	; 59
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
 1d4:	4c c0       	rjmp	.+152    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1d6:	88 e3       	ldi	r24, 0x38	; 56
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8SetPinValue+0x184>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8SetPinValue+0x180>
 1f4:	80 95       	com	r24
 1f6:	24 2f       	mov	r18, r20
 1f8:	28 23       	and	r18, r24
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
 202:	35 c0       	rjmp	.+106    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 204:	85 e3       	ldi	r24, 0x35	; 53
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_u8SetPinValue+0x1b2>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	2a 95       	dec	r18
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_u8SetPinValue+0x1ae>
 222:	80 95       	com	r24
 224:	24 2f       	mov	r18, r20
 226:	28 23       	and	r18, r24
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
 230:	1e c0       	rjmp	.+60     	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinValue+0x1e0>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinValue+0x1dc>
 250:	80 95       	com	r24
 252:	24 2f       	mov	r18, r20
 254:	28 23       	and	r18, r24
 256:	82 e3       	ldi	r24, 0x32	; 50
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
 25e:	07 c0       	rjmp	.+14     	; 0x26e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 260:	19 82       	std	Y+1, r1	; 0x01
 262:	05 c0       	rjmp	.+10     	; 0x26e <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 26e:	89 81       	ldd	r24, Y+1	; 0x01

}
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	00 d0       	rcall	.+0      	; 0x284 <DIO_u8SetPortValue+0x6>
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	8a 83       	std	Y+2, r24	; 0x02
 28c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 28e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	91 05       	cpc	r25, r1
 29a:	01 f1       	breq	.+64     	; 0x2dc <DIO_u8SetPortValue+0x5e>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	91 05       	cpc	r25, r1
 2a0:	1c f5       	brge	.+70     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	91 05       	cpc	r25, r1
 2a6:	a1 f0       	breq	.+40     	; 0x2d0 <DIO_u8SetPortValue+0x52>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	91 05       	cpc	r25, r1
 2ac:	ec f4       	brge	.+58     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <DIO_u8SetPortValue+0x3a>
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <DIO_u8SetPortValue+0x46>
 2b6:	18 c0       	rjmp	.+48     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2b8:	8b e3       	ldi	r24, 0x3B	; 59
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2d0:	85 e3       	ldi	r24, 0x35	; 53
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	2b 81       	ldd	r18, Y+3	; 0x03
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2dc:	82 e3       	ldi	r24, 0x32	; 50
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	2b 81       	ldd	r18, Y+3	; 0x03
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	00 00       	nop
				}


	return Local_u8ErrorState;
 2ee:	89 81       	ldd	r24, Y+1	; 0x01

}
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <DIO_u8GetPinValue+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <DIO_u8GetPinValue+0x8>
 304:	0f 92       	push	r0
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	8a 83       	std	Y+2, r24	; 0x02
 30c:	6b 83       	std	Y+3, r22	; 0x03
 30e:	5d 83       	std	Y+5, r21	; 0x05
 310:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 312:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	9d 81       	ldd	r25, Y+5	; 0x05
 318:	89 2b       	or	r24, r25
 31a:	09 f4       	brne	.+2      	; 0x31e <DIO_u8GetPinValue+0x22>
 31c:	73 c0       	rjmp	.+230    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	08 f0       	brcs	.+2      	; 0x326 <DIO_u8GetPinValue+0x2a>
 324:	6f c0       	rjmp	.+222    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
				{
					switch(Copy_u8Port)
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_u8GetPinValue+0x38>
 332:	4f c0       	rjmp	.+158    	; 0x3d2 <DIO_u8GetPinValue+0xd6>
 334:	85 30       	cpi	r24, 0x05	; 5
 336:	91 05       	cpc	r25, r1
 338:	0c f0       	brlt	.+2      	; 0x33c <DIO_u8GetPinValue+0x40>
 33a:	60 c0       	rjmp	.+192    	; 0x3fc <DIO_u8GetPinValue+0x100>
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	91 05       	cpc	r25, r1
 340:	99 f1       	breq	.+102    	; 0x3a8 <DIO_u8GetPinValue+0xac>
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	91 05       	cpc	r25, r1
 346:	0c f0       	brlt	.+2      	; 0x34a <DIO_u8GetPinValue+0x4e>
 348:	59 c0       	rjmp	.+178    	; 0x3fc <DIO_u8GetPinValue+0x100>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	19 f0       	breq	.+6      	; 0x354 <DIO_u8GetPinValue+0x58>
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	b1 f0       	breq	.+44     	; 0x37e <DIO_u8GetPinValue+0x82>
 352:	54 c0       	rjmp	.+168    	; 0x3fc <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 354:	89 e3       	ldi	r24, 0x39	; 57
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	80 81       	ld	r24, Z
 35c:	88 2f       	mov	r24, r24
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	2b 81       	ldd	r18, Y+3	; 0x03
 362:	22 2f       	mov	r18, r18
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8GetPinValue+0x70>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	2a 95       	dec	r18
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8GetPinValue+0x6c>
 370:	28 2f       	mov	r18, r24
 372:	21 70       	andi	r18, 0x01	; 1
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	9d 81       	ldd	r25, Y+5	; 0x05
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	42 c0       	rjmp	.+132    	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 37e:	86 e3       	ldi	r24, 0x36	; 54
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	2b 81       	ldd	r18, Y+3	; 0x03
 38c:	22 2f       	mov	r18, r18
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8GetPinValue+0x9a>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	2a 95       	dec	r18
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8GetPinValue+0x96>
 39a:	28 2f       	mov	r18, r24
 39c:	21 70       	andi	r18, 0x01	; 1
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	9d 81       	ldd	r25, Y+5	; 0x05
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18
 3a6:	2d c0       	rjmp	.+90     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3a8:	83 e3       	ldi	r24, 0x33	; 51
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	2b 81       	ldd	r18, Y+3	; 0x03
 3b6:	22 2f       	mov	r18, r18
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8GetPinValue+0xc4>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	2a 95       	dec	r18
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8GetPinValue+0xc0>
 3c4:	28 2f       	mov	r18, r24
 3c6:	21 70       	andi	r18, 0x01	; 1
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	9d 81       	ldd	r25, Y+5	; 0x05
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
 3d0:	18 c0       	rjmp	.+48     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	80 81       	ld	r24, Z
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2b 81       	ldd	r18, Y+3	; 0x03
 3e0:	22 2f       	mov	r18, r18
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8GetPinValue+0xee>
 3e6:	95 95       	asr	r25
 3e8:	87 95       	ror	r24
 3ea:	2a 95       	dec	r18
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8GetPinValue+0xea>
 3ee:	28 2f       	mov	r18, r24
 3f0:	21 70       	andi	r18, 0x01	; 1
 3f2:	8c 81       	ldd	r24, Y+4	; 0x04
 3f4:	9d 81       	ldd	r25, Y+5	; 0x05
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     default : Local_u8ErrorState=1; break;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 402:	02 c0       	rjmp	.+4      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 408:	89 81       	ldd	r24, Y+1	; 0x01


}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 422:	8a e3       	ldi	r24, 0x3A	; 58
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
 42c:	87 e3       	ldi	r24, 0x37	; 55
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	fc 01       	movw	r30, r24
 432:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 434:	84 e3       	ldi	r24, 0x34	; 52
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
 43c:	81 e3       	ldi	r24, 0x31	; 49
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	fc 01       	movw	r30, r24
 442:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 444:	8b e3       	ldi	r24, 0x3B	; 59
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	fc 01       	movw	r30, r24
 44a:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 44c:	88 e3       	ldi	r24, 0x38	; 56
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	fc 01       	movw	r30, r24
 452:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 454:	85 e3       	ldi	r24, 0x35	; 53
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	fc 01       	movw	r30, r24
 45a:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 45c:	82 e3       	ldi	r24, 0x32	; 50
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	fc 01       	movw	r30, r24
 462:	10 82       	st	Z, r1
}
 464:	00 00       	nop
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <main>:




void main()
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
 474:	c5 54       	subi	r28, 0x45	; 69
 476:	d1 09       	sbc	r29, r1
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
 482:	0e 94 0d 02 	call	0x41a	; 0x41a <PORT_voidInit>

	while(1)
	{
u8 Local_u8Iterator;
		for(Local_u8Iterator=0;Local_u8Iterator<255;Local_u8Iterator++)
 486:	19 82       	std	Y+1, r1	; 0x01
 488:	95 c0       	rjmp	.+298    	; 0x5b4 <main+0x148>
		{
			DIO_u8SetPortValue(DIO_u8PORTA,Local_u8Iterator);
 48a:	69 81       	ldd	r22, Y+1	; 0x01
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_u8SetPortValue>
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	a0 ea       	ldi	r26, 0xA0	; 160
 498:	b0 e4       	ldi	r27, 0x40	; 64
 49a:	8a 83       	std	Y+2, r24	; 0x02
 49c:	9b 83       	std	Y+3, r25	; 0x03
 49e:	ac 83       	std	Y+4, r26	; 0x04
 4a0:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	4a ef       	ldi	r20, 0xFA	; 250
 4a8:	54 e4       	ldi	r21, 0x44	; 68
 4aa:	6a 81       	ldd	r22, Y+2	; 0x02
 4ac:	7b 81       	ldd	r23, Y+3	; 0x03
 4ae:	8c 81       	ldd	r24, Y+4	; 0x04
 4b0:	9d 81       	ldd	r25, Y+5	; 0x05
 4b2:	0e 94 09 04 	call	0x812	; 0x812 <__mulsf3>
 4b6:	6e a3       	std	Y+38, r22	; 0x26
 4b8:	7f a3       	std	Y+39, r23	; 0x27
 4ba:	88 a7       	std	Y+40, r24	; 0x28
 4bc:	99 a7       	std	Y+41, r25	; 0x29
 4be:	8e a1       	ldd	r24, Y+38	; 0x26
 4c0:	9f a1       	ldd	r25, Y+39	; 0x27
 4c2:	a8 a5       	ldd	r26, Y+40	; 0x28
 4c4:	b9 a5       	ldd	r27, Y+41	; 0x29
 4c6:	8e 83       	std	Y+6, r24	; 0x06
 4c8:	9f 83       	std	Y+7, r25	; 0x07
 4ca:	a8 87       	std	Y+8, r26	; 0x08
 4cc:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	40 e8       	ldi	r20, 0x80	; 128
 4d4:	5f e3       	ldi	r21, 0x3F	; 63
 4d6:	6e 81       	ldd	r22, Y+6	; 0x06
 4d8:	7f 81       	ldd	r23, Y+7	; 0x07
 4da:	88 85       	ldd	r24, Y+8	; 0x08
 4dc:	99 85       	ldd	r25, Y+9	; 0x09
 4de:	0e 94 83 03 	call	0x706	; 0x706 <__cmpsf2>
 4e2:	88 23       	and	r24, r24
 4e4:	2c f4       	brge	.+10     	; 0x4f0 <main+0x84>
		__ticks = 1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	9b 87       	std	Y+11, r25	; 0x0b
 4ec:	8a 87       	std	Y+10, r24	; 0x0a
 4ee:	54 c0       	rjmp	.+168    	; 0x598 <main+0x12c>
	else if (__tmp > 65535)
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	3f ef       	ldi	r19, 0xFF	; 255
 4f4:	4f e7       	ldi	r20, 0x7F	; 127
 4f6:	57 e4       	ldi	r21, 0x47	; 71
 4f8:	6e 81       	ldd	r22, Y+6	; 0x06
 4fa:	7f 81       	ldd	r23, Y+7	; 0x07
 4fc:	88 85       	ldd	r24, Y+8	; 0x08
 4fe:	99 85       	ldd	r25, Y+9	; 0x09
 500:	0e 94 04 04 	call	0x808	; 0x808 <__gesf2>
 504:	18 16       	cp	r1, r24
 506:	d4 f5       	brge	.+116    	; 0x57c <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	40 e2       	ldi	r20, 0x20	; 32
 50e:	51 e4       	ldi	r21, 0x41	; 65
 510:	6a 81       	ldd	r22, Y+2	; 0x02
 512:	7b 81       	ldd	r23, Y+3	; 0x03
 514:	8c 81       	ldd	r24, Y+4	; 0x04
 516:	9d 81       	ldd	r25, Y+5	; 0x05
 518:	0e 94 09 04 	call	0x812	; 0x812 <__mulsf3>
 51c:	6a a7       	std	Y+42, r22	; 0x2a
 51e:	7b a7       	std	Y+43, r23	; 0x2b
 520:	8c a7       	std	Y+44, r24	; 0x2c
 522:	9d a7       	std	Y+45, r25	; 0x2d
 524:	8a a5       	ldd	r24, Y+42	; 0x2a
 526:	9b a5       	ldd	r25, Y+43	; 0x2b
 528:	ac a5       	ldd	r26, Y+44	; 0x2c
 52a:	bd a5       	ldd	r27, Y+45	; 0x2d
 52c:	8e 8f       	std	Y+30, r24	; 0x1e
 52e:	9f 8f       	std	Y+31, r25	; 0x1f
 530:	a8 a3       	std	Y+32, r26	; 0x20
 532:	b9 a3       	std	Y+33, r27	; 0x21
 534:	6e 8d       	ldd	r22, Y+30	; 0x1e
 536:	7f 8d       	ldd	r23, Y+31	; 0x1f
 538:	88 a1       	ldd	r24, Y+32	; 0x20
 53a:	99 a1       	ldd	r25, Y+33	; 0x21
 53c:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 540:	6e a7       	std	Y+46, r22	; 0x2e
 542:	7f a7       	std	Y+47, r23	; 0x2f
 544:	88 ab       	std	Y+48, r24	; 0x30
 546:	99 ab       	std	Y+49, r25	; 0x31
 548:	ae a5       	ldd	r26, Y+46	; 0x2e
 54a:	bf a5       	ldd	r27, Y+47	; 0x2f
 54c:	bb 87       	std	Y+11, r27	; 0x0b
 54e:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
 550:	10 c0       	rjmp	.+32     	; 0x572 <main+0x106>
 552:	88 ec       	ldi	r24, 0xC8	; 200
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	9d 87       	std	Y+13, r25	; 0x0d
 558:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 55a:	8c 85       	ldd	r24, Y+12	; 0x0c
 55c:	9d 85       	ldd	r25, Y+13	; 0x0d
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <main+0xf2>
 562:	9d 87       	std	Y+13, r25	; 0x0d
 564:	8c 87       	std	Y+12, r24	; 0x0c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 566:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 568:	8a 85       	ldd	r24, Y+10	; 0x0a
 56a:	9b 85       	ldd	r25, Y+11	; 0x0b
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	9b 87       	std	Y+11, r25	; 0x0b
 570:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 572:	8a 85       	ldd	r24, Y+10	; 0x0a
 574:	9b 85       	ldd	r25, Y+11	; 0x0b
 576:	89 2b       	or	r24, r25
 578:	61 f7       	brne	.-40     	; 0x552 <main+0xe6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 57a:	19 c0       	rjmp	.+50     	; 0x5ae <main+0x142>
	}
	else
		__ticks = (uint16_t)__tmp;
 57c:	6e 81       	ldd	r22, Y+6	; 0x06
 57e:	7f 81       	ldd	r23, Y+7	; 0x07
 580:	88 85       	ldd	r24, Y+8	; 0x08
 582:	99 85       	ldd	r25, Y+9	; 0x09
 584:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 588:	6a ab       	std	Y+50, r22	; 0x32
 58a:	7b ab       	std	Y+51, r23	; 0x33
 58c:	8c ab       	std	Y+52, r24	; 0x34
 58e:	9d ab       	std	Y+53, r25	; 0x35
 590:	8a a9       	ldd	r24, Y+50	; 0x32
 592:	9b a9       	ldd	r25, Y+51	; 0x33
 594:	9b 87       	std	Y+11, r25	; 0x0b
 596:	8a 87       	std	Y+10, r24	; 0x0a
 598:	8a 85       	ldd	r24, Y+10	; 0x0a
 59a:	9b 85       	ldd	r25, Y+11	; 0x0b
 59c:	9f 87       	std	Y+15, r25	; 0x0f
 59e:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5a0:	8e 85       	ldd	r24, Y+14	; 0x0e
 5a2:	9f 85       	ldd	r25, Y+15	; 0x0f
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <main+0x138>
 5a8:	9f 87       	std	Y+15, r25	; 0x0f
 5aa:	8e 87       	std	Y+14, r24	; 0x0e
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 5ac:	00 00       	nop
	PORT_voidInit();

	while(1)
	{
u8 Local_u8Iterator;
		for(Local_u8Iterator=0;Local_u8Iterator<255;Local_u8Iterator++)
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	89 83       	std	Y+1, r24	; 0x01
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	8f 3f       	cpi	r24, 0xFF	; 255
 5b8:	09 f0       	breq	.+2      	; 0x5bc <main+0x150>
 5ba:	67 cf       	rjmp	.-306    	; 0x48a <main+0x1e>
		{
			DIO_u8SetPortValue(DIO_u8PORTA,Local_u8Iterator);
			_delay_ms(5);
		}
		for(Local_u8Iterator=0;Local_u8Iterator<255;Local_u8Iterator++)
 5bc:	19 82       	std	Y+1, r1	; 0x01
 5be:	9e c0       	rjmp	.+316    	; 0x6fc <main+0x290>
				{
					DIO_u8SetPortValue(DIO_u8PORTA,255-Local_u8Iterator);
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	80 95       	com	r24
 5c4:	68 2f       	mov	r22, r24
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 3f 01 	call	0x27e	; 0x27e <DIO_u8SetPortValue>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	a0 ea       	ldi	r26, 0xA0	; 160
 5d2:	b0 e4       	ldi	r27, 0x40	; 64
 5d4:	88 8b       	std	Y+16, r24	; 0x10
 5d6:	99 8b       	std	Y+17, r25	; 0x11
 5d8:	aa 8b       	std	Y+18, r26	; 0x12
 5da:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	4a ef       	ldi	r20, 0xFA	; 250
 5e2:	54 e4       	ldi	r21, 0x44	; 68
 5e4:	68 89       	ldd	r22, Y+16	; 0x10
 5e6:	79 89       	ldd	r23, Y+17	; 0x11
 5e8:	8a 89       	ldd	r24, Y+18	; 0x12
 5ea:	9b 89       	ldd	r25, Y+19	; 0x13
 5ec:	0e 94 09 04 	call	0x812	; 0x812 <__mulsf3>
 5f0:	6e ab       	std	Y+54, r22	; 0x36
 5f2:	7f ab       	std	Y+55, r23	; 0x37
 5f4:	88 af       	std	Y+56, r24	; 0x38
 5f6:	99 af       	std	Y+57, r25	; 0x39
 5f8:	8e a9       	ldd	r24, Y+54	; 0x36
 5fa:	9f a9       	ldd	r25, Y+55	; 0x37
 5fc:	a8 ad       	ldd	r26, Y+56	; 0x38
 5fe:	b9 ad       	ldd	r27, Y+57	; 0x39
 600:	8c 8b       	std	Y+20, r24	; 0x14
 602:	9d 8b       	std	Y+21, r25	; 0x15
 604:	ae 8b       	std	Y+22, r26	; 0x16
 606:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 608:	20 e0       	ldi	r18, 0x00	; 0
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	40 e8       	ldi	r20, 0x80	; 128
 60e:	5f e3       	ldi	r21, 0x3F	; 63
 610:	6c 89       	ldd	r22, Y+20	; 0x14
 612:	7d 89       	ldd	r23, Y+21	; 0x15
 614:	8e 89       	ldd	r24, Y+22	; 0x16
 616:	9f 89       	ldd	r25, Y+23	; 0x17
 618:	0e 94 83 03 	call	0x706	; 0x706 <__cmpsf2>
 61c:	88 23       	and	r24, r24
 61e:	2c f4       	brge	.+10     	; 0x62a <main+0x1be>
		__ticks = 1;
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	99 8f       	std	Y+25, r25	; 0x19
 626:	88 8f       	std	Y+24, r24	; 0x18
 628:	5b c0       	rjmp	.+182    	; 0x6e0 <main+0x274>
	else if (__tmp > 65535)
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	3f ef       	ldi	r19, 0xFF	; 255
 62e:	4f e7       	ldi	r20, 0x7F	; 127
 630:	57 e4       	ldi	r21, 0x47	; 71
 632:	6c 89       	ldd	r22, Y+20	; 0x14
 634:	7d 89       	ldd	r23, Y+21	; 0x15
 636:	8e 89       	ldd	r24, Y+22	; 0x16
 638:	9f 89       	ldd	r25, Y+23	; 0x17
 63a:	0e 94 04 04 	call	0x808	; 0x808 <__gesf2>
 63e:	18 16       	cp	r1, r24
 640:	0c f0       	brlt	.+2      	; 0x644 <main+0x1d8>
 642:	3c c0       	rjmp	.+120    	; 0x6bc <main+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 644:	20 e0       	ldi	r18, 0x00	; 0
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	40 e2       	ldi	r20, 0x20	; 32
 64a:	51 e4       	ldi	r21, 0x41	; 65
 64c:	68 89       	ldd	r22, Y+16	; 0x10
 64e:	79 89       	ldd	r23, Y+17	; 0x11
 650:	8a 89       	ldd	r24, Y+18	; 0x12
 652:	9b 89       	ldd	r25, Y+19	; 0x13
 654:	0e 94 09 04 	call	0x812	; 0x812 <__mulsf3>
 658:	6a af       	std	Y+58, r22	; 0x3a
 65a:	7b af       	std	Y+59, r23	; 0x3b
 65c:	8c af       	std	Y+60, r24	; 0x3c
 65e:	9d af       	std	Y+61, r25	; 0x3d
 660:	8a ad       	ldd	r24, Y+58	; 0x3a
 662:	9b ad       	ldd	r25, Y+59	; 0x3b
 664:	ac ad       	ldd	r26, Y+60	; 0x3c
 666:	bd ad       	ldd	r27, Y+61	; 0x3d
 668:	8a a3       	std	Y+34, r24	; 0x22
 66a:	9b a3       	std	Y+35, r25	; 0x23
 66c:	ac a3       	std	Y+36, r26	; 0x24
 66e:	bd a3       	std	Y+37, r27	; 0x25
 670:	6a a1       	ldd	r22, Y+34	; 0x22
 672:	7b a1       	ldd	r23, Y+35	; 0x23
 674:	8c a1       	ldd	r24, Y+36	; 0x24
 676:	9d a1       	ldd	r25, Y+37	; 0x25
 678:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 67c:	22 96       	adiw	r28, 0x02	; 2
 67e:	6c af       	std	Y+60, r22	; 0x3c
 680:	7d af       	std	Y+61, r23	; 0x3d
 682:	8e af       	std	Y+62, r24	; 0x3e
 684:	9f af       	std	Y+63, r25	; 0x3f
 686:	22 97       	sbiw	r28, 0x02	; 2
 688:	ae ad       	ldd	r26, Y+62	; 0x3e
 68a:	bf ad       	ldd	r27, Y+63	; 0x3f
 68c:	b9 8f       	std	Y+25, r27	; 0x19
 68e:	a8 8f       	std	Y+24, r26	; 0x18
		while(__ticks)
 690:	10 c0       	rjmp	.+32     	; 0x6b2 <main+0x246>
 692:	88 ec       	ldi	r24, 0xC8	; 200
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	9b 8f       	std	Y+27, r25	; 0x1b
 698:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 69a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 69c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	f1 f7       	brne	.-4      	; 0x69e <main+0x232>
 6a2:	9b 8f       	std	Y+27, r25	; 0x1b
 6a4:	8a 8f       	std	Y+26, r24	; 0x1a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 6a6:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6a8:	88 8d       	ldd	r24, Y+24	; 0x18
 6aa:	99 8d       	ldd	r25, Y+25	; 0x19
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	99 8f       	std	Y+25, r25	; 0x19
 6b0:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6b2:	88 8d       	ldd	r24, Y+24	; 0x18
 6b4:	99 8d       	ldd	r25, Y+25	; 0x19
 6b6:	89 2b       	or	r24, r25
 6b8:	61 f7       	brne	.-40     	; 0x692 <main+0x226>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 6ba:	1d c0       	rjmp	.+58     	; 0x6f6 <main+0x28a>
	}
	else
		__ticks = (uint16_t)__tmp;
 6bc:	6c 89       	ldd	r22, Y+20	; 0x14
 6be:	7d 89       	ldd	r23, Y+21	; 0x15
 6c0:	8e 89       	ldd	r24, Y+22	; 0x16
 6c2:	9f 89       	ldd	r25, Y+23	; 0x17
 6c4:	0e 94 88 03 	call	0x710	; 0x710 <__fixunssfsi>
 6c8:	26 96       	adiw	r28, 0x06	; 6
 6ca:	6c af       	std	Y+60, r22	; 0x3c
 6cc:	7d af       	std	Y+61, r23	; 0x3d
 6ce:	8e af       	std	Y+62, r24	; 0x3e
 6d0:	9f af       	std	Y+63, r25	; 0x3f
 6d2:	26 97       	sbiw	r28, 0x06	; 6
 6d4:	24 96       	adiw	r28, 0x04	; 4
 6d6:	8e ad       	ldd	r24, Y+62	; 0x3e
 6d8:	9f ad       	ldd	r25, Y+63	; 0x3f
 6da:	24 97       	sbiw	r28, 0x04	; 4
 6dc:	99 8f       	std	Y+25, r25	; 0x19
 6de:	88 8f       	std	Y+24, r24	; 0x18
 6e0:	88 8d       	ldd	r24, Y+24	; 0x18
 6e2:	99 8d       	ldd	r25, Y+25	; 0x19
 6e4:	9d 8f       	std	Y+29, r25	; 0x1d
 6e6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <main+0x280>
 6f0:	9d 8f       	std	Y+29, r25	; 0x1d
 6f2:	8c 8f       	std	Y+28, r24	; 0x1c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 6f4:	00 00       	nop
		for(Local_u8Iterator=0;Local_u8Iterator<255;Local_u8Iterator++)
		{
			DIO_u8SetPortValue(DIO_u8PORTA,Local_u8Iterator);
			_delay_ms(5);
		}
		for(Local_u8Iterator=0;Local_u8Iterator<255;Local_u8Iterator++)
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
 6f8:	8f 5f       	subi	r24, 0xFF	; 255
 6fa:	89 83       	std	Y+1, r24	; 0x01
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	8f 3f       	cpi	r24, 0xFF	; 255
 700:	09 f0       	breq	.+2      	; 0x704 <main+0x298>
 702:	5e cf       	rjmp	.-324    	; 0x5c0 <main+0x154>
void main()
{
	PORT_voidInit();

	while(1)
	{
 704:	c0 ce       	rjmp	.-640    	; 0x486 <main+0x1a>

00000706 <__cmpsf2>:
 706:	0e 94 b7 03 	call	0x76e	; 0x76e <__fp_cmp>
 70a:	08 f4       	brcc	.+2      	; 0x70e <__cmpsf2+0x8>
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	08 95       	ret

00000710 <__fixunssfsi>:
 710:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_splitA>
 714:	88 f0       	brcs	.+34     	; 0x738 <__fixunssfsi+0x28>
 716:	9f 57       	subi	r25, 0x7F	; 127
 718:	98 f0       	brcs	.+38     	; 0x740 <__fixunssfsi+0x30>
 71a:	b9 2f       	mov	r27, r25
 71c:	99 27       	eor	r25, r25
 71e:	b7 51       	subi	r27, 0x17	; 23
 720:	b0 f0       	brcs	.+44     	; 0x74e <__fixunssfsi+0x3e>
 722:	e1 f0       	breq	.+56     	; 0x75c <__fixunssfsi+0x4c>
 724:	66 0f       	add	r22, r22
 726:	77 1f       	adc	r23, r23
 728:	88 1f       	adc	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	1a f0       	brmi	.+6      	; 0x734 <__fixunssfsi+0x24>
 72e:	ba 95       	dec	r27
 730:	c9 f7       	brne	.-14     	; 0x724 <__fixunssfsi+0x14>
 732:	14 c0       	rjmp	.+40     	; 0x75c <__fixunssfsi+0x4c>
 734:	b1 30       	cpi	r27, 0x01	; 1
 736:	91 f0       	breq	.+36     	; 0x75c <__fixunssfsi+0x4c>
 738:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_zero>
 73c:	b1 e0       	ldi	r27, 0x01	; 1
 73e:	08 95       	ret
 740:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_zero>
 744:	67 2f       	mov	r22, r23
 746:	78 2f       	mov	r23, r24
 748:	88 27       	eor	r24, r24
 74a:	b8 5f       	subi	r27, 0xF8	; 248
 74c:	39 f0       	breq	.+14     	; 0x75c <__fixunssfsi+0x4c>
 74e:	b9 3f       	cpi	r27, 0xF9	; 249
 750:	cc f3       	brlt	.-14     	; 0x744 <__fixunssfsi+0x34>
 752:	86 95       	lsr	r24
 754:	77 95       	ror	r23
 756:	67 95       	ror	r22
 758:	b3 95       	inc	r27
 75a:	d9 f7       	brne	.-10     	; 0x752 <__fixunssfsi+0x42>
 75c:	3e f4       	brtc	.+14     	; 0x76c <__fixunssfsi+0x5c>
 75e:	90 95       	com	r25
 760:	80 95       	com	r24
 762:	70 95       	com	r23
 764:	61 95       	neg	r22
 766:	7f 4f       	sbci	r23, 0xFF	; 255
 768:	8f 4f       	sbci	r24, 0xFF	; 255
 76a:	9f 4f       	sbci	r25, 0xFF	; 255
 76c:	08 95       	ret

0000076e <__fp_cmp>:
 76e:	99 0f       	add	r25, r25
 770:	00 08       	sbc	r0, r0
 772:	55 0f       	add	r21, r21
 774:	aa 0b       	sbc	r26, r26
 776:	e0 e8       	ldi	r30, 0x80	; 128
 778:	fe ef       	ldi	r31, 0xFE	; 254
 77a:	16 16       	cp	r1, r22
 77c:	17 06       	cpc	r1, r23
 77e:	e8 07       	cpc	r30, r24
 780:	f9 07       	cpc	r31, r25
 782:	c0 f0       	brcs	.+48     	; 0x7b4 <__fp_cmp+0x46>
 784:	12 16       	cp	r1, r18
 786:	13 06       	cpc	r1, r19
 788:	e4 07       	cpc	r30, r20
 78a:	f5 07       	cpc	r31, r21
 78c:	98 f0       	brcs	.+38     	; 0x7b4 <__fp_cmp+0x46>
 78e:	62 1b       	sub	r22, r18
 790:	73 0b       	sbc	r23, r19
 792:	84 0b       	sbc	r24, r20
 794:	95 0b       	sbc	r25, r21
 796:	39 f4       	brne	.+14     	; 0x7a6 <__fp_cmp+0x38>
 798:	0a 26       	eor	r0, r26
 79a:	61 f0       	breq	.+24     	; 0x7b4 <__fp_cmp+0x46>
 79c:	23 2b       	or	r18, r19
 79e:	24 2b       	or	r18, r20
 7a0:	25 2b       	or	r18, r21
 7a2:	21 f4       	brne	.+8      	; 0x7ac <__fp_cmp+0x3e>
 7a4:	08 95       	ret
 7a6:	0a 26       	eor	r0, r26
 7a8:	09 f4       	brne	.+2      	; 0x7ac <__fp_cmp+0x3e>
 7aa:	a1 40       	sbci	r26, 0x01	; 1
 7ac:	a6 95       	lsr	r26
 7ae:	8f ef       	ldi	r24, 0xFF	; 255
 7b0:	81 1d       	adc	r24, r1
 7b2:	81 1d       	adc	r24, r1
 7b4:	08 95       	ret

000007b6 <__fp_split3>:
 7b6:	57 fd       	sbrc	r21, 7
 7b8:	90 58       	subi	r25, 0x80	; 128
 7ba:	44 0f       	add	r20, r20
 7bc:	55 1f       	adc	r21, r21
 7be:	59 f0       	breq	.+22     	; 0x7d6 <__fp_splitA+0x10>
 7c0:	5f 3f       	cpi	r21, 0xFF	; 255
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <__fp_splitA+0x1a>
 7c4:	47 95       	ror	r20

000007c6 <__fp_splitA>:
 7c6:	88 0f       	add	r24, r24
 7c8:	97 fb       	bst	r25, 7
 7ca:	99 1f       	adc	r25, r25
 7cc:	61 f0       	breq	.+24     	; 0x7e6 <__fp_splitA+0x20>
 7ce:	9f 3f       	cpi	r25, 0xFF	; 255
 7d0:	79 f0       	breq	.+30     	; 0x7f0 <__fp_splitA+0x2a>
 7d2:	87 95       	ror	r24
 7d4:	08 95       	ret
 7d6:	12 16       	cp	r1, r18
 7d8:	13 06       	cpc	r1, r19
 7da:	14 06       	cpc	r1, r20
 7dc:	55 1f       	adc	r21, r21
 7de:	f2 cf       	rjmp	.-28     	; 0x7c4 <__fp_split3+0xe>
 7e0:	46 95       	lsr	r20
 7e2:	f1 df       	rcall	.-30     	; 0x7c6 <__fp_splitA>
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <__fp_splitA+0x30>
 7e6:	16 16       	cp	r1, r22
 7e8:	17 06       	cpc	r1, r23
 7ea:	18 06       	cpc	r1, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	f1 cf       	rjmp	.-30     	; 0x7d2 <__fp_splitA+0xc>
 7f0:	86 95       	lsr	r24
 7f2:	71 05       	cpc	r23, r1
 7f4:	61 05       	cpc	r22, r1
 7f6:	08 94       	sec
 7f8:	08 95       	ret

000007fa <__fp_zero>:
 7fa:	e8 94       	clt

000007fc <__fp_szero>:
 7fc:	bb 27       	eor	r27, r27
 7fe:	66 27       	eor	r22, r22
 800:	77 27       	eor	r23, r23
 802:	cb 01       	movw	r24, r22
 804:	97 f9       	bld	r25, 7
 806:	08 95       	ret

00000808 <__gesf2>:
 808:	0e 94 b7 03 	call	0x76e	; 0x76e <__fp_cmp>
 80c:	08 f4       	brcc	.+2      	; 0x810 <__gesf2+0x8>
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	08 95       	ret

00000812 <__mulsf3>:
 812:	0e 94 1c 04 	call	0x838	; 0x838 <__mulsf3x>
 816:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_round>
 81a:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__fp_pscA>
 81e:	38 f0       	brcs	.+14     	; 0x82e <__mulsf3+0x1c>
 820:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_pscB>
 824:	20 f0       	brcs	.+8      	; 0x82e <__mulsf3+0x1c>
 826:	95 23       	and	r25, r21
 828:	11 f0       	breq	.+4      	; 0x82e <__mulsf3+0x1c>
 82a:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_inf>
 82e:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__fp_nan>
 832:	11 24       	eor	r1, r1
 834:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__fp_szero>

00000838 <__mulsf3x>:
 838:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__fp_split3>
 83c:	70 f3       	brcs	.-36     	; 0x81a <__mulsf3+0x8>

0000083e <__mulsf3_pse>:
 83e:	95 9f       	mul	r25, r21
 840:	c1 f3       	breq	.-16     	; 0x832 <__mulsf3+0x20>
 842:	95 0f       	add	r25, r21
 844:	50 e0       	ldi	r21, 0x00	; 0
 846:	55 1f       	adc	r21, r21
 848:	62 9f       	mul	r22, r18
 84a:	f0 01       	movw	r30, r0
 84c:	72 9f       	mul	r23, r18
 84e:	bb 27       	eor	r27, r27
 850:	f0 0d       	add	r31, r0
 852:	b1 1d       	adc	r27, r1
 854:	63 9f       	mul	r22, r19
 856:	aa 27       	eor	r26, r26
 858:	f0 0d       	add	r31, r0
 85a:	b1 1d       	adc	r27, r1
 85c:	aa 1f       	adc	r26, r26
 85e:	64 9f       	mul	r22, r20
 860:	66 27       	eor	r22, r22
 862:	b0 0d       	add	r27, r0
 864:	a1 1d       	adc	r26, r1
 866:	66 1f       	adc	r22, r22
 868:	82 9f       	mul	r24, r18
 86a:	22 27       	eor	r18, r18
 86c:	b0 0d       	add	r27, r0
 86e:	a1 1d       	adc	r26, r1
 870:	62 1f       	adc	r22, r18
 872:	73 9f       	mul	r23, r19
 874:	b0 0d       	add	r27, r0
 876:	a1 1d       	adc	r26, r1
 878:	62 1f       	adc	r22, r18
 87a:	83 9f       	mul	r24, r19
 87c:	a0 0d       	add	r26, r0
 87e:	61 1d       	adc	r22, r1
 880:	22 1f       	adc	r18, r18
 882:	74 9f       	mul	r23, r20
 884:	33 27       	eor	r19, r19
 886:	a0 0d       	add	r26, r0
 888:	61 1d       	adc	r22, r1
 88a:	23 1f       	adc	r18, r19
 88c:	84 9f       	mul	r24, r20
 88e:	60 0d       	add	r22, r0
 890:	21 1d       	adc	r18, r1
 892:	82 2f       	mov	r24, r18
 894:	76 2f       	mov	r23, r22
 896:	6a 2f       	mov	r22, r26
 898:	11 24       	eor	r1, r1
 89a:	9f 57       	subi	r25, 0x7F	; 127
 89c:	50 40       	sbci	r21, 0x00	; 0
 89e:	9a f0       	brmi	.+38     	; 0x8c6 <__stack+0x67>
 8a0:	f1 f0       	breq	.+60     	; 0x8de <__stack+0x7f>
 8a2:	88 23       	and	r24, r24
 8a4:	4a f0       	brmi	.+18     	; 0x8b8 <__stack+0x59>
 8a6:	ee 0f       	add	r30, r30
 8a8:	ff 1f       	adc	r31, r31
 8aa:	bb 1f       	adc	r27, r27
 8ac:	66 1f       	adc	r22, r22
 8ae:	77 1f       	adc	r23, r23
 8b0:	88 1f       	adc	r24, r24
 8b2:	91 50       	subi	r25, 0x01	; 1
 8b4:	50 40       	sbci	r21, 0x00	; 0
 8b6:	a9 f7       	brne	.-22     	; 0x8a2 <__stack+0x43>
 8b8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ba:	51 05       	cpc	r21, r1
 8bc:	80 f0       	brcs	.+32     	; 0x8de <__stack+0x7f>
 8be:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_inf>
 8c2:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__fp_szero>
 8c6:	5f 3f       	cpi	r21, 0xFF	; 255
 8c8:	e4 f3       	brlt	.-8      	; 0x8c2 <__stack+0x63>
 8ca:	98 3e       	cpi	r25, 0xE8	; 232
 8cc:	d4 f3       	brlt	.-12     	; 0x8c2 <__stack+0x63>
 8ce:	86 95       	lsr	r24
 8d0:	77 95       	ror	r23
 8d2:	67 95       	ror	r22
 8d4:	b7 95       	ror	r27
 8d6:	f7 95       	ror	r31
 8d8:	e7 95       	ror	r30
 8da:	9f 5f       	subi	r25, 0xFF	; 255
 8dc:	c1 f7       	brne	.-16     	; 0x8ce <__stack+0x6f>
 8de:	fe 2b       	or	r31, r30
 8e0:	88 0f       	add	r24, r24
 8e2:	91 1d       	adc	r25, r1
 8e4:	96 95       	lsr	r25
 8e6:	87 95       	ror	r24
 8e8:	97 f9       	bld	r25, 7
 8ea:	08 95       	ret

000008ec <__fp_inf>:
 8ec:	97 f9       	bld	r25, 7
 8ee:	9f 67       	ori	r25, 0x7F	; 127
 8f0:	80 e8       	ldi	r24, 0x80	; 128
 8f2:	70 e0       	ldi	r23, 0x00	; 0
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	08 95       	ret

000008f8 <__fp_nan>:
 8f8:	9f ef       	ldi	r25, 0xFF	; 255
 8fa:	80 ec       	ldi	r24, 0xC0	; 192
 8fc:	08 95       	ret

000008fe <__fp_pscA>:
 8fe:	00 24       	eor	r0, r0
 900:	0a 94       	dec	r0
 902:	16 16       	cp	r1, r22
 904:	17 06       	cpc	r1, r23
 906:	18 06       	cpc	r1, r24
 908:	09 06       	cpc	r0, r25
 90a:	08 95       	ret

0000090c <__fp_pscB>:
 90c:	00 24       	eor	r0, r0
 90e:	0a 94       	dec	r0
 910:	12 16       	cp	r1, r18
 912:	13 06       	cpc	r1, r19
 914:	14 06       	cpc	r1, r20
 916:	05 06       	cpc	r0, r21
 918:	08 95       	ret

0000091a <__fp_round>:
 91a:	09 2e       	mov	r0, r25
 91c:	03 94       	inc	r0
 91e:	00 0c       	add	r0, r0
 920:	11 f4       	brne	.+4      	; 0x926 <__fp_round+0xc>
 922:	88 23       	and	r24, r24
 924:	52 f0       	brmi	.+20     	; 0x93a <__fp_round+0x20>
 926:	bb 0f       	add	r27, r27
 928:	40 f4       	brcc	.+16     	; 0x93a <__fp_round+0x20>
 92a:	bf 2b       	or	r27, r31
 92c:	11 f4       	brne	.+4      	; 0x932 <__fp_round+0x18>
 92e:	60 ff       	sbrs	r22, 0
 930:	04 c0       	rjmp	.+8      	; 0x93a <__fp_round+0x20>
 932:	6f 5f       	subi	r22, 0xFF	; 255
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
