
Electrical_Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000c9e  00000d12  2**0
                  ALLOC, LOAD, DATA
  2 .stab         0000141c  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e04  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002f34  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f48  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00002f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  0000396b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  000039e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  64:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinValue+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinValue+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  7e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinValue+0x1c>
  86:	f1 c0       	rjmp	.+482    	; 0x26a <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinValue+0x24>
  8e:	71 c0       	rjmp	.+226    	; 0x172 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_u8SetPinValue+0x32>
  9c:	52 c0       	rjmp	.+164    	; 0x142 <DIO_u8SetPinValue+0xd6>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	91 05       	cpc	r25, r1
  a2:	0c f0       	brlt	.+2      	; 0xa6 <DIO_u8SetPinValue+0x3a>
  a4:	64 c0       	rjmp	.+200    	; 0x16e <DIO_u8SetPinValue+0x102>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	a9 f1       	breq	.+106    	; 0x116 <DIO_u8SetPinValue+0xaa>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	0c f0       	brlt	.+2      	; 0xb4 <DIO_u8SetPinValue+0x48>
  b2:	5d c0       	rjmp	.+186    	; 0x16e <DIO_u8SetPinValue+0x102>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	19 f0       	breq	.+6      	; 0xbe <DIO_u8SetPinValue+0x52>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b9 f0       	breq	.+46     	; 0xea <DIO_u8SetPinValue+0x7e>
  bc:	58 c0       	rjmp	.+176    	; 0x16e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	48 2f       	mov	r20, r24
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_u8SetPinValue+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_u8SetPinValue+0x68>
  dc:	24 2f       	mov	r18, r20
  de:	28 2b       	or	r18, r24
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	c2 c0       	rjmp	.+388    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x94>
 108:	24 2f       	mov	r18, r20
 10a:	28 2b       	or	r18, r24
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	ac c0       	rjmp	.+344    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	96 c0       	rjmp	.+300    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinValue+0xf0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinValue+0xec>
 160:	24 2f       	mov	r18, r20
 162:	28 2b       	or	r18, r24
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	80 c0       	rjmp	.+256    	; 0x26e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	7e c0       	rjmp	.+252    	; 0x26e <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	88 23       	and	r24, r24
 176:	09 f0       	breq	.+2      	; 0x17a <DIO_u8SetPinValue+0x10e>
 178:	75 c0       	rjmp	.+234    	; 0x264 <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	91 05       	cpc	r25, r1
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_u8SetPinValue+0x11c>
 186:	55 c0       	rjmp	.+170    	; 0x232 <DIO_u8SetPinValue+0x1c6>
 188:	85 30       	cpi	r24, 0x05	; 5
 18a:	91 05       	cpc	r25, r1
 18c:	0c f0       	brlt	.+2      	; 0x190 <DIO_u8SetPinValue+0x124>
 18e:	68 c0       	rjmp	.+208    	; 0x260 <DIO_u8SetPinValue+0x1f4>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	91 05       	cpc	r25, r1
 194:	b9 f1       	breq	.+110    	; 0x204 <DIO_u8SetPinValue+0x198>
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	91 05       	cpc	r25, r1
 19a:	0c f0       	brlt	.+2      	; 0x19e <DIO_u8SetPinValue+0x132>
 19c:	61 c0       	rjmp	.+194    	; 0x260 <DIO_u8SetPinValue+0x1f4>
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <DIO_u8SetPinValue+0x13c>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	c1 f0       	breq	.+48     	; 0x1d6 <DIO_u8SetPinValue+0x16a>
 1a6:	5c c0       	rjmp	.+184    	; 0x260 <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1a8:	8b e3       	ldi	r24, 0x3B	; 59
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_u8SetPinValue+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	2a 95       	dec	r18
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_u8SetPinValue+0x152>
 1c6:	80 95       	com	r24
 1c8:	24 2f       	mov	r18, r20
 1ca:	28 23       	and	r18, r24
 1cc:	8b e3       	ldi	r24, 0x3B	; 59
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
 1d4:	4c c0       	rjmp	.+152    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1d6:	88 e3       	ldi	r24, 0x38	; 56
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8SetPinValue+0x184>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8SetPinValue+0x180>
 1f4:	80 95       	com	r24
 1f6:	24 2f       	mov	r18, r20
 1f8:	28 23       	and	r18, r24
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
 202:	35 c0       	rjmp	.+106    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 204:	85 e3       	ldi	r24, 0x35	; 53
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_u8SetPinValue+0x1b2>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	2a 95       	dec	r18
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_u8SetPinValue+0x1ae>
 222:	80 95       	com	r24
 224:	24 2f       	mov	r18, r20
 226:	28 23       	and	r18, r24
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
 230:	1e c0       	rjmp	.+60     	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinValue+0x1e0>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinValue+0x1dc>
 250:	80 95       	com	r24
 252:	24 2f       	mov	r18, r20
 254:	28 23       	and	r18, r24
 256:	82 e3       	ldi	r24, 0x32	; 50
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
 25e:	07 c0       	rjmp	.+14     	; 0x26e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 260:	19 82       	std	Y+1, r1	; 0x01
 262:	05 c0       	rjmp	.+10     	; 0x26e <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 26e:	89 81       	ldd	r24, Y+1	; 0x01

}
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	00 d0       	rcall	.+0      	; 0x284 <DIO_u8SetPortValue+0x6>
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	8a 83       	std	Y+2, r24	; 0x02
 28c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 28e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	91 05       	cpc	r25, r1
 29a:	01 f1       	breq	.+64     	; 0x2dc <DIO_u8SetPortValue+0x5e>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	91 05       	cpc	r25, r1
 2a0:	1c f5       	brge	.+70     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	91 05       	cpc	r25, r1
 2a6:	a1 f0       	breq	.+40     	; 0x2d0 <DIO_u8SetPortValue+0x52>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	91 05       	cpc	r25, r1
 2ac:	ec f4       	brge	.+58     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <DIO_u8SetPortValue+0x3a>
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <DIO_u8SetPortValue+0x46>
 2b6:	18 c0       	rjmp	.+48     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2b8:	8b e3       	ldi	r24, 0x3B	; 59
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2d0:	85 e3       	ldi	r24, 0x35	; 53
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	2b 81       	ldd	r18, Y+3	; 0x03
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2dc:	82 e3       	ldi	r24, 0x32	; 50
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	2b 81       	ldd	r18, Y+3	; 0x03
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	00 00       	nop
				}


	return Local_u8ErrorState;
 2ee:	89 81       	ldd	r24, Y+1	; 0x01

}
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <DIO_u8GetPinValue+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <DIO_u8GetPinValue+0x8>
 304:	0f 92       	push	r0
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	8a 83       	std	Y+2, r24	; 0x02
 30c:	6b 83       	std	Y+3, r22	; 0x03
 30e:	5d 83       	std	Y+5, r21	; 0x05
 310:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 312:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	9d 81       	ldd	r25, Y+5	; 0x05
 318:	89 2b       	or	r24, r25
 31a:	09 f4       	brne	.+2      	; 0x31e <DIO_u8GetPinValue+0x22>
 31c:	73 c0       	rjmp	.+230    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	08 f0       	brcs	.+2      	; 0x326 <DIO_u8GetPinValue+0x2a>
 324:	6f c0       	rjmp	.+222    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
				{
					switch(Copy_u8Port)
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_u8GetPinValue+0x38>
 332:	4f c0       	rjmp	.+158    	; 0x3d2 <DIO_u8GetPinValue+0xd6>
 334:	85 30       	cpi	r24, 0x05	; 5
 336:	91 05       	cpc	r25, r1
 338:	0c f0       	brlt	.+2      	; 0x33c <DIO_u8GetPinValue+0x40>
 33a:	60 c0       	rjmp	.+192    	; 0x3fc <DIO_u8GetPinValue+0x100>
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	91 05       	cpc	r25, r1
 340:	99 f1       	breq	.+102    	; 0x3a8 <DIO_u8GetPinValue+0xac>
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	91 05       	cpc	r25, r1
 346:	0c f0       	brlt	.+2      	; 0x34a <DIO_u8GetPinValue+0x4e>
 348:	59 c0       	rjmp	.+178    	; 0x3fc <DIO_u8GetPinValue+0x100>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	19 f0       	breq	.+6      	; 0x354 <DIO_u8GetPinValue+0x58>
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	b1 f0       	breq	.+44     	; 0x37e <DIO_u8GetPinValue+0x82>
 352:	54 c0       	rjmp	.+168    	; 0x3fc <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 354:	89 e3       	ldi	r24, 0x39	; 57
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	80 81       	ld	r24, Z
 35c:	88 2f       	mov	r24, r24
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	2b 81       	ldd	r18, Y+3	; 0x03
 362:	22 2f       	mov	r18, r18
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8GetPinValue+0x70>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	2a 95       	dec	r18
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8GetPinValue+0x6c>
 370:	28 2f       	mov	r18, r24
 372:	21 70       	andi	r18, 0x01	; 1
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	9d 81       	ldd	r25, Y+5	; 0x05
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	42 c0       	rjmp	.+132    	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 37e:	86 e3       	ldi	r24, 0x36	; 54
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	2b 81       	ldd	r18, Y+3	; 0x03
 38c:	22 2f       	mov	r18, r18
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8GetPinValue+0x9a>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	2a 95       	dec	r18
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8GetPinValue+0x96>
 39a:	28 2f       	mov	r18, r24
 39c:	21 70       	andi	r18, 0x01	; 1
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	9d 81       	ldd	r25, Y+5	; 0x05
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18
 3a6:	2d c0       	rjmp	.+90     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3a8:	83 e3       	ldi	r24, 0x33	; 51
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	2b 81       	ldd	r18, Y+3	; 0x03
 3b6:	22 2f       	mov	r18, r18
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8GetPinValue+0xc4>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	2a 95       	dec	r18
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8GetPinValue+0xc0>
 3c4:	28 2f       	mov	r18, r24
 3c6:	21 70       	andi	r18, 0x01	; 1
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	9d 81       	ldd	r25, Y+5	; 0x05
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
 3d0:	18 c0       	rjmp	.+48     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	80 81       	ld	r24, Z
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2b 81       	ldd	r18, Y+3	; 0x03
 3e0:	22 2f       	mov	r18, r18
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8GetPinValue+0xee>
 3e6:	95 95       	asr	r25
 3e8:	87 95       	ror	r24
 3ea:	2a 95       	dec	r18
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8GetPinValue+0xea>
 3ee:	28 2f       	mov	r18, r24
 3f0:	21 70       	andi	r18, 0x01	; 1
 3f2:	8c 81       	ldd	r24, Y+4	; 0x04
 3f4:	9d 81       	ldd	r25, Y+5	; 0x05
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     default : Local_u8ErrorState=1; break;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 402:	02 c0       	rjmp	.+4      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 408:	89 81       	ldd	r24, Y+1	; 0x01


}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 422:	8a e3       	ldi	r24, 0x3A	; 58
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	23 e0       	ldi	r18, 0x03	; 3
 428:	fc 01       	movw	r30, r24
 42a:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
 42c:	87 e3       	ldi	r24, 0x37	; 55
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	fc 01       	movw	r30, r24
 432:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 434:	84 e3       	ldi	r24, 0x34	; 52
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	fc 01       	movw	r30, r24
 43c:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 43e:	81 e3       	ldi	r24, 0x31	; 49
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	fc 01       	movw	r30, r24
 444:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 446:	8b e3       	ldi	r24, 0x3B	; 59
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 44e:	88 e3       	ldi	r24, 0x38	; 56
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 456:	85 e3       	ldi	r24, 0x35	; 53
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	fc 01       	movw	r30, r24
 45c:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 45e:	82 e3       	ldi	r24, 0x32	; 50
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	fc 01       	movw	r30, r24
 464:	10 82       	st	Z, r1
}
 466:	00 00       	nop
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <main>:
#include"PORT_interface.h"
#include"DIO_interface.h"


void main()
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	c9 58       	subi	r28, 0x89	; 137
 478:	d1 09       	sbc	r29, r1
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
 484:	0e 94 0d 02 	call	0x41a	; 0x41a <PORT_voidInit>
	while (1)
	{
		for(u8 i=0;i<25;i++){
 488:	19 82       	std	Y+1, r1	; 0x01
 48a:	e7 c2       	rjmp	.+1486   	; 0xa5a <__stack+0x1fb>
		//step1
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	83 e0       	ldi	r24, 0x03	; 3
 4a6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	83 e0       	ldi	r24, 0x03	; 3
 4b0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	a0 ea       	ldi	r26, 0xA0	; 160
 4ba:	b1 e4       	ldi	r27, 0x41	; 65
 4bc:	8c a7       	std	Y+44, r24	; 0x2c
 4be:	9d a7       	std	Y+45, r25	; 0x2d
 4c0:	ae a7       	std	Y+46, r26	; 0x2e
 4c2:	bf a7       	std	Y+47, r27	; 0x2f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	4a e7       	ldi	r20, 0x7A	; 122
 4ca:	55 e4       	ldi	r21, 0x45	; 69
 4cc:	6c a5       	ldd	r22, Y+44	; 0x2c
 4ce:	7d a5       	ldd	r23, Y+45	; 0x2d
 4d0:	8e a5       	ldd	r24, Y+46	; 0x2e
 4d2:	9f a5       	ldd	r25, Y+47	; 0x2f
 4d4:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 4d8:	2e 96       	adiw	r28, 0x0e	; 14
 4da:	6c af       	std	Y+60, r22	; 0x3c
 4dc:	7d af       	std	Y+61, r23	; 0x3d
 4de:	8e af       	std	Y+62, r24	; 0x3e
 4e0:	9f af       	std	Y+63, r25	; 0x3f
 4e2:	2e 97       	sbiw	r28, 0x0e	; 14
 4e4:	2e 96       	adiw	r28, 0x0e	; 14
 4e6:	8c ad       	ldd	r24, Y+60	; 0x3c
 4e8:	9d ad       	ldd	r25, Y+61	; 0x3d
 4ea:	ae ad       	ldd	r26, Y+62	; 0x3e
 4ec:	bf ad       	ldd	r27, Y+63	; 0x3f
 4ee:	2e 97       	sbiw	r28, 0x0e	; 14
 4f0:	88 ab       	std	Y+48, r24	; 0x30
 4f2:	99 ab       	std	Y+49, r25	; 0x31
 4f4:	aa ab       	std	Y+50, r26	; 0x32
 4f6:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	40 e8       	ldi	r20, 0x80	; 128
 4fe:	5f e3       	ldi	r21, 0x3F	; 63
 500:	68 a9       	ldd	r22, Y+48	; 0x30
 502:	79 a9       	ldd	r23, Y+49	; 0x31
 504:	8a a9       	ldd	r24, Y+50	; 0x32
 506:	9b a9       	ldd	r25, Y+51	; 0x33
 508:	0e 94 32 05 	call	0xa64	; 0xa64 <__cmpsf2>
 50c:	88 23       	and	r24, r24
 50e:	2c f4       	brge	.+10     	; 0x51a <main+0xac>
		__ticks = 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	9d ab       	std	Y+53, r25	; 0x35
 516:	8c ab       	std	Y+52, r24	; 0x34
 518:	65 c0       	rjmp	.+202    	; 0x5e4 <main+0x176>
	else if (__tmp > 65535)
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	3f ef       	ldi	r19, 0xFF	; 255
 51e:	4f e7       	ldi	r20, 0x7F	; 127
 520:	57 e4       	ldi	r21, 0x47	; 71
 522:	68 a9       	ldd	r22, Y+48	; 0x30
 524:	79 a9       	ldd	r23, Y+49	; 0x31
 526:	8a a9       	ldd	r24, Y+50	; 0x32
 528:	9b a9       	ldd	r25, Y+51	; 0x33
 52a:	0e 94 b3 05 	call	0xb66	; 0xb66 <__gesf2>
 52e:	18 16       	cp	r1, r24
 530:	0c f0       	brlt	.+2      	; 0x534 <main+0xc6>
 532:	46 c0       	rjmp	.+140    	; 0x5c0 <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	40 e2       	ldi	r20, 0x20	; 32
 53a:	51 e4       	ldi	r21, 0x41	; 65
 53c:	6c a5       	ldd	r22, Y+44	; 0x2c
 53e:	7d a5       	ldd	r23, Y+45	; 0x2d
 540:	8e a5       	ldd	r24, Y+46	; 0x2e
 542:	9f a5       	ldd	r25, Y+47	; 0x2f
 544:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 548:	62 96       	adiw	r28, 0x12	; 18
 54a:	6c af       	std	Y+60, r22	; 0x3c
 54c:	7d af       	std	Y+61, r23	; 0x3d
 54e:	8e af       	std	Y+62, r24	; 0x3e
 550:	9f af       	std	Y+63, r25	; 0x3f
 552:	62 97       	sbiw	r28, 0x12	; 18
 554:	62 96       	adiw	r28, 0x12	; 18
 556:	8c ad       	ldd	r24, Y+60	; 0x3c
 558:	9d ad       	ldd	r25, Y+61	; 0x3d
 55a:	ae ad       	ldd	r26, Y+62	; 0x3e
 55c:	bf ad       	ldd	r27, Y+63	; 0x3f
 55e:	62 97       	sbiw	r28, 0x12	; 18
 560:	2a 96       	adiw	r28, 0x0a	; 10
 562:	8c af       	std	Y+60, r24	; 0x3c
 564:	9d af       	std	Y+61, r25	; 0x3d
 566:	ae af       	std	Y+62, r26	; 0x3e
 568:	bf af       	std	Y+63, r27	; 0x3f
 56a:	2a 97       	sbiw	r28, 0x0a	; 10
 56c:	2a 96       	adiw	r28, 0x0a	; 10
 56e:	6c ad       	ldd	r22, Y+60	; 0x3c
 570:	7d ad       	ldd	r23, Y+61	; 0x3d
 572:	8e ad       	ldd	r24, Y+62	; 0x3e
 574:	9f ad       	ldd	r25, Y+63	; 0x3f
 576:	2a 97       	sbiw	r28, 0x0a	; 10
 578:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 57c:	66 96       	adiw	r28, 0x16	; 22
 57e:	6c af       	std	Y+60, r22	; 0x3c
 580:	7d af       	std	Y+61, r23	; 0x3d
 582:	8e af       	std	Y+62, r24	; 0x3e
 584:	9f af       	std	Y+63, r25	; 0x3f
 586:	66 97       	sbiw	r28, 0x16	; 22
 588:	64 96       	adiw	r28, 0x14	; 20
 58a:	ae ad       	ldd	r26, Y+62	; 0x3e
 58c:	bf ad       	ldd	r27, Y+63	; 0x3f
 58e:	64 97       	sbiw	r28, 0x14	; 20
 590:	bd ab       	std	Y+53, r27	; 0x35
 592:	ac ab       	std	Y+52, r26	; 0x34
		while(__ticks)
 594:	10 c0       	rjmp	.+32     	; 0x5b6 <main+0x148>
 596:	80 e9       	ldi	r24, 0x90	; 144
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	9f ab       	std	Y+55, r25	; 0x37
 59c:	8e ab       	std	Y+54, r24	; 0x36
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 59e:	8e a9       	ldd	r24, Y+54	; 0x36
 5a0:	9f a9       	ldd	r25, Y+55	; 0x37
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <main+0x134>
 5a6:	9f ab       	std	Y+55, r25	; 0x37
 5a8:	8e ab       	std	Y+54, r24	; 0x36
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 5aa:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ac:	8c a9       	ldd	r24, Y+52	; 0x34
 5ae:	9d a9       	ldd	r25, Y+53	; 0x35
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	9d ab       	std	Y+53, r25	; 0x35
 5b4:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5b6:	8c a9       	ldd	r24, Y+52	; 0x34
 5b8:	9d a9       	ldd	r25, Y+53	; 0x35
 5ba:	89 2b       	or	r24, r25
 5bc:	61 f7       	brne	.-40     	; 0x596 <main+0x128>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 5be:	1d c0       	rjmp	.+58     	; 0x5fa <main+0x18c>
	}
	else
		__ticks = (uint16_t)__tmp;
 5c0:	68 a9       	ldd	r22, Y+48	; 0x30
 5c2:	79 a9       	ldd	r23, Y+49	; 0x31
 5c4:	8a a9       	ldd	r24, Y+50	; 0x32
 5c6:	9b a9       	ldd	r25, Y+51	; 0x33
 5c8:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 5cc:	6a 96       	adiw	r28, 0x1a	; 26
 5ce:	6c af       	std	Y+60, r22	; 0x3c
 5d0:	7d af       	std	Y+61, r23	; 0x3d
 5d2:	8e af       	std	Y+62, r24	; 0x3e
 5d4:	9f af       	std	Y+63, r25	; 0x3f
 5d6:	6a 97       	sbiw	r28, 0x1a	; 26
 5d8:	68 96       	adiw	r28, 0x18	; 24
 5da:	8e ad       	ldd	r24, Y+62	; 0x3e
 5dc:	9f ad       	ldd	r25, Y+63	; 0x3f
 5de:	68 97       	sbiw	r28, 0x18	; 24
 5e0:	9d ab       	std	Y+53, r25	; 0x35
 5e2:	8c ab       	std	Y+52, r24	; 0x34
 5e4:	8c a9       	ldd	r24, Y+52	; 0x34
 5e6:	9d a9       	ldd	r25, Y+53	; 0x35
 5e8:	99 af       	std	Y+57, r25	; 0x39
 5ea:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5ec:	88 ad       	ldd	r24, Y+56	; 0x38
 5ee:	99 ad       	ldd	r25, Y+57	; 0x39
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <main+0x182>
 5f4:	99 af       	std	Y+57, r25	; 0x39
 5f6:	88 af       	std	Y+56, r24	; 0x38
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 5f8:	00 00       	nop
		_delay_ms(20);
		//step2
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 5fa:	40 e0       	ldi	r20, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	83 e0       	ldi	r24, 0x03	; 3
 600:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_HIGH);
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	83 e0       	ldi	r24, 0x03	; 3
 614:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 618:	40 e0       	ldi	r20, 0x00	; 0
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	a0 ea       	ldi	r26, 0xA0	; 160
 628:	b1 e4       	ldi	r27, 0x41	; 65
 62a:	8e 8f       	std	Y+30, r24	; 0x1e
 62c:	9f 8f       	std	Y+31, r25	; 0x1f
 62e:	a8 a3       	std	Y+32, r26	; 0x20
 630:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	4a e7       	ldi	r20, 0x7A	; 122
 638:	55 e4       	ldi	r21, 0x45	; 69
 63a:	6e 8d       	ldd	r22, Y+30	; 0x1e
 63c:	7f 8d       	ldd	r23, Y+31	; 0x1f
 63e:	88 a1       	ldd	r24, Y+32	; 0x20
 640:	99 a1       	ldd	r25, Y+33	; 0x21
 642:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 646:	6e 96       	adiw	r28, 0x1e	; 30
 648:	6c af       	std	Y+60, r22	; 0x3c
 64a:	7d af       	std	Y+61, r23	; 0x3d
 64c:	8e af       	std	Y+62, r24	; 0x3e
 64e:	9f af       	std	Y+63, r25	; 0x3f
 650:	6e 97       	sbiw	r28, 0x1e	; 30
 652:	6e 96       	adiw	r28, 0x1e	; 30
 654:	8c ad       	ldd	r24, Y+60	; 0x3c
 656:	9d ad       	ldd	r25, Y+61	; 0x3d
 658:	ae ad       	ldd	r26, Y+62	; 0x3e
 65a:	bf ad       	ldd	r27, Y+63	; 0x3f
 65c:	6e 97       	sbiw	r28, 0x1e	; 30
 65e:	8a a3       	std	Y+34, r24	; 0x22
 660:	9b a3       	std	Y+35, r25	; 0x23
 662:	ac a3       	std	Y+36, r26	; 0x24
 664:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	40 e8       	ldi	r20, 0x80	; 128
 66c:	5f e3       	ldi	r21, 0x3F	; 63
 66e:	6a a1       	ldd	r22, Y+34	; 0x22
 670:	7b a1       	ldd	r23, Y+35	; 0x23
 672:	8c a1       	ldd	r24, Y+36	; 0x24
 674:	9d a1       	ldd	r25, Y+37	; 0x25
 676:	0e 94 32 05 	call	0xa64	; 0xa64 <__cmpsf2>
 67a:	88 23       	and	r24, r24
 67c:	2c f4       	brge	.+10     	; 0x688 <main+0x21a>
		__ticks = 1;
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	9f a3       	std	Y+39, r25	; 0x27
 684:	8e a3       	std	Y+38, r24	; 0x26
 686:	65 c0       	rjmp	.+202    	; 0x752 <main+0x2e4>
	else if (__tmp > 65535)
 688:	20 e0       	ldi	r18, 0x00	; 0
 68a:	3f ef       	ldi	r19, 0xFF	; 255
 68c:	4f e7       	ldi	r20, 0x7F	; 127
 68e:	57 e4       	ldi	r21, 0x47	; 71
 690:	6a a1       	ldd	r22, Y+34	; 0x22
 692:	7b a1       	ldd	r23, Y+35	; 0x23
 694:	8c a1       	ldd	r24, Y+36	; 0x24
 696:	9d a1       	ldd	r25, Y+37	; 0x25
 698:	0e 94 b3 05 	call	0xb66	; 0xb66 <__gesf2>
 69c:	18 16       	cp	r1, r24
 69e:	0c f0       	brlt	.+2      	; 0x6a2 <main+0x234>
 6a0:	46 c0       	rjmp	.+140    	; 0x72e <main+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	40 e2       	ldi	r20, 0x20	; 32
 6a8:	51 e4       	ldi	r21, 0x41	; 65
 6aa:	6e 8d       	ldd	r22, Y+30	; 0x1e
 6ac:	7f 8d       	ldd	r23, Y+31	; 0x1f
 6ae:	88 a1       	ldd	r24, Y+32	; 0x20
 6b0:	99 a1       	ldd	r25, Y+33	; 0x21
 6b2:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 6b6:	a2 96       	adiw	r28, 0x22	; 34
 6b8:	6c af       	std	Y+60, r22	; 0x3c
 6ba:	7d af       	std	Y+61, r23	; 0x3d
 6bc:	8e af       	std	Y+62, r24	; 0x3e
 6be:	9f af       	std	Y+63, r25	; 0x3f
 6c0:	a2 97       	sbiw	r28, 0x22	; 34
 6c2:	a2 96       	adiw	r28, 0x22	; 34
 6c4:	8c ad       	ldd	r24, Y+60	; 0x3c
 6c6:	9d ad       	ldd	r25, Y+61	; 0x3d
 6c8:	ae ad       	ldd	r26, Y+62	; 0x3e
 6ca:	bf ad       	ldd	r27, Y+63	; 0x3f
 6cc:	a2 97       	sbiw	r28, 0x22	; 34
 6ce:	26 96       	adiw	r28, 0x06	; 6
 6d0:	8c af       	std	Y+60, r24	; 0x3c
 6d2:	9d af       	std	Y+61, r25	; 0x3d
 6d4:	ae af       	std	Y+62, r26	; 0x3e
 6d6:	bf af       	std	Y+63, r27	; 0x3f
 6d8:	26 97       	sbiw	r28, 0x06	; 6
 6da:	26 96       	adiw	r28, 0x06	; 6
 6dc:	6c ad       	ldd	r22, Y+60	; 0x3c
 6de:	7d ad       	ldd	r23, Y+61	; 0x3d
 6e0:	8e ad       	ldd	r24, Y+62	; 0x3e
 6e2:	9f ad       	ldd	r25, Y+63	; 0x3f
 6e4:	26 97       	sbiw	r28, 0x06	; 6
 6e6:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 6ea:	a6 96       	adiw	r28, 0x26	; 38
 6ec:	6c af       	std	Y+60, r22	; 0x3c
 6ee:	7d af       	std	Y+61, r23	; 0x3d
 6f0:	8e af       	std	Y+62, r24	; 0x3e
 6f2:	9f af       	std	Y+63, r25	; 0x3f
 6f4:	a6 97       	sbiw	r28, 0x26	; 38
 6f6:	a4 96       	adiw	r28, 0x24	; 36
 6f8:	ae ad       	ldd	r26, Y+62	; 0x3e
 6fa:	bf ad       	ldd	r27, Y+63	; 0x3f
 6fc:	a4 97       	sbiw	r28, 0x24	; 36
 6fe:	bf a3       	std	Y+39, r27	; 0x27
 700:	ae a3       	std	Y+38, r26	; 0x26
		while(__ticks)
 702:	10 c0       	rjmp	.+32     	; 0x724 <main+0x2b6>
 704:	80 e9       	ldi	r24, 0x90	; 144
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	99 a7       	std	Y+41, r25	; 0x29
 70a:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 70c:	88 a5       	ldd	r24, Y+40	; 0x28
 70e:	99 a5       	ldd	r25, Y+41	; 0x29
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <main+0x2a2>
 714:	99 a7       	std	Y+41, r25	; 0x29
 716:	88 a7       	std	Y+40, r24	; 0x28
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 718:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 71a:	8e a1       	ldd	r24, Y+38	; 0x26
 71c:	9f a1       	ldd	r25, Y+39	; 0x27
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	9f a3       	std	Y+39, r25	; 0x27
 722:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 724:	8e a1       	ldd	r24, Y+38	; 0x26
 726:	9f a1       	ldd	r25, Y+39	; 0x27
 728:	89 2b       	or	r24, r25
 72a:	61 f7       	brne	.-40     	; 0x704 <main+0x296>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 72c:	1d c0       	rjmp	.+58     	; 0x768 <main+0x2fa>
	}
	else
		__ticks = (uint16_t)__tmp;
 72e:	6a a1       	ldd	r22, Y+34	; 0x22
 730:	7b a1       	ldd	r23, Y+35	; 0x23
 732:	8c a1       	ldd	r24, Y+36	; 0x24
 734:	9d a1       	ldd	r25, Y+37	; 0x25
 736:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 73a:	aa 96       	adiw	r28, 0x2a	; 42
 73c:	6c af       	std	Y+60, r22	; 0x3c
 73e:	7d af       	std	Y+61, r23	; 0x3d
 740:	8e af       	std	Y+62, r24	; 0x3e
 742:	9f af       	std	Y+63, r25	; 0x3f
 744:	aa 97       	sbiw	r28, 0x2a	; 42
 746:	a8 96       	adiw	r28, 0x28	; 40
 748:	8e ad       	ldd	r24, Y+62	; 0x3e
 74a:	9f ad       	ldd	r25, Y+63	; 0x3f
 74c:	a8 97       	sbiw	r28, 0x28	; 40
 74e:	9f a3       	std	Y+39, r25	; 0x27
 750:	8e a3       	std	Y+38, r24	; 0x26
 752:	8e a1       	ldd	r24, Y+38	; 0x26
 754:	9f a1       	ldd	r25, Y+39	; 0x27
 756:	9b a7       	std	Y+43, r25	; 0x2b
 758:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 75a:	8a a5       	ldd	r24, Y+42	; 0x2a
 75c:	9b a5       	ldd	r25, Y+43	; 0x2b
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <main+0x2f0>
 762:	9b a7       	std	Y+43, r25	; 0x2b
 764:	8a a7       	std	Y+42, r24	; 0x2a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 766:	00 00       	nop
		_delay_ms(20);
		//step3
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	83 e0       	ldi	r24, 0x03	; 3
 76e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	83 e0       	ldi	r24, 0x03	; 3
 778:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
 77c:	41 e0       	ldi	r20, 0x01	; 1
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	83 e0       	ldi	r24, 0x03	; 3
 782:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 786:	40 e0       	ldi	r20, 0x00	; 0
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	a0 ea       	ldi	r26, 0xA0	; 160
 796:	b1 e4       	ldi	r27, 0x41	; 65
 798:	88 8b       	std	Y+16, r24	; 0x10
 79a:	99 8b       	std	Y+17, r25	; 0x11
 79c:	aa 8b       	std	Y+18, r26	; 0x12
 79e:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	4a e7       	ldi	r20, 0x7A	; 122
 7a6:	55 e4       	ldi	r21, 0x45	; 69
 7a8:	68 89       	ldd	r22, Y+16	; 0x10
 7aa:	79 89       	ldd	r23, Y+17	; 0x11
 7ac:	8a 89       	ldd	r24, Y+18	; 0x12
 7ae:	9b 89       	ldd	r25, Y+19	; 0x13
 7b0:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 7b4:	ae 96       	adiw	r28, 0x2e	; 46
 7b6:	6c af       	std	Y+60, r22	; 0x3c
 7b8:	7d af       	std	Y+61, r23	; 0x3d
 7ba:	8e af       	std	Y+62, r24	; 0x3e
 7bc:	9f af       	std	Y+63, r25	; 0x3f
 7be:	ae 97       	sbiw	r28, 0x2e	; 46
 7c0:	ae 96       	adiw	r28, 0x2e	; 46
 7c2:	8c ad       	ldd	r24, Y+60	; 0x3c
 7c4:	9d ad       	ldd	r25, Y+61	; 0x3d
 7c6:	ae ad       	ldd	r26, Y+62	; 0x3e
 7c8:	bf ad       	ldd	r27, Y+63	; 0x3f
 7ca:	ae 97       	sbiw	r28, 0x2e	; 46
 7cc:	8c 8b       	std	Y+20, r24	; 0x14
 7ce:	9d 8b       	std	Y+21, r25	; 0x15
 7d0:	ae 8b       	std	Y+22, r26	; 0x16
 7d2:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	40 e8       	ldi	r20, 0x80	; 128
 7da:	5f e3       	ldi	r21, 0x3F	; 63
 7dc:	6c 89       	ldd	r22, Y+20	; 0x14
 7de:	7d 89       	ldd	r23, Y+21	; 0x15
 7e0:	8e 89       	ldd	r24, Y+22	; 0x16
 7e2:	9f 89       	ldd	r25, Y+23	; 0x17
 7e4:	0e 94 32 05 	call	0xa64	; 0xa64 <__cmpsf2>
 7e8:	88 23       	and	r24, r24
 7ea:	2c f4       	brge	.+10     	; 0x7f6 <main+0x388>
		__ticks = 1;
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	99 8f       	std	Y+25, r25	; 0x19
 7f2:	88 8f       	std	Y+24, r24	; 0x18
 7f4:	65 c0       	rjmp	.+202    	; 0x8c0 <__stack+0x61>
	else if (__tmp > 65535)
 7f6:	20 e0       	ldi	r18, 0x00	; 0
 7f8:	3f ef       	ldi	r19, 0xFF	; 255
 7fa:	4f e7       	ldi	r20, 0x7F	; 127
 7fc:	57 e4       	ldi	r21, 0x47	; 71
 7fe:	6c 89       	ldd	r22, Y+20	; 0x14
 800:	7d 89       	ldd	r23, Y+21	; 0x15
 802:	8e 89       	ldd	r24, Y+22	; 0x16
 804:	9f 89       	ldd	r25, Y+23	; 0x17
 806:	0e 94 b3 05 	call	0xb66	; 0xb66 <__gesf2>
 80a:	18 16       	cp	r1, r24
 80c:	0c f0       	brlt	.+2      	; 0x810 <main+0x3a2>
 80e:	46 c0       	rjmp	.+140    	; 0x89c <__stack+0x3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	40 e2       	ldi	r20, 0x20	; 32
 816:	51 e4       	ldi	r21, 0x41	; 65
 818:	68 89       	ldd	r22, Y+16	; 0x10
 81a:	79 89       	ldd	r23, Y+17	; 0x11
 81c:	8a 89       	ldd	r24, Y+18	; 0x12
 81e:	9b 89       	ldd	r25, Y+19	; 0x13
 820:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 824:	e2 96       	adiw	r28, 0x32	; 50
 826:	6c af       	std	Y+60, r22	; 0x3c
 828:	7d af       	std	Y+61, r23	; 0x3d
 82a:	8e af       	std	Y+62, r24	; 0x3e
 82c:	9f af       	std	Y+63, r25	; 0x3f
 82e:	e2 97       	sbiw	r28, 0x32	; 50
 830:	e2 96       	adiw	r28, 0x32	; 50
 832:	8c ad       	ldd	r24, Y+60	; 0x3c
 834:	9d ad       	ldd	r25, Y+61	; 0x3d
 836:	ae ad       	ldd	r26, Y+62	; 0x3e
 838:	bf ad       	ldd	r27, Y+63	; 0x3f
 83a:	e2 97       	sbiw	r28, 0x32	; 50
 83c:	22 96       	adiw	r28, 0x02	; 2
 83e:	8c af       	std	Y+60, r24	; 0x3c
 840:	9d af       	std	Y+61, r25	; 0x3d
 842:	ae af       	std	Y+62, r26	; 0x3e
 844:	bf af       	std	Y+63, r27	; 0x3f
 846:	22 97       	sbiw	r28, 0x02	; 2
 848:	22 96       	adiw	r28, 0x02	; 2
 84a:	6c ad       	ldd	r22, Y+60	; 0x3c
 84c:	7d ad       	ldd	r23, Y+61	; 0x3d
 84e:	8e ad       	ldd	r24, Y+62	; 0x3e
 850:	9f ad       	ldd	r25, Y+63	; 0x3f
 852:	22 97       	sbiw	r28, 0x02	; 2
 854:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 858:	e6 96       	adiw	r28, 0x36	; 54
 85a:	6c af       	std	Y+60, r22	; 0x3c
 85c:	7d af       	std	Y+61, r23	; 0x3d
 85e:	8e af       	std	Y+62, r24	; 0x3e
 860:	9f af       	std	Y+63, r25	; 0x3f
 862:	e6 97       	sbiw	r28, 0x36	; 54
 864:	e4 96       	adiw	r28, 0x34	; 52
 866:	ae ad       	ldd	r26, Y+62	; 0x3e
 868:	bf ad       	ldd	r27, Y+63	; 0x3f
 86a:	e4 97       	sbiw	r28, 0x34	; 52
 86c:	b9 8f       	std	Y+25, r27	; 0x19
 86e:	a8 8f       	std	Y+24, r26	; 0x18
		while(__ticks)
 870:	10 c0       	rjmp	.+32     	; 0x892 <__stack+0x33>
 872:	80 e9       	ldi	r24, 0x90	; 144
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	9b 8f       	std	Y+27, r25	; 0x1b
 878:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 87a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 87c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 87e:	01 97       	sbiw	r24, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x1f>
 882:	9b 8f       	std	Y+27, r25	; 0x1b
 884:	8a 8f       	std	Y+26, r24	; 0x1a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 886:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 888:	88 8d       	ldd	r24, Y+24	; 0x18
 88a:	99 8d       	ldd	r25, Y+25	; 0x19
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	99 8f       	std	Y+25, r25	; 0x19
 890:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 892:	88 8d       	ldd	r24, Y+24	; 0x18
 894:	99 8d       	ldd	r25, Y+25	; 0x19
 896:	89 2b       	or	r24, r25
 898:	61 f7       	brne	.-40     	; 0x872 <__stack+0x13>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 89a:	1d c0       	rjmp	.+58     	; 0x8d6 <__stack+0x77>
	}
	else
		__ticks = (uint16_t)__tmp;
 89c:	6c 89       	ldd	r22, Y+20	; 0x14
 89e:	7d 89       	ldd	r23, Y+21	; 0x15
 8a0:	8e 89       	ldd	r24, Y+22	; 0x16
 8a2:	9f 89       	ldd	r25, Y+23	; 0x17
 8a4:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 8a8:	ea 96       	adiw	r28, 0x3a	; 58
 8aa:	6c af       	std	Y+60, r22	; 0x3c
 8ac:	7d af       	std	Y+61, r23	; 0x3d
 8ae:	8e af       	std	Y+62, r24	; 0x3e
 8b0:	9f af       	std	Y+63, r25	; 0x3f
 8b2:	ea 97       	sbiw	r28, 0x3a	; 58
 8b4:	e8 96       	adiw	r28, 0x38	; 56
 8b6:	8e ad       	ldd	r24, Y+62	; 0x3e
 8b8:	9f ad       	ldd	r25, Y+63	; 0x3f
 8ba:	e8 97       	sbiw	r28, 0x38	; 56
 8bc:	99 8f       	std	Y+25, r25	; 0x19
 8be:	88 8f       	std	Y+24, r24	; 0x18
 8c0:	88 8d       	ldd	r24, Y+24	; 0x18
 8c2:	99 8d       	ldd	r25, Y+25	; 0x19
 8c4:	9d 8f       	std	Y+29, r25	; 0x1d
 8c6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 8ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
 8cc:	01 97       	sbiw	r24, 0x01	; 1
 8ce:	f1 f7       	brne	.-4      	; 0x8cc <__stack+0x6d>
 8d0:	9d 8f       	std	Y+29, r25	; 0x1d
 8d2:	8c 8f       	std	Y+28, r24	; 0x1c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 8d4:	00 00       	nop
		_delay_ms(20);
		//step4
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	83 e0       	ldi	r24, 0x03	; 3
 8dc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 8e0:	40 e0       	ldi	r20, 0x00	; 0
 8e2:	61 e0       	ldi	r22, 0x01	; 1
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 8ea:	40 e0       	ldi	r20, 0x00	; 0
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	83 e0       	ldi	r24, 0x03	; 3
 8f0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_HIGH);
 8f4:	41 e0       	ldi	r20, 0x01	; 1
 8f6:	61 e0       	ldi	r22, 0x01	; 1
 8f8:	83 e0       	ldi	r24, 0x03	; 3
 8fa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	a0 ea       	ldi	r26, 0xA0	; 160
 904:	b1 e4       	ldi	r27, 0x41	; 65
 906:	8a 83       	std	Y+2, r24	; 0x02
 908:	9b 83       	std	Y+3, r25	; 0x03
 90a:	ac 83       	std	Y+4, r26	; 0x04
 90c:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 90e:	20 e0       	ldi	r18, 0x00	; 0
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	4a e7       	ldi	r20, 0x7A	; 122
 914:	55 e4       	ldi	r21, 0x45	; 69
 916:	6a 81       	ldd	r22, Y+2	; 0x02
 918:	7b 81       	ldd	r23, Y+3	; 0x03
 91a:	8c 81       	ldd	r24, Y+4	; 0x04
 91c:	9d 81       	ldd	r25, Y+5	; 0x05
 91e:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 922:	ee 96       	adiw	r28, 0x3e	; 62
 924:	6c af       	std	Y+60, r22	; 0x3c
 926:	7d af       	std	Y+61, r23	; 0x3d
 928:	8e af       	std	Y+62, r24	; 0x3e
 92a:	9f af       	std	Y+63, r25	; 0x3f
 92c:	ee 97       	sbiw	r28, 0x3e	; 62
 92e:	ee 96       	adiw	r28, 0x3e	; 62
 930:	8c ad       	ldd	r24, Y+60	; 0x3c
 932:	9d ad       	ldd	r25, Y+61	; 0x3d
 934:	ae ad       	ldd	r26, Y+62	; 0x3e
 936:	bf ad       	ldd	r27, Y+63	; 0x3f
 938:	ee 97       	sbiw	r28, 0x3e	; 62
 93a:	8e 83       	std	Y+6, r24	; 0x06
 93c:	9f 83       	std	Y+7, r25	; 0x07
 93e:	a8 87       	std	Y+8, r26	; 0x08
 940:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 942:	20 e0       	ldi	r18, 0x00	; 0
 944:	30 e0       	ldi	r19, 0x00	; 0
 946:	40 e8       	ldi	r20, 0x80	; 128
 948:	5f e3       	ldi	r21, 0x3F	; 63
 94a:	6e 81       	ldd	r22, Y+6	; 0x06
 94c:	7f 81       	ldd	r23, Y+7	; 0x07
 94e:	88 85       	ldd	r24, Y+8	; 0x08
 950:	99 85       	ldd	r25, Y+9	; 0x09
 952:	0e 94 32 05 	call	0xa64	; 0xa64 <__cmpsf2>
 956:	88 23       	and	r24, r24
 958:	2c f4       	brge	.+10     	; 0x964 <__stack+0x105>
		__ticks = 1;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	9b 87       	std	Y+11, r25	; 0x0b
 960:	8a 87       	std	Y+10, r24	; 0x0a
 962:	6d c0       	rjmp	.+218    	; 0xa3e <__stack+0x1df>
	else if (__tmp > 65535)
 964:	20 e0       	ldi	r18, 0x00	; 0
 966:	3f ef       	ldi	r19, 0xFF	; 255
 968:	4f e7       	ldi	r20, 0x7F	; 127
 96a:	57 e4       	ldi	r21, 0x47	; 71
 96c:	6e 81       	ldd	r22, Y+6	; 0x06
 96e:	7f 81       	ldd	r23, Y+7	; 0x07
 970:	88 85       	ldd	r24, Y+8	; 0x08
 972:	99 85       	ldd	r25, Y+9	; 0x09
 974:	0e 94 b3 05 	call	0xb66	; 0xb66 <__gesf2>
 978:	18 16       	cp	r1, r24
 97a:	0c f0       	brlt	.+2      	; 0x97e <__stack+0x11f>
 97c:	4a c0       	rjmp	.+148    	; 0xa12 <__stack+0x1b3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 97e:	20 e0       	ldi	r18, 0x00	; 0
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	40 e2       	ldi	r20, 0x20	; 32
 984:	51 e4       	ldi	r21, 0x41	; 65
 986:	6a 81       	ldd	r22, Y+2	; 0x02
 988:	7b 81       	ldd	r23, Y+3	; 0x03
 98a:	8c 81       	ldd	r24, Y+4	; 0x04
 98c:	9d 81       	ldd	r25, Y+5	; 0x05
 98e:	0e 94 b8 05 	call	0xb70	; 0xb70 <__mulsf3>
 992:	c2 58       	subi	r28, 0x82	; 130
 994:	df 4f       	sbci	r29, 0xFF	; 255
 996:	68 83       	st	Y, r22
 998:	79 83       	std	Y+1, r23	; 0x01
 99a:	8a 83       	std	Y+2, r24	; 0x02
 99c:	9b 83       	std	Y+3, r25	; 0x03
 99e:	ce 57       	subi	r28, 0x7E	; 126
 9a0:	d0 40       	sbci	r29, 0x00	; 0
 9a2:	c2 58       	subi	r28, 0x82	; 130
 9a4:	df 4f       	sbci	r29, 0xFF	; 255
 9a6:	88 81       	ld	r24, Y
 9a8:	99 81       	ldd	r25, Y+1	; 0x01
 9aa:	aa 81       	ldd	r26, Y+2	; 0x02
 9ac:	bb 81       	ldd	r27, Y+3	; 0x03
 9ae:	ce 57       	subi	r28, 0x7E	; 126
 9b0:	d0 40       	sbci	r29, 0x00	; 0
 9b2:	8a af       	std	Y+58, r24	; 0x3a
 9b4:	9b af       	std	Y+59, r25	; 0x3b
 9b6:	ac af       	std	Y+60, r26	; 0x3c
 9b8:	bd af       	std	Y+61, r27	; 0x3d
 9ba:	6a ad       	ldd	r22, Y+58	; 0x3a
 9bc:	7b ad       	ldd	r23, Y+59	; 0x3b
 9be:	8c ad       	ldd	r24, Y+60	; 0x3c
 9c0:	9d ad       	ldd	r25, Y+61	; 0x3d
 9c2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 9c6:	ce 57       	subi	r28, 0x7E	; 126
 9c8:	df 4f       	sbci	r29, 0xFF	; 255
 9ca:	68 83       	st	Y, r22
 9cc:	79 83       	std	Y+1, r23	; 0x01
 9ce:	8a 83       	std	Y+2, r24	; 0x02
 9d0:	9b 83       	std	Y+3, r25	; 0x03
 9d2:	c2 58       	subi	r28, 0x82	; 130
 9d4:	d0 40       	sbci	r29, 0x00	; 0
 9d6:	ce 57       	subi	r28, 0x7E	; 126
 9d8:	df 4f       	sbci	r29, 0xFF	; 255
 9da:	a8 81       	ld	r26, Y
 9dc:	b9 81       	ldd	r27, Y+1	; 0x01
 9de:	c2 58       	subi	r28, 0x82	; 130
 9e0:	d0 40       	sbci	r29, 0x00	; 0
 9e2:	bb 87       	std	Y+11, r27	; 0x0b
 9e4:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
 9e6:	10 c0       	rjmp	.+32     	; 0xa08 <__stack+0x1a9>
 9e8:	80 e9       	ldi	r24, 0x90	; 144
 9ea:	91 e0       	ldi	r25, 0x01	; 1
 9ec:	9d 87       	std	Y+13, r25	; 0x0d
 9ee:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 9f0:	8c 85       	ldd	r24, Y+12	; 0x0c
 9f2:	9d 85       	ldd	r25, Y+13	; 0x0d
 9f4:	01 97       	sbiw	r24, 0x01	; 1
 9f6:	f1 f7       	brne	.-4      	; 0x9f4 <__stack+0x195>
 9f8:	9d 87       	std	Y+13, r25	; 0x0d
 9fa:	8c 87       	std	Y+12, r24	; 0x0c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 9fc:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9fe:	8a 85       	ldd	r24, Y+10	; 0x0a
 a00:	9b 85       	ldd	r25, Y+11	; 0x0b
 a02:	01 97       	sbiw	r24, 0x01	; 1
 a04:	9b 87       	std	Y+11, r25	; 0x0b
 a06:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a08:	8a 85       	ldd	r24, Y+10	; 0x0a
 a0a:	9b 85       	ldd	r25, Y+11	; 0x0b
 a0c:	89 2b       	or	r24, r25
 a0e:	61 f7       	brne	.-40     	; 0x9e8 <__stack+0x189>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 a10:	21 c0       	rjmp	.+66     	; 0xa54 <__stack+0x1f5>
	}
	else
		__ticks = (uint16_t)__tmp;
 a12:	6e 81       	ldd	r22, Y+6	; 0x06
 a14:	7f 81       	ldd	r23, Y+7	; 0x07
 a16:	88 85       	ldd	r24, Y+8	; 0x08
 a18:	99 85       	ldd	r25, Y+9	; 0x09
 a1a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 a1e:	ca 57       	subi	r28, 0x7A	; 122
 a20:	df 4f       	sbci	r29, 0xFF	; 255
 a22:	68 83       	st	Y, r22
 a24:	79 83       	std	Y+1, r23	; 0x01
 a26:	8a 83       	std	Y+2, r24	; 0x02
 a28:	9b 83       	std	Y+3, r25	; 0x03
 a2a:	c6 58       	subi	r28, 0x86	; 134
 a2c:	d0 40       	sbci	r29, 0x00	; 0
 a2e:	ca 57       	subi	r28, 0x7A	; 122
 a30:	df 4f       	sbci	r29, 0xFF	; 255
 a32:	88 81       	ld	r24, Y
 a34:	99 81       	ldd	r25, Y+1	; 0x01
 a36:	c6 58       	subi	r28, 0x86	; 134
 a38:	d0 40       	sbci	r29, 0x00	; 0
 a3a:	9b 87       	std	Y+11, r25	; 0x0b
 a3c:	8a 87       	std	Y+10, r24	; 0x0a
 a3e:	8a 85       	ldd	r24, Y+10	; 0x0a
 a40:	9b 85       	ldd	r25, Y+11	; 0x0b
 a42:	9f 87       	std	Y+15, r25	; 0x0f
 a44:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a46:	8e 85       	ldd	r24, Y+14	; 0x0e
 a48:	9f 85       	ldd	r25, Y+15	; 0x0f
 a4a:	01 97       	sbiw	r24, 0x01	; 1
 a4c:	f1 f7       	brne	.-4      	; 0xa4a <__stack+0x1eb>
 a4e:	9f 87       	std	Y+15, r25	; 0x0f
 a50:	8e 87       	std	Y+14, r24	; 0x0e
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 a52:	00 00       	nop
void main()
{
	PORT_voidInit();
	while (1)
	{
		for(u8 i=0;i<25;i++){
 a54:	89 81       	ldd	r24, Y+1	; 0x01
 a56:	8f 5f       	subi	r24, 0xFF	; 255
 a58:	89 83       	std	Y+1, r24	; 0x01
 a5a:	89 81       	ldd	r24, Y+1	; 0x01
 a5c:	89 31       	cpi	r24, 0x19	; 25
 a5e:	08 f4       	brcc	.+2      	; 0xa62 <__stack+0x203>
 a60:	15 cd       	rjmp	.-1494   	; 0x48c <main+0x1e>
 a62:	12 cd       	rjmp	.-1500   	; 0x488 <main+0x1a>

00000a64 <__cmpsf2>:
 a64:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_cmp>
 a68:	08 f4       	brcc	.+2      	; 0xa6c <__cmpsf2+0x8>
 a6a:	81 e0       	ldi	r24, 0x01	; 1
 a6c:	08 95       	ret

00000a6e <__fixunssfsi>:
 a6e:	0e 94 92 05 	call	0xb24	; 0xb24 <__fp_splitA>
 a72:	88 f0       	brcs	.+34     	; 0xa96 <__fixunssfsi+0x28>
 a74:	9f 57       	subi	r25, 0x7F	; 127
 a76:	98 f0       	brcs	.+38     	; 0xa9e <__fixunssfsi+0x30>
 a78:	b9 2f       	mov	r27, r25
 a7a:	99 27       	eor	r25, r25
 a7c:	b7 51       	subi	r27, 0x17	; 23
 a7e:	b0 f0       	brcs	.+44     	; 0xaac <__fixunssfsi+0x3e>
 a80:	e1 f0       	breq	.+56     	; 0xaba <__fixunssfsi+0x4c>
 a82:	66 0f       	add	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	88 1f       	adc	r24, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	1a f0       	brmi	.+6      	; 0xa92 <__fixunssfsi+0x24>
 a8c:	ba 95       	dec	r27
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__fixunssfsi+0x14>
 a90:	14 c0       	rjmp	.+40     	; 0xaba <__fixunssfsi+0x4c>
 a92:	b1 30       	cpi	r27, 0x01	; 1
 a94:	91 f0       	breq	.+36     	; 0xaba <__fixunssfsi+0x4c>
 a96:	0e 94 ac 05 	call	0xb58	; 0xb58 <__fp_zero>
 a9a:	b1 e0       	ldi	r27, 0x01	; 1
 a9c:	08 95       	ret
 a9e:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__fp_zero>
 aa2:	67 2f       	mov	r22, r23
 aa4:	78 2f       	mov	r23, r24
 aa6:	88 27       	eor	r24, r24
 aa8:	b8 5f       	subi	r27, 0xF8	; 248
 aaa:	39 f0       	breq	.+14     	; 0xaba <__fixunssfsi+0x4c>
 aac:	b9 3f       	cpi	r27, 0xF9	; 249
 aae:	cc f3       	brlt	.-14     	; 0xaa2 <__fixunssfsi+0x34>
 ab0:	86 95       	lsr	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b3 95       	inc	r27
 ab8:	d9 f7       	brne	.-10     	; 0xab0 <__fixunssfsi+0x42>
 aba:	3e f4       	brtc	.+14     	; 0xaca <__fixunssfsi+0x5c>
 abc:	90 95       	com	r25
 abe:	80 95       	com	r24
 ac0:	70 95       	com	r23
 ac2:	61 95       	neg	r22
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	08 95       	ret

00000acc <__fp_cmp>:
 acc:	99 0f       	add	r25, r25
 ace:	00 08       	sbc	r0, r0
 ad0:	55 0f       	add	r21, r21
 ad2:	aa 0b       	sbc	r26, r26
 ad4:	e0 e8       	ldi	r30, 0x80	; 128
 ad6:	fe ef       	ldi	r31, 0xFE	; 254
 ad8:	16 16       	cp	r1, r22
 ada:	17 06       	cpc	r1, r23
 adc:	e8 07       	cpc	r30, r24
 ade:	f9 07       	cpc	r31, r25
 ae0:	c0 f0       	brcs	.+48     	; 0xb12 <__fp_cmp+0x46>
 ae2:	12 16       	cp	r1, r18
 ae4:	13 06       	cpc	r1, r19
 ae6:	e4 07       	cpc	r30, r20
 ae8:	f5 07       	cpc	r31, r21
 aea:	98 f0       	brcs	.+38     	; 0xb12 <__fp_cmp+0x46>
 aec:	62 1b       	sub	r22, r18
 aee:	73 0b       	sbc	r23, r19
 af0:	84 0b       	sbc	r24, r20
 af2:	95 0b       	sbc	r25, r21
 af4:	39 f4       	brne	.+14     	; 0xb04 <__fp_cmp+0x38>
 af6:	0a 26       	eor	r0, r26
 af8:	61 f0       	breq	.+24     	; 0xb12 <__fp_cmp+0x46>
 afa:	23 2b       	or	r18, r19
 afc:	24 2b       	or	r18, r20
 afe:	25 2b       	or	r18, r21
 b00:	21 f4       	brne	.+8      	; 0xb0a <__fp_cmp+0x3e>
 b02:	08 95       	ret
 b04:	0a 26       	eor	r0, r26
 b06:	09 f4       	brne	.+2      	; 0xb0a <__fp_cmp+0x3e>
 b08:	a1 40       	sbci	r26, 0x01	; 1
 b0a:	a6 95       	lsr	r26
 b0c:	8f ef       	ldi	r24, 0xFF	; 255
 b0e:	81 1d       	adc	r24, r1
 b10:	81 1d       	adc	r24, r1
 b12:	08 95       	ret

00000b14 <__fp_split3>:
 b14:	57 fd       	sbrc	r21, 7
 b16:	90 58       	subi	r25, 0x80	; 128
 b18:	44 0f       	add	r20, r20
 b1a:	55 1f       	adc	r21, r21
 b1c:	59 f0       	breq	.+22     	; 0xb34 <__fp_splitA+0x10>
 b1e:	5f 3f       	cpi	r21, 0xFF	; 255
 b20:	71 f0       	breq	.+28     	; 0xb3e <__fp_splitA+0x1a>
 b22:	47 95       	ror	r20

00000b24 <__fp_splitA>:
 b24:	88 0f       	add	r24, r24
 b26:	97 fb       	bst	r25, 7
 b28:	99 1f       	adc	r25, r25
 b2a:	61 f0       	breq	.+24     	; 0xb44 <__fp_splitA+0x20>
 b2c:	9f 3f       	cpi	r25, 0xFF	; 255
 b2e:	79 f0       	breq	.+30     	; 0xb4e <__fp_splitA+0x2a>
 b30:	87 95       	ror	r24
 b32:	08 95       	ret
 b34:	12 16       	cp	r1, r18
 b36:	13 06       	cpc	r1, r19
 b38:	14 06       	cpc	r1, r20
 b3a:	55 1f       	adc	r21, r21
 b3c:	f2 cf       	rjmp	.-28     	; 0xb22 <__fp_split3+0xe>
 b3e:	46 95       	lsr	r20
 b40:	f1 df       	rcall	.-30     	; 0xb24 <__fp_splitA>
 b42:	08 c0       	rjmp	.+16     	; 0xb54 <__fp_splitA+0x30>
 b44:	16 16       	cp	r1, r22
 b46:	17 06       	cpc	r1, r23
 b48:	18 06       	cpc	r1, r24
 b4a:	99 1f       	adc	r25, r25
 b4c:	f1 cf       	rjmp	.-30     	; 0xb30 <__fp_splitA+0xc>
 b4e:	86 95       	lsr	r24
 b50:	71 05       	cpc	r23, r1
 b52:	61 05       	cpc	r22, r1
 b54:	08 94       	sec
 b56:	08 95       	ret

00000b58 <__fp_zero>:
 b58:	e8 94       	clt

00000b5a <__fp_szero>:
 b5a:	bb 27       	eor	r27, r27
 b5c:	66 27       	eor	r22, r22
 b5e:	77 27       	eor	r23, r23
 b60:	cb 01       	movw	r24, r22
 b62:	97 f9       	bld	r25, 7
 b64:	08 95       	ret

00000b66 <__gesf2>:
 b66:	0e 94 66 05 	call	0xacc	; 0xacc <__fp_cmp>
 b6a:	08 f4       	brcc	.+2      	; 0xb6e <__gesf2+0x8>
 b6c:	8f ef       	ldi	r24, 0xFF	; 255
 b6e:	08 95       	ret

00000b70 <__mulsf3>:
 b70:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3x>
 b74:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__fp_round>
 b78:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__fp_pscA>
 b7c:	38 f0       	brcs	.+14     	; 0xb8c <__mulsf3+0x1c>
 b7e:	0e 94 35 06 	call	0xc6a	; 0xc6a <__fp_pscB>
 b82:	20 f0       	brcs	.+8      	; 0xb8c <__mulsf3+0x1c>
 b84:	95 23       	and	r25, r21
 b86:	11 f0       	breq	.+4      	; 0xb8c <__mulsf3+0x1c>
 b88:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_inf>
 b8c:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <__fp_nan>
 b90:	11 24       	eor	r1, r1
 b92:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_szero>

00000b96 <__mulsf3x>:
 b96:	0e 94 8a 05 	call	0xb14	; 0xb14 <__fp_split3>
 b9a:	70 f3       	brcs	.-36     	; 0xb78 <__mulsf3+0x8>

00000b9c <__mulsf3_pse>:
 b9c:	95 9f       	mul	r25, r21
 b9e:	c1 f3       	breq	.-16     	; 0xb90 <__mulsf3+0x20>
 ba0:	95 0f       	add	r25, r21
 ba2:	50 e0       	ldi	r21, 0x00	; 0
 ba4:	55 1f       	adc	r21, r21
 ba6:	62 9f       	mul	r22, r18
 ba8:	f0 01       	movw	r30, r0
 baa:	72 9f       	mul	r23, r18
 bac:	bb 27       	eor	r27, r27
 bae:	f0 0d       	add	r31, r0
 bb0:	b1 1d       	adc	r27, r1
 bb2:	63 9f       	mul	r22, r19
 bb4:	aa 27       	eor	r26, r26
 bb6:	f0 0d       	add	r31, r0
 bb8:	b1 1d       	adc	r27, r1
 bba:	aa 1f       	adc	r26, r26
 bbc:	64 9f       	mul	r22, r20
 bbe:	66 27       	eor	r22, r22
 bc0:	b0 0d       	add	r27, r0
 bc2:	a1 1d       	adc	r26, r1
 bc4:	66 1f       	adc	r22, r22
 bc6:	82 9f       	mul	r24, r18
 bc8:	22 27       	eor	r18, r18
 bca:	b0 0d       	add	r27, r0
 bcc:	a1 1d       	adc	r26, r1
 bce:	62 1f       	adc	r22, r18
 bd0:	73 9f       	mul	r23, r19
 bd2:	b0 0d       	add	r27, r0
 bd4:	a1 1d       	adc	r26, r1
 bd6:	62 1f       	adc	r22, r18
 bd8:	83 9f       	mul	r24, r19
 bda:	a0 0d       	add	r26, r0
 bdc:	61 1d       	adc	r22, r1
 bde:	22 1f       	adc	r18, r18
 be0:	74 9f       	mul	r23, r20
 be2:	33 27       	eor	r19, r19
 be4:	a0 0d       	add	r26, r0
 be6:	61 1d       	adc	r22, r1
 be8:	23 1f       	adc	r18, r19
 bea:	84 9f       	mul	r24, r20
 bec:	60 0d       	add	r22, r0
 bee:	21 1d       	adc	r18, r1
 bf0:	82 2f       	mov	r24, r18
 bf2:	76 2f       	mov	r23, r22
 bf4:	6a 2f       	mov	r22, r26
 bf6:	11 24       	eor	r1, r1
 bf8:	9f 57       	subi	r25, 0x7F	; 127
 bfa:	50 40       	sbci	r21, 0x00	; 0
 bfc:	9a f0       	brmi	.+38     	; 0xc24 <__mulsf3_pse+0x88>
 bfe:	f1 f0       	breq	.+60     	; 0xc3c <__mulsf3_pse+0xa0>
 c00:	88 23       	and	r24, r24
 c02:	4a f0       	brmi	.+18     	; 0xc16 <__mulsf3_pse+0x7a>
 c04:	ee 0f       	add	r30, r30
 c06:	ff 1f       	adc	r31, r31
 c08:	bb 1f       	adc	r27, r27
 c0a:	66 1f       	adc	r22, r22
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 1f       	adc	r24, r24
 c10:	91 50       	subi	r25, 0x01	; 1
 c12:	50 40       	sbci	r21, 0x00	; 0
 c14:	a9 f7       	brne	.-22     	; 0xc00 <__mulsf3_pse+0x64>
 c16:	9e 3f       	cpi	r25, 0xFE	; 254
 c18:	51 05       	cpc	r21, r1
 c1a:	80 f0       	brcs	.+32     	; 0xc3c <__mulsf3_pse+0xa0>
 c1c:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_inf>
 c20:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <__fp_szero>
 c24:	5f 3f       	cpi	r21, 0xFF	; 255
 c26:	e4 f3       	brlt	.-8      	; 0xc20 <__mulsf3_pse+0x84>
 c28:	98 3e       	cpi	r25, 0xE8	; 232
 c2a:	d4 f3       	brlt	.-12     	; 0xc20 <__mulsf3_pse+0x84>
 c2c:	86 95       	lsr	r24
 c2e:	77 95       	ror	r23
 c30:	67 95       	ror	r22
 c32:	b7 95       	ror	r27
 c34:	f7 95       	ror	r31
 c36:	e7 95       	ror	r30
 c38:	9f 5f       	subi	r25, 0xFF	; 255
 c3a:	c1 f7       	brne	.-16     	; 0xc2c <__mulsf3_pse+0x90>
 c3c:	fe 2b       	or	r31, r30
 c3e:	88 0f       	add	r24, r24
 c40:	91 1d       	adc	r25, r1
 c42:	96 95       	lsr	r25
 c44:	87 95       	ror	r24
 c46:	97 f9       	bld	r25, 7
 c48:	08 95       	ret

00000c4a <__fp_inf>:
 c4a:	97 f9       	bld	r25, 7
 c4c:	9f 67       	ori	r25, 0x7F	; 127
 c4e:	80 e8       	ldi	r24, 0x80	; 128
 c50:	70 e0       	ldi	r23, 0x00	; 0
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	08 95       	ret

00000c56 <__fp_nan>:
 c56:	9f ef       	ldi	r25, 0xFF	; 255
 c58:	80 ec       	ldi	r24, 0xC0	; 192
 c5a:	08 95       	ret

00000c5c <__fp_pscA>:
 c5c:	00 24       	eor	r0, r0
 c5e:	0a 94       	dec	r0
 c60:	16 16       	cp	r1, r22
 c62:	17 06       	cpc	r1, r23
 c64:	18 06       	cpc	r1, r24
 c66:	09 06       	cpc	r0, r25
 c68:	08 95       	ret

00000c6a <__fp_pscB>:
 c6a:	00 24       	eor	r0, r0
 c6c:	0a 94       	dec	r0
 c6e:	12 16       	cp	r1, r18
 c70:	13 06       	cpc	r1, r19
 c72:	14 06       	cpc	r1, r20
 c74:	05 06       	cpc	r0, r21
 c76:	08 95       	ret

00000c78 <__fp_round>:
 c78:	09 2e       	mov	r0, r25
 c7a:	03 94       	inc	r0
 c7c:	00 0c       	add	r0, r0
 c7e:	11 f4       	brne	.+4      	; 0xc84 <__fp_round+0xc>
 c80:	88 23       	and	r24, r24
 c82:	52 f0       	brmi	.+20     	; 0xc98 <__fp_round+0x20>
 c84:	bb 0f       	add	r27, r27
 c86:	40 f4       	brcc	.+16     	; 0xc98 <__fp_round+0x20>
 c88:	bf 2b       	or	r27, r31
 c8a:	11 f4       	brne	.+4      	; 0xc90 <__fp_round+0x18>
 c8c:	60 ff       	sbrs	r22, 0
 c8e:	04 c0       	rjmp	.+8      	; 0xc98 <__fp_round+0x20>
 c90:	6f 5f       	subi	r22, 0xFF	; 255
 c92:	7f 4f       	sbci	r23, 0xFF	; 255
 c94:	8f 4f       	sbci	r24, 0xFF	; 255
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	08 95       	ret

00000c9a <_exit>:
 c9a:	f8 94       	cli

00000c9c <__stop_program>:
 c9c:	ff cf       	rjmp	.-2      	; 0xc9c <__stop_program>
