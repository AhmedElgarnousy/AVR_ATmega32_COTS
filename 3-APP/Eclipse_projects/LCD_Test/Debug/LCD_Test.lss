
LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000016e4  00001758  2**0
                  ALLOC, LOAD, DATA
  2 .stab         00001da0  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001016  00000000  00000000  000034f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000450e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004520  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000080  00000000  00000000  00004560  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000057e  00000000  00000000  000045e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004f3  00000000  00000000  00004b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002cd  00000000  00000000  00005051  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  0000531e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 04 0a 	call	0x1408	; 0x1408 <main>
      64:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPortDir>:




void DIO_SetPortDir(uint8 Port , uint8 Dir)
{
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	00 d0       	rcall	.+0      	; 0x72 <DIO_SetPortDir+0x6>
      72:	cd b7       	in	r28, 0x3d	; 61
      74:	de b7       	in	r29, 0x3e	; 62
      76:	89 83       	std	Y+1, r24	; 0x01
      78:	6a 83       	std	Y+2, r22	; 0x02

	switch(Port)
      7a:	89 81       	ldd	r24, Y+1	; 0x01
      7c:	88 2f       	mov	r24, r24
      7e:	90 e0       	ldi	r25, 0x00	; 0
      80:	83 30       	cpi	r24, 0x03	; 3
      82:	91 05       	cpc	r25, r1
      84:	01 f1       	breq	.+64     	; 0xc6 <DIO_SetPortDir+0x5a>
      86:	84 30       	cpi	r24, 0x04	; 4
      88:	91 05       	cpc	r25, r1
      8a:	1c f5       	brge	.+70     	; 0xd2 <DIO_SetPortDir+0x66>
      8c:	82 30       	cpi	r24, 0x02	; 2
      8e:	91 05       	cpc	r25, r1
      90:	a1 f0       	breq	.+40     	; 0xba <DIO_SetPortDir+0x4e>
      92:	83 30       	cpi	r24, 0x03	; 3
      94:	91 05       	cpc	r25, r1
      96:	ec f4       	brge	.+58     	; 0xd2 <DIO_SetPortDir+0x66>
      98:	00 97       	sbiw	r24, 0x00	; 0
      9a:	19 f0       	breq	.+6      	; 0xa2 <DIO_SetPortDir+0x36>
      9c:	01 97       	sbiw	r24, 0x01	; 1
      9e:	39 f0       	breq	.+14     	; 0xae <DIO_SetPortDir+0x42>
		DDRD = Dir;

		break;

	default:
		break;
      a0:	18 c0       	rjmp	.+48     	; 0xd2 <DIO_SetPortDir+0x66>
{

	switch(Port)
	{
	case  DIO_PORTA :
		DDRA = Dir;
      a2:	8a e3       	ldi	r24, 0x3A	; 58
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	2a 81       	ldd	r18, Y+2	; 0x02
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18

		break;
      ac:	13 c0       	rjmp	.+38     	; 0xd4 <DIO_SetPortDir+0x68>

	case  DIO_PORTB :
		DDRB = Dir;
      ae:	87 e3       	ldi	r24, 0x37	; 55
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2a 81       	ldd	r18, Y+2	; 0x02
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18

		break;
      b8:	0d c0       	rjmp	.+26     	; 0xd4 <DIO_SetPortDir+0x68>

	case  DIO_PORTC :
		DDRC = Dir;
      ba:	84 e3       	ldi	r24, 0x34	; 52
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	2a 81       	ldd	r18, Y+2	; 0x02
      c0:	fc 01       	movw	r30, r24
      c2:	20 83       	st	Z, r18

		break;
      c4:	07 c0       	rjmp	.+14     	; 0xd4 <DIO_SetPortDir+0x68>

	case  DIO_PORTD :
		DDRD = Dir;
      c6:	81 e3       	ldi	r24, 0x31	; 49
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	2a 81       	ldd	r18, Y+2	; 0x02
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18

		break;
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <DIO_SetPortDir+0x68>

	default:
		break;
      d2:	00 00       	nop
	}

}
      d4:	00 00       	nop
      d6:	0f 90       	pop	r0
      d8:	0f 90       	pop	r0
      da:	df 91       	pop	r29
      dc:	cf 91       	pop	r28
      de:	08 95       	ret

000000e0 <DIO_SetPinDir>:


void DIO_SetPinDir(uint8 Port , uint8 Pin , uint8 Dir)
{
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	00 d0       	rcall	.+0      	; 0xe6 <DIO_SetPinDir+0x6>
      e6:	0f 92       	push	r0
      e8:	cd b7       	in	r28, 0x3d	; 61
      ea:	de b7       	in	r29, 0x3e	; 62
      ec:	89 83       	std	Y+1, r24	; 0x01
      ee:	6a 83       	std	Y+2, r22	; 0x02
      f0:	4b 83       	std	Y+3, r20	; 0x03
	switch(Dir)
      f2:	8b 81       	ldd	r24, Y+3	; 0x03
      f4:	88 2f       	mov	r24, r24
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	00 97       	sbiw	r24, 0x00	; 0
      fa:	09 f4       	brne	.+2      	; 0xfe <DIO_SetPinDir+0x1e>
      fc:	74 c0       	rjmp	.+232    	; 0x1e6 <DIO_SetPinDir+0x106>
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	09 f0       	breq	.+2      	; 0x104 <DIO_SetPinDir+0x24>
     102:	e6 c0       	rjmp	.+460    	; 0x2d0 <DIO_SetPinDir+0x1f0>
	{
	case DIO_PIN_OUTPUT :

		switch(Port)
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	88 2f       	mov	r24, r24
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	83 30       	cpi	r24, 0x03	; 3
     10c:	91 05       	cpc	r25, r1
     10e:	09 f4       	brne	.+2      	; 0x112 <DIO_SetPinDir+0x32>
     110:	52 c0       	rjmp	.+164    	; 0x1b6 <DIO_SetPinDir+0xd6>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	91 05       	cpc	r25, r1
     116:	0c f0       	brlt	.+2      	; 0x11a <DIO_SetPinDir+0x3a>
     118:	64 c0       	rjmp	.+200    	; 0x1e2 <DIO_SetPinDir+0x102>
     11a:	82 30       	cpi	r24, 0x02	; 2
     11c:	91 05       	cpc	r25, r1
     11e:	a9 f1       	breq	.+106    	; 0x18a <DIO_SetPinDir+0xaa>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	91 05       	cpc	r25, r1
     124:	0c f0       	brlt	.+2      	; 0x128 <DIO_SetPinDir+0x48>
     126:	5d c0       	rjmp	.+186    	; 0x1e2 <DIO_SetPinDir+0x102>
     128:	00 97       	sbiw	r24, 0x00	; 0
     12a:	19 f0       	breq	.+6      	; 0x132 <DIO_SetPinDir+0x52>
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	b9 f0       	breq	.+46     	; 0x15e <DIO_SetPinDir+0x7e>
		case DIO_PORTD :
			SET_BIT(DDRD,Pin);
			break;

		default:
			break;
     130:	58 c0       	rjmp	.+176    	; 0x1e2 <DIO_SetPinDir+0x102>
	case DIO_PIN_OUTPUT :

		switch(Port)
		{
		case DIO_PORTA :
			SET_BIT(DDRA,Pin);
     132:	8a e3       	ldi	r24, 0x3A	; 58
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	80 81       	ld	r24, Z
     13a:	48 2f       	mov	r20, r24
     13c:	8a 81       	ldd	r24, Y+2	; 0x02
     13e:	28 2f       	mov	r18, r24
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_SetPinDir+0x6c>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	2a 95       	dec	r18
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_SetPinDir+0x68>
     150:	24 2f       	mov	r18, r20
     152:	28 2b       	or	r18, r24
     154:	8a e3       	ldi	r24, 0x3A	; 58
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	fc 01       	movw	r30, r24
     15a:	20 83       	st	Z, r18
			break;
     15c:	43 c0       	rjmp	.+134    	; 0x1e4 <DIO_SetPinDir+0x104>

		case DIO_PORTB :
			SET_BIT(DDRB,Pin);
     15e:	87 e3       	ldi	r24, 0x37	; 55
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	fc 01       	movw	r30, r24
     164:	80 81       	ld	r24, Z
     166:	48 2f       	mov	r20, r24
     168:	8a 81       	ldd	r24, Y+2	; 0x02
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPinDir+0x98>
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	2a 95       	dec	r18
     17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPinDir+0x94>
     17c:	24 2f       	mov	r18, r20
     17e:	28 2b       	or	r18, r24
     180:	87 e3       	ldi	r24, 0x37	; 55
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
			break;
     188:	2d c0       	rjmp	.+90     	; 0x1e4 <DIO_SetPinDir+0x104>

		case DIO_PORTC :
			SET_BIT(DDRC,Pin);
     18a:	84 e3       	ldi	r24, 0x34	; 52
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	fc 01       	movw	r30, r24
     190:	80 81       	ld	r24, Z
     192:	48 2f       	mov	r20, r24
     194:	8a 81       	ldd	r24, Y+2	; 0x02
     196:	28 2f       	mov	r18, r24
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_SetPinDir+0xc4>
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	2a 95       	dec	r18
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_SetPinDir+0xc0>
     1a8:	24 2f       	mov	r18, r20
     1aa:	28 2b       	or	r18, r24
     1ac:	84 e3       	ldi	r24, 0x34	; 52
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
			break;
     1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <DIO_SetPinDir+0x104>

		case DIO_PORTD :
			SET_BIT(DDRD,Pin);
     1b6:	81 e3       	ldi	r24, 0x31	; 49
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	fc 01       	movw	r30, r24
     1bc:	80 81       	ld	r24, Z
     1be:	48 2f       	mov	r20, r24
     1c0:	8a 81       	ldd	r24, Y+2	; 0x02
     1c2:	28 2f       	mov	r18, r24
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_SetPinDir+0xf0>
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	2a 95       	dec	r18
     1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_SetPinDir+0xec>
     1d4:	24 2f       	mov	r18, r20
     1d6:	28 2b       	or	r18, r24
     1d8:	81 e3       	ldi	r24, 0x31	; 49
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
			break;
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <DIO_SetPinDir+0x104>

		default:
			break;
     1e2:	00 00       	nop

		}

		break;
     1e4:	76 c0       	rjmp	.+236    	; 0x2d2 <DIO_SetPinDir+0x1f2>

		case DIO_PIN_INPUT :

			switch(Port)
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	83 30       	cpi	r24, 0x03	; 3
     1ee:	91 05       	cpc	r25, r1
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <DIO_SetPinDir+0x114>
     1f2:	55 c0       	rjmp	.+170    	; 0x29e <DIO_SetPinDir+0x1be>
     1f4:	84 30       	cpi	r24, 0x04	; 4
     1f6:	91 05       	cpc	r25, r1
     1f8:	0c f0       	brlt	.+2      	; 0x1fc <DIO_SetPinDir+0x11c>
     1fa:	68 c0       	rjmp	.+208    	; 0x2cc <DIO_SetPinDir+0x1ec>
     1fc:	82 30       	cpi	r24, 0x02	; 2
     1fe:	91 05       	cpc	r25, r1
     200:	b9 f1       	breq	.+110    	; 0x270 <DIO_SetPinDir+0x190>
     202:	83 30       	cpi	r24, 0x03	; 3
     204:	91 05       	cpc	r25, r1
     206:	0c f0       	brlt	.+2      	; 0x20a <DIO_SetPinDir+0x12a>
     208:	61 c0       	rjmp	.+194    	; 0x2cc <DIO_SetPinDir+0x1ec>
     20a:	00 97       	sbiw	r24, 0x00	; 0
     20c:	19 f0       	breq	.+6      	; 0x214 <DIO_SetPinDir+0x134>
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	c1 f0       	breq	.+48     	; 0x242 <DIO_SetPinDir+0x162>
			case DIO_PORTD :
				CLR_BIT(DDRD,Pin);
				break;

			default:
				break;
     212:	5c c0       	rjmp	.+184    	; 0x2cc <DIO_SetPinDir+0x1ec>
		case DIO_PIN_INPUT :

			switch(Port)
			{
			case DIO_PORTA :
				CLR_BIT(DDRA,Pin);
     214:	8a e3       	ldi	r24, 0x3A	; 58
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	80 81       	ld	r24, Z
     21c:	48 2f       	mov	r20, r24
     21e:	8a 81       	ldd	r24, Y+2	; 0x02
     220:	28 2f       	mov	r18, r24
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_SetPinDir+0x14e>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	2a 95       	dec	r18
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_SetPinDir+0x14a>
     232:	80 95       	com	r24
     234:	24 2f       	mov	r18, r20
     236:	28 23       	and	r18, r24
     238:	8a e3       	ldi	r24, 0x3A	; 58
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
				break;
     240:	46 c0       	rjmp	.+140    	; 0x2ce <DIO_SetPinDir+0x1ee>

			case DIO_PORTB :
				CLR_BIT(DDRB,Pin);
     242:	87 e3       	ldi	r24, 0x37	; 55
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	fc 01       	movw	r30, r24
     248:	80 81       	ld	r24, Z
     24a:	48 2f       	mov	r20, r24
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	28 2f       	mov	r18, r24
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinDir+0x17c>
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	2a 95       	dec	r18
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinDir+0x178>
     260:	80 95       	com	r24
     262:	24 2f       	mov	r18, r20
     264:	28 23       	and	r18, r24
     266:	87 e3       	ldi	r24, 0x37	; 55
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
				break;
     26e:	2f c0       	rjmp	.+94     	; 0x2ce <DIO_SetPinDir+0x1ee>

			case DIO_PORTC :
				CLR_BIT(DDRC,Pin);
     270:	84 e3       	ldi	r24, 0x34	; 52
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	fc 01       	movw	r30, r24
     276:	80 81       	ld	r24, Z
     278:	48 2f       	mov	r20, r24
     27a:	8a 81       	ldd	r24, Y+2	; 0x02
     27c:	28 2f       	mov	r18, r24
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_SetPinDir+0x1aa>
     286:	88 0f       	add	r24, r24
     288:	99 1f       	adc	r25, r25
     28a:	2a 95       	dec	r18
     28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_SetPinDir+0x1a6>
     28e:	80 95       	com	r24
     290:	24 2f       	mov	r18, r20
     292:	28 23       	and	r18, r24
     294:	84 e3       	ldi	r24, 0x34	; 52
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
				break;
     29c:	18 c0       	rjmp	.+48     	; 0x2ce <DIO_SetPinDir+0x1ee>

			case DIO_PORTD :
				CLR_BIT(DDRD,Pin);
     29e:	81 e3       	ldi	r24, 0x31	; 49
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	fc 01       	movw	r30, r24
     2a4:	80 81       	ld	r24, Z
     2a6:	48 2f       	mov	r20, r24
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	28 2f       	mov	r18, r24
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_SetPinDir+0x1d8>
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	2a 95       	dec	r18
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_SetPinDir+0x1d4>
     2bc:	80 95       	com	r24
     2be:	24 2f       	mov	r18, r20
     2c0:	28 23       	and	r18, r24
     2c2:	81 e3       	ldi	r24, 0x31	; 49
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
				break;
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <DIO_SetPinDir+0x1ee>

			default:
				break;
     2cc:	00 00       	nop

			}

			break;
     2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <DIO_SetPinDir+0x1f2>

			default:
				break;
     2d0:	00 00       	nop

	}
}
     2d2:	00 00       	nop
     2d4:	0f 90       	pop	r0
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <DIO_SetPortVal>:



void DIO_SetPortVal(uint8 Port , uint8 Val)
{
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <DIO_SetPortVal+0x6>
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	89 83       	std	Y+1, r24	; 0x01
     2ec:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	88 2f       	mov	r24, r24
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	83 30       	cpi	r24, 0x03	; 3
     2f6:	91 05       	cpc	r25, r1
     2f8:	01 f1       	breq	.+64     	; 0x33a <DIO_SetPortVal+0x5a>
     2fa:	84 30       	cpi	r24, 0x04	; 4
     2fc:	91 05       	cpc	r25, r1
     2fe:	1c f5       	brge	.+70     	; 0x346 <DIO_SetPortVal+0x66>
     300:	82 30       	cpi	r24, 0x02	; 2
     302:	91 05       	cpc	r25, r1
     304:	a1 f0       	breq	.+40     	; 0x32e <DIO_SetPortVal+0x4e>
     306:	83 30       	cpi	r24, 0x03	; 3
     308:	91 05       	cpc	r25, r1
     30a:	ec f4       	brge	.+58     	; 0x346 <DIO_SetPortVal+0x66>
     30c:	00 97       	sbiw	r24, 0x00	; 0
     30e:	19 f0       	breq	.+6      	; 0x316 <DIO_SetPortVal+0x36>
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	39 f0       	breq	.+14     	; 0x322 <DIO_SetPortVal+0x42>
		PORTD = Val;

		break;

	default:
		break;
     314:	18 c0       	rjmp	.+48     	; 0x346 <DIO_SetPortVal+0x66>
void DIO_SetPortVal(uint8 Port , uint8 Val)
{
	switch(Port)
	{
	case  DIO_PORTA :
		PORTA = Val;
     316:	8b e3       	ldi	r24, 0x3B	; 59
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	2a 81       	ldd	r18, Y+2	; 0x02
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18

		break;
     320:	13 c0       	rjmp	.+38     	; 0x348 <DIO_SetPortVal+0x68>

	case  DIO_PORTB :
		PORTB = Val;
     322:	88 e3       	ldi	r24, 0x38	; 56
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	2a 81       	ldd	r18, Y+2	; 0x02
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18

		break;
     32c:	0d c0       	rjmp	.+26     	; 0x348 <DIO_SetPortVal+0x68>

	case  DIO_PORTC :
		PORTC = Val;
     32e:	85 e3       	ldi	r24, 0x35	; 53
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	2a 81       	ldd	r18, Y+2	; 0x02
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18

		break;
     338:	07 c0       	rjmp	.+14     	; 0x348 <DIO_SetPortVal+0x68>

	case  DIO_PORTD :
		PORTD = Val;
     33a:	82 e3       	ldi	r24, 0x32	; 50
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	2a 81       	ldd	r18, Y+2	; 0x02
     340:	fc 01       	movw	r30, r24
     342:	20 83       	st	Z, r18

		break;
     344:	01 c0       	rjmp	.+2      	; 0x348 <DIO_SetPortVal+0x68>

	default:
		break;
     346:	00 00       	nop
	}
}
     348:	00 00       	nop
     34a:	0f 90       	pop	r0
     34c:	0f 90       	pop	r0
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	08 95       	ret

00000354 <DIO_SetPinVal>:


void DIO_SetPinVal(uint8 Port , uint8 Pin , uint8 Val)
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	00 d0       	rcall	.+0      	; 0x35a <DIO_SetPinVal+0x6>
     35a:	0f 92       	push	r0
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	89 83       	std	Y+1, r24	; 0x01
     362:	6a 83       	std	Y+2, r22	; 0x02
     364:	4b 83       	std	Y+3, r20	; 0x03
	switch(Val)
     366:	8b 81       	ldd	r24, Y+3	; 0x03
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	00 97       	sbiw	r24, 0x00	; 0
     36e:	09 f4       	brne	.+2      	; 0x372 <DIO_SetPinVal+0x1e>
     370:	74 c0       	rjmp	.+232    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	09 f0       	breq	.+2      	; 0x378 <DIO_SetPinVal+0x24>
     376:	e6 c0       	rjmp	.+460    	; 0x544 <__FUSE_REGION_LENGTH__+0x144>
	{
	case DIO_PIN_HIGH :

		switch(Port)
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	88 2f       	mov	r24, r24
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	83 30       	cpi	r24, 0x03	; 3
     380:	91 05       	cpc	r25, r1
     382:	09 f4       	brne	.+2      	; 0x386 <DIO_SetPinVal+0x32>
     384:	52 c0       	rjmp	.+164    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
     386:	84 30       	cpi	r24, 0x04	; 4
     388:	91 05       	cpc	r25, r1
     38a:	0c f0       	brlt	.+2      	; 0x38e <DIO_SetPinVal+0x3a>
     38c:	64 c0       	rjmp	.+200    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	91 05       	cpc	r25, r1
     392:	a9 f1       	breq	.+106    	; 0x3fe <DIO_SetPinVal+0xaa>
     394:	83 30       	cpi	r24, 0x03	; 3
     396:	91 05       	cpc	r25, r1
     398:	0c f0       	brlt	.+2      	; 0x39c <DIO_SetPinVal+0x48>
     39a:	5d c0       	rjmp	.+186    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	19 f0       	breq	.+6      	; 0x3a6 <DIO_SetPinVal+0x52>
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	b9 f0       	breq	.+46     	; 0x3d2 <DIO_SetPinVal+0x7e>
		case DIO_PORTD :
			SET_BIT(PORTD,Pin);
			break;

		default:
			break;
     3a4:	58 c0       	rjmp	.+176    	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
	case DIO_PIN_HIGH :

		switch(Port)
		{
		case DIO_PORTA :
			SET_BIT(PORTA,Pin);
     3a6:	8b e3       	ldi	r24, 0x3B	; 59
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	fc 01       	movw	r30, r24
     3ac:	80 81       	ld	r24, Z
     3ae:	48 2f       	mov	r20, r24
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
     3b2:	28 2f       	mov	r18, r24
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_SetPinVal+0x6c>
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	2a 95       	dec	r18
     3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_SetPinVal+0x68>
     3c4:	24 2f       	mov	r18, r20
     3c6:	28 2b       	or	r18, r24
     3c8:	8b e3       	ldi	r24, 0x3B	; 59
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
			break;
     3d0:	43 c0       	rjmp	.+134    	; 0x458 <__FUSE_REGION_LENGTH__+0x58>

		case DIO_PORTB :
			SET_BIT(PORTB,Pin);
     3d2:	88 e3       	ldi	r24, 0x38	; 56
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	fc 01       	movw	r30, r24
     3d8:	80 81       	ld	r24, Z
     3da:	48 2f       	mov	r20, r24
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_SetPinVal+0x98>
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	2a 95       	dec	r18
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_SetPinVal+0x94>
     3f0:	24 2f       	mov	r18, r20
     3f2:	28 2b       	or	r18, r24
     3f4:	88 e3       	ldi	r24, 0x38	; 56
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
			break;
     3fc:	2d c0       	rjmp	.+90     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>

		case DIO_PORTC :
			SET_BIT(PORTC,Pin);
     3fe:	85 e3       	ldi	r24, 0x35	; 53
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	fc 01       	movw	r30, r24
     404:	80 81       	ld	r24, Z
     406:	48 2f       	mov	r20, r24
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	28 2f       	mov	r18, r24
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	02 c0       	rjmp	.+4      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	2a 95       	dec	r18
     41a:	e2 f7       	brpl	.-8      	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     41c:	24 2f       	mov	r18, r20
     41e:	28 2b       	or	r18, r24
     420:	85 e3       	ldi	r24, 0x35	; 53
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	20 83       	st	Z, r18
			break;
     428:	17 c0       	rjmp	.+46     	; 0x458 <__FUSE_REGION_LENGTH__+0x58>

		case DIO_PORTD :
			SET_BIT(PORTD,Pin);
     42a:	82 e3       	ldi	r24, 0x32	; 50
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	fc 01       	movw	r30, r24
     430:	80 81       	ld	r24, Z
     432:	48 2f       	mov	r20, r24
     434:	8a 81       	ldd	r24, Y+2	; 0x02
     436:	28 2f       	mov	r18, r24
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	2a 95       	dec	r18
     446:	e2 f7       	brpl	.-8      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     448:	24 2f       	mov	r18, r20
     44a:	28 2b       	or	r18, r24
     44c:	82 e3       	ldi	r24, 0x32	; 50
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
			break;
     454:	01 c0       	rjmp	.+2      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>

		default:
			break;
     456:	00 00       	nop

		}

		break;
     458:	76 c0       	rjmp	.+236    	; 0x546 <__FUSE_REGION_LENGTH__+0x146>

		case DIO_PIN_LOW :

			switch(Port)
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	88 2f       	mov	r24, r24
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	91 05       	cpc	r25, r1
     464:	09 f4       	brne	.+2      	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
     466:	55 c0       	rjmp	.+170    	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	91 05       	cpc	r25, r1
     46c:	0c f0       	brlt	.+2      	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
     46e:	68 c0       	rjmp	.+208    	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	91 05       	cpc	r25, r1
     474:	b9 f1       	breq	.+110    	; 0x4e4 <__FUSE_REGION_LENGTH__+0xe4>
     476:	83 30       	cpi	r24, 0x03	; 3
     478:	91 05       	cpc	r25, r1
     47a:	0c f0       	brlt	.+2      	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
     47c:	61 c0       	rjmp	.+194    	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	19 f0       	breq	.+6      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	c1 f0       	breq	.+48     	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
			case DIO_PORTD :
				CLR_BIT(PORTD,Pin);
				break;

			default:
				break;
     486:	5c c0       	rjmp	.+184    	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
		case DIO_PIN_LOW :

			switch(Port)
			{
			case DIO_PORTA :
				CLR_BIT(PORTA,Pin);
     488:	8b e3       	ldi	r24, 0x3B	; 59
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	fc 01       	movw	r30, r24
     48e:	80 81       	ld	r24, Z
     490:	48 2f       	mov	r20, r24
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	28 2f       	mov	r18, r24
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__FUSE_REGION_LENGTH__+0xa2>
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	2a 95       	dec	r18
     4a4:	e2 f7       	brpl	.-8      	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
     4a6:	80 95       	com	r24
     4a8:	24 2f       	mov	r18, r20
     4aa:	28 23       	and	r18, r24
     4ac:	8b e3       	ldi	r24, 0x3B	; 59
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
				break;
     4b4:	46 c0       	rjmp	.+140    	; 0x542 <__FUSE_REGION_LENGTH__+0x142>

			case DIO_PORTB :
				CLR_BIT(PORTB,Pin);
     4b6:	88 e3       	ldi	r24, 0x38	; 56
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	fc 01       	movw	r30, r24
     4bc:	80 81       	ld	r24, Z
     4be:	48 2f       	mov	r20, r24
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	28 2f       	mov	r18, r24
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	2a 95       	dec	r18
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__FUSE_REGION_LENGTH__+0xcc>
     4d4:	80 95       	com	r24
     4d6:	24 2f       	mov	r18, r20
     4d8:	28 23       	and	r18, r24
     4da:	88 e3       	ldi	r24, 0x38	; 56
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
				break;
     4e2:	2f c0       	rjmp	.+94     	; 0x542 <__FUSE_REGION_LENGTH__+0x142>

			case DIO_PORTC :
				CLR_BIT(PORTC,Pin);
     4e4:	85 e3       	ldi	r24, 0x35	; 53
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	fc 01       	movw	r30, r24
     4ea:	80 81       	ld	r24, Z
     4ec:	48 2f       	mov	r20, r24
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	28 2f       	mov	r18, r24
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__FUSE_REGION_LENGTH__+0xfe>
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	2a 95       	dec	r18
     500:	e2 f7       	brpl	.-8      	; 0x4fa <__FUSE_REGION_LENGTH__+0xfa>
     502:	80 95       	com	r24
     504:	24 2f       	mov	r18, r20
     506:	28 23       	and	r18, r24
     508:	85 e3       	ldi	r24, 0x35	; 53
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
				break;
     510:	18 c0       	rjmp	.+48     	; 0x542 <__FUSE_REGION_LENGTH__+0x142>

			case DIO_PORTD :
				CLR_BIT(PORTD,Pin);
     512:	82 e3       	ldi	r24, 0x32	; 50
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
     51a:	48 2f       	mov	r20, r24
     51c:	8a 81       	ldd	r24, Y+2	; 0x02
     51e:	28 2f       	mov	r18, r24
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	02 c0       	rjmp	.+4      	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
     528:	88 0f       	add	r24, r24
     52a:	99 1f       	adc	r25, r25
     52c:	2a 95       	dec	r18
     52e:	e2 f7       	brpl	.-8      	; 0x528 <__FUSE_REGION_LENGTH__+0x128>
     530:	80 95       	com	r24
     532:	24 2f       	mov	r18, r20
     534:	28 23       	and	r18, r24
     536:	82 e3       	ldi	r24, 0x32	; 50
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	fc 01       	movw	r30, r24
     53c:	20 83       	st	Z, r18
				break;
     53e:	01 c0       	rjmp	.+2      	; 0x542 <__FUSE_REGION_LENGTH__+0x142>

			default:
				break;
     540:	00 00       	nop

			}

			break;
     542:	01 c0       	rjmp	.+2      	; 0x546 <__FUSE_REGION_LENGTH__+0x146>

			default:
				break;
     544:	00 00       	nop

	}
}
     546:	00 00       	nop
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <DIO_ReadPort>:




void DIO_ReadPort(uint8 Port , uint8* Val)
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	00 d0       	rcall	.+0      	; 0x55a <DIO_ReadPort+0x6>
     55a:	0f 92       	push	r0
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	89 83       	std	Y+1, r24	; 0x01
     562:	7b 83       	std	Y+3, r23	; 0x03
     564:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	88 2f       	mov	r24, r24
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	83 30       	cpi	r24, 0x03	; 3
     56e:	91 05       	cpc	r25, r1
     570:	49 f1       	breq	.+82     	; 0x5c4 <DIO_ReadPort+0x70>
     572:	84 30       	cpi	r24, 0x04	; 4
     574:	91 05       	cpc	r25, r1
     576:	7c f5       	brge	.+94     	; 0x5d6 <DIO_ReadPort+0x82>
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	91 05       	cpc	r25, r1
     57c:	d1 f0       	breq	.+52     	; 0x5b2 <DIO_ReadPort+0x5e>
     57e:	83 30       	cpi	r24, 0x03	; 3
     580:	91 05       	cpc	r25, r1
     582:	4c f5       	brge	.+82     	; 0x5d6 <DIO_ReadPort+0x82>
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	19 f0       	breq	.+6      	; 0x58e <DIO_ReadPort+0x3a>
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	51 f0       	breq	.+20     	; 0x5a0 <DIO_ReadPort+0x4c>
		*Val = PIND;

		break;

	default:
		break;
     58c:	24 c0       	rjmp	.+72     	; 0x5d6 <DIO_ReadPort+0x82>
void DIO_ReadPort(uint8 Port , uint8* Val)
{
	switch(Port)
	{
	case  DIO_PORTA :
		*Val = PINA;
     58e:	89 e3       	ldi	r24, 0x39	; 57
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	fc 01       	movw	r30, r24
     594:	20 81       	ld	r18, Z
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	9b 81       	ldd	r25, Y+3	; 0x03
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18

		break;
     59e:	1c c0       	rjmp	.+56     	; 0x5d8 <DIO_ReadPort+0x84>

	case  DIO_PORTB :
		*Val = PINB;
     5a0:	86 e3       	ldi	r24, 0x36	; 54
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 81       	ld	r18, Z
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	9b 81       	ldd	r25, Y+3	; 0x03
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 83       	st	Z, r18

		break;
     5b0:	13 c0       	rjmp	.+38     	; 0x5d8 <DIO_ReadPort+0x84>

	case  DIO_PORTC :
		*Val = PINC;
     5b2:	83 e3       	ldi	r24, 0x33	; 51
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 81       	ld	r18, Z
     5ba:	8a 81       	ldd	r24, Y+2	; 0x02
     5bc:	9b 81       	ldd	r25, Y+3	; 0x03
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18

		break;
     5c2:	0a c0       	rjmp	.+20     	; 0x5d8 <DIO_ReadPort+0x84>

	case  DIO_PORTD :
		*Val = PIND;
     5c4:	80 e3       	ldi	r24, 0x30	; 48
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 81       	ld	r18, Z
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	9b 81       	ldd	r25, Y+3	; 0x03
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18

		break;
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <DIO_ReadPort+0x84>

	default:
		break;
     5d6:	00 00       	nop
	}
}
     5d8:	00 00       	nop
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <DIO_ReadPin>:


void DIO_ReadPin(uint8 Port , uint8 Pin , uint8* Val)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <DIO_ReadPin+0x6>
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <DIO_ReadPin+0x8>
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	89 83       	std	Y+1, r24	; 0x01
     5f4:	6a 83       	std	Y+2, r22	; 0x02
     5f6:	5c 83       	std	Y+4, r21	; 0x04
     5f8:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	88 2f       	mov	r24, r24
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	83 30       	cpi	r24, 0x03	; 3
     602:	91 05       	cpc	r25, r1
     604:	09 f4       	brne	.+2      	; 0x608 <DIO_ReadPin+0x22>
     606:	4f c0       	rjmp	.+158    	; 0x6a6 <DIO_ReadPin+0xc0>
     608:	84 30       	cpi	r24, 0x04	; 4
     60a:	91 05       	cpc	r25, r1
     60c:	0c f0       	brlt	.+2      	; 0x610 <DIO_ReadPin+0x2a>
     60e:	60 c0       	rjmp	.+192    	; 0x6d0 <DIO_ReadPin+0xea>
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	91 05       	cpc	r25, r1
     614:	99 f1       	breq	.+102    	; 0x67c <DIO_ReadPin+0x96>
     616:	83 30       	cpi	r24, 0x03	; 3
     618:	91 05       	cpc	r25, r1
     61a:	0c f0       	brlt	.+2      	; 0x61e <DIO_ReadPin+0x38>
     61c:	59 c0       	rjmp	.+178    	; 0x6d0 <DIO_ReadPin+0xea>
     61e:	00 97       	sbiw	r24, 0x00	; 0
     620:	19 f0       	breq	.+6      	; 0x628 <DIO_ReadPin+0x42>
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	b1 f0       	breq	.+44     	; 0x652 <DIO_ReadPin+0x6c>
		*Val = GET_BIT(PIND,Pin);

		break;

	default:
		break;
     626:	54 c0       	rjmp	.+168    	; 0x6d0 <DIO_ReadPin+0xea>
void DIO_ReadPin(uint8 Port , uint8 Pin , uint8* Val)
{
	switch(Port)
	{
	case  DIO_PORTA :
		*Val = GET_BIT(PINA,Pin);
     628:	89 e3       	ldi	r24, 0x39	; 57
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	fc 01       	movw	r30, r24
     62e:	80 81       	ld	r24, Z
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	2a 81       	ldd	r18, Y+2	; 0x02
     636:	22 2f       	mov	r18, r18
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_ReadPin+0x5a>
     63c:	95 95       	asr	r25
     63e:	87 95       	ror	r24
     640:	2a 95       	dec	r18
     642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_ReadPin+0x56>
     644:	28 2f       	mov	r18, r24
     646:	21 70       	andi	r18, 0x01	; 1
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	9c 81       	ldd	r25, Y+4	; 0x04
     64c:	fc 01       	movw	r30, r24
     64e:	20 83       	st	Z, r18

		break;
     650:	40 c0       	rjmp	.+128    	; 0x6d2 <DIO_ReadPin+0xec>

	case  DIO_PORTB :
		*Val = GET_BIT(PINB,Pin);
     652:	86 e3       	ldi	r24, 0x36	; 54
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	fc 01       	movw	r30, r24
     658:	80 81       	ld	r24, Z
     65a:	88 2f       	mov	r24, r24
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	2a 81       	ldd	r18, Y+2	; 0x02
     660:	22 2f       	mov	r18, r18
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_ReadPin+0x84>
     666:	95 95       	asr	r25
     668:	87 95       	ror	r24
     66a:	2a 95       	dec	r18
     66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_ReadPin+0x80>
     66e:	28 2f       	mov	r18, r24
     670:	21 70       	andi	r18, 0x01	; 1
     672:	8b 81       	ldd	r24, Y+3	; 0x03
     674:	9c 81       	ldd	r25, Y+4	; 0x04
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18

		break;
     67a:	2b c0       	rjmp	.+86     	; 0x6d2 <DIO_ReadPin+0xec>

	case  DIO_PORTC :
		*Val = GET_BIT(PINC,Pin);
     67c:	83 e3       	ldi	r24, 0x33	; 51
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	88 2f       	mov	r24, r24
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	2a 81       	ldd	r18, Y+2	; 0x02
     68a:	22 2f       	mov	r18, r18
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_ReadPin+0xae>
     690:	95 95       	asr	r25
     692:	87 95       	ror	r24
     694:	2a 95       	dec	r18
     696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_ReadPin+0xaa>
     698:	28 2f       	mov	r18, r24
     69a:	21 70       	andi	r18, 0x01	; 1
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18

		break;
     6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <DIO_ReadPin+0xec>

	case  DIO_PORTD :
		*Val = GET_BIT(PIND,Pin);
     6a6:	80 e3       	ldi	r24, 0x30	; 48
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
     6ae:	88 2f       	mov	r24, r24
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	2a 81       	ldd	r18, Y+2	; 0x02
     6b4:	22 2f       	mov	r18, r18
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_ReadPin+0xd8>
     6ba:	95 95       	asr	r25
     6bc:	87 95       	ror	r24
     6be:	2a 95       	dec	r18
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_ReadPin+0xd4>
     6c2:	28 2f       	mov	r18, r24
     6c4:	21 70       	andi	r18, 0x01	; 1
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	fc 01       	movw	r30, r24
     6cc:	20 83       	st	Z, r18

		break;
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <DIO_ReadPin+0xec>

	default:
		break;
     6d0:	00 00       	nop
	}
}
     6d2:	00 00       	nop
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <DIO_PullUp_PIN>:

void DIO_PullUp_PIN(uint8 Port , uint8 Pin)
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <DIO_PullUp_PIN+0x6>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	83 30       	cpi	r24, 0x03	; 3
     6f8:	91 05       	cpc	r25, r1
     6fa:	09 f4       	brne	.+2      	; 0x6fe <DIO_PullUp_PIN+0x1c>
     6fc:	52 c0       	rjmp	.+164    	; 0x7a2 <DIO_PullUp_PIN+0xc0>
     6fe:	84 30       	cpi	r24, 0x04	; 4
     700:	91 05       	cpc	r25, r1
     702:	0c f0       	brlt	.+2      	; 0x706 <DIO_PullUp_PIN+0x24>
     704:	64 c0       	rjmp	.+200    	; 0x7ce <DIO_PullUp_PIN+0xec>
     706:	82 30       	cpi	r24, 0x02	; 2
     708:	91 05       	cpc	r25, r1
     70a:	a9 f1       	breq	.+106    	; 0x776 <DIO_PullUp_PIN+0x94>
     70c:	83 30       	cpi	r24, 0x03	; 3
     70e:	91 05       	cpc	r25, r1
     710:	0c f0       	brlt	.+2      	; 0x714 <DIO_PullUp_PIN+0x32>
     712:	5d c0       	rjmp	.+186    	; 0x7ce <DIO_PullUp_PIN+0xec>
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	19 f0       	breq	.+6      	; 0x71e <DIO_PullUp_PIN+0x3c>
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	b9 f0       	breq	.+46     	; 0x74a <DIO_PullUp_PIN+0x68>
	case DIO_PORTD :
		SET_BIT(PORTD,Pin);
		break;

	default:
		break;
     71c:	58 c0       	rjmp	.+176    	; 0x7ce <DIO_PullUp_PIN+0xec>
void DIO_PullUp_PIN(uint8 Port , uint8 Pin)
{
	switch(Port)
	{
	case DIO_PORTA :
		SET_BIT(PORTA,Pin);
     71e:	8b e3       	ldi	r24, 0x3B	; 59
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	48 2f       	mov	r20, r24
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	28 2f       	mov	r18, r24
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_PullUp_PIN+0x56>
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	2a 95       	dec	r18
     73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_PullUp_PIN+0x52>
     73c:	24 2f       	mov	r18, r20
     73e:	28 2b       	or	r18, r24
     740:	8b e3       	ldi	r24, 0x3B	; 59
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
		break;
     748:	43 c0       	rjmp	.+134    	; 0x7d0 <DIO_PullUp_PIN+0xee>

	case DIO_PORTB :
		SET_BIT(PORTB,Pin);
     74a:	88 e3       	ldi	r24, 0x38	; 56
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	fc 01       	movw	r30, r24
     750:	80 81       	ld	r24, Z
     752:	48 2f       	mov	r20, r24
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	28 2f       	mov	r18, r24
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_PullUp_PIN+0x82>
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	2a 95       	dec	r18
     766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_PullUp_PIN+0x7e>
     768:	24 2f       	mov	r18, r20
     76a:	28 2b       	or	r18, r24
     76c:	88 e3       	ldi	r24, 0x38	; 56
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
		break;
     774:	2d c0       	rjmp	.+90     	; 0x7d0 <DIO_PullUp_PIN+0xee>

	case DIO_PORTC :
		SET_BIT(PORTC,Pin);
     776:	85 e3       	ldi	r24, 0x35	; 53
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	48 2f       	mov	r20, r24
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	28 2f       	mov	r18, r24
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_PullUp_PIN+0xae>
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	2a 95       	dec	r18
     792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_PullUp_PIN+0xaa>
     794:	24 2f       	mov	r18, r20
     796:	28 2b       	or	r18, r24
     798:	85 e3       	ldi	r24, 0x35	; 53
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
		break;
     7a0:	17 c0       	rjmp	.+46     	; 0x7d0 <DIO_PullUp_PIN+0xee>

	case DIO_PORTD :
		SET_BIT(PORTD,Pin);
     7a2:	82 e3       	ldi	r24, 0x32	; 50
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	fc 01       	movw	r30, r24
     7a8:	80 81       	ld	r24, Z
     7aa:	48 2f       	mov	r20, r24
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	28 2f       	mov	r18, r24
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <DIO_PullUp_PIN+0xda>
     7b8:	88 0f       	add	r24, r24
     7ba:	99 1f       	adc	r25, r25
     7bc:	2a 95       	dec	r18
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <DIO_PullUp_PIN+0xd6>
     7c0:	24 2f       	mov	r18, r20
     7c2:	28 2b       	or	r18, r24
     7c4:	82 e3       	ldi	r24, 0x32	; 50
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
		break;
     7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <DIO_PullUp_PIN+0xee>

	default:
		break;
     7ce:	00 00       	nop

	}
}
     7d0:	00 00       	nop
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <DIO_TogglePin>:


void DIO_TogglePin(uint8 Port , uint8 Pin)
{
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <DIO_TogglePin+0x6>
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	89 83       	std	Y+1, r24	; 0x01
     7e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	83 30       	cpi	r24, 0x03	; 3
     7f2:	91 05       	cpc	r25, r1
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <DIO_TogglePin+0x1c>
     7f6:	52 c0       	rjmp	.+164    	; 0x89c <__stack+0x3d>
     7f8:	84 30       	cpi	r24, 0x04	; 4
     7fa:	91 05       	cpc	r25, r1
     7fc:	0c f0       	brlt	.+2      	; 0x800 <DIO_TogglePin+0x24>
     7fe:	64 c0       	rjmp	.+200    	; 0x8c8 <__stack+0x69>
     800:	82 30       	cpi	r24, 0x02	; 2
     802:	91 05       	cpc	r25, r1
     804:	a9 f1       	breq	.+106    	; 0x870 <__stack+0x11>
     806:	83 30       	cpi	r24, 0x03	; 3
     808:	91 05       	cpc	r25, r1
     80a:	0c f0       	brlt	.+2      	; 0x80e <DIO_TogglePin+0x32>
     80c:	5d c0       	rjmp	.+186    	; 0x8c8 <__stack+0x69>
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	19 f0       	breq	.+6      	; 0x818 <DIO_TogglePin+0x3c>
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	b9 f0       	breq	.+46     	; 0x844 <DIO_TogglePin+0x68>
	case DIO_PORTD :
		TOG_BIT(PORTD,Pin);
		break;

	default:
		break;
     816:	58 c0       	rjmp	.+176    	; 0x8c8 <__stack+0x69>
void DIO_TogglePin(uint8 Port , uint8 Pin)
{
	switch(Port)
	{
	case DIO_PORTA :
		TOG_BIT(PORTA,Pin);
     818:	8b e3       	ldi	r24, 0x3B	; 59
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	fc 01       	movw	r30, r24
     81e:	80 81       	ld	r24, Z
     820:	48 2f       	mov	r20, r24
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	28 2f       	mov	r18, r24
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	02 c0       	rjmp	.+4      	; 0x832 <DIO_TogglePin+0x56>
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	2a 95       	dec	r18
     834:	e2 f7       	brpl	.-8      	; 0x82e <DIO_TogglePin+0x52>
     836:	24 2f       	mov	r18, r20
     838:	28 27       	eor	r18, r24
     83a:	8b e3       	ldi	r24, 0x3B	; 59
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
		break;
     842:	43 c0       	rjmp	.+134    	; 0x8ca <__stack+0x6b>

	case DIO_PORTB :
		TOG_BIT(PORTB,Pin);
     844:	88 e3       	ldi	r24, 0x38	; 56
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	48 2f       	mov	r20, r24
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	28 2f       	mov	r18, r24
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	02 c0       	rjmp	.+4      	; 0x85e <DIO_TogglePin+0x82>
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	2a 95       	dec	r18
     860:	e2 f7       	brpl	.-8      	; 0x85a <DIO_TogglePin+0x7e>
     862:	24 2f       	mov	r18, r20
     864:	28 27       	eor	r18, r24
     866:	88 e3       	ldi	r24, 0x38	; 56
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
		break;
     86e:	2d c0       	rjmp	.+90     	; 0x8ca <__stack+0x6b>

	case DIO_PORTC :
		TOG_BIT(PORTC,Pin);
     870:	85 e3       	ldi	r24, 0x35	; 53
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	48 2f       	mov	r20, r24
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	28 2f       	mov	r18, r24
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	2a 95       	dec	r18
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	24 2f       	mov	r18, r20
     890:	28 27       	eor	r18, r24
     892:	85 e3       	ldi	r24, 0x35	; 53
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
		break;
     89a:	17 c0       	rjmp	.+46     	; 0x8ca <__stack+0x6b>

	case DIO_PORTD :
		TOG_BIT(PORTD,Pin);
     89c:	82 e3       	ldi	r24, 0x32	; 50
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	fc 01       	movw	r30, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	48 2f       	mov	r20, r24
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	28 2f       	mov	r18, r24
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	2a 95       	dec	r18
     8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
     8ba:	24 2f       	mov	r18, r20
     8bc:	28 27       	eor	r18, r24
     8be:	82 e3       	ldi	r24, 0x32	; 50
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
		break;
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <__stack+0x6b>

	default:
		break;
     8c8:	00 00       	nop

	}
}
     8ca:	00 00       	nop
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <LCD_Init>:
#include "LCD_Interface.h"
#define F_CPU 8000000U
#include <util/delay.h>

void LCD_Init(void)
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	c4 54       	subi	r28, 0x44	; 68
     8e0:	d1 09       	sbc	r29, r1
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
	#if 		LCD_Mode == LCD_8BIT_MODE

	DIO_SetPinDir(LCD_Command_Port,LCD_RS_PIN,DIO_PIN_OUTPUT);
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_Command_Port,LCD_RW_PIN,DIO_PIN_OUTPUT);
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	62 e0       	ldi	r22, 0x02	; 2
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_Command_Port,LCD_E_PIN,DIO_PIN_OUTPUT);
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	63 e0       	ldi	r22, 0x03	; 3
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	0e 94 70 00 	call	0xe0	; 0xe0 <DIO_SetPinDir>

	DIO_SetPortDir(LCD_Data_Port,DIO_PORT_OUTPUT);
     90a:	6f ef       	ldi	r22, 0xFF	; 255
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPortDir>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a8 ec       	ldi	r26, 0xC8	; 200
     918:	b2 e4       	ldi	r27, 0x42	; 66
     91a:	8f 87       	std	Y+15, r24	; 0x0f
     91c:	98 8b       	std	Y+16, r25	; 0x10
     91e:	a9 8b       	std	Y+17, r26	; 0x11
     920:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	4a ef       	ldi	r20, 0xFA	; 250
     928:	54 e4       	ldi	r21, 0x44	; 68
     92a:	6f 85       	ldd	r22, Y+15	; 0x0f
     92c:	78 89       	ldd	r23, Y+16	; 0x10
     92e:	89 89       	ldd	r24, Y+17	; 0x11
     930:	9a 89       	ldd	r25, Y+18	; 0x12
     932:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     936:	6d a3       	std	Y+37, r22	; 0x25
     938:	7e a3       	std	Y+38, r23	; 0x26
     93a:	8f a3       	std	Y+39, r24	; 0x27
     93c:	98 a7       	std	Y+40, r25	; 0x28
     93e:	8d a1       	ldd	r24, Y+37	; 0x25
     940:	9e a1       	ldd	r25, Y+38	; 0x26
     942:	af a1       	ldd	r26, Y+39	; 0x27
     944:	b8 a5       	ldd	r27, Y+40	; 0x28
     946:	8b 8b       	std	Y+19, r24	; 0x13
     948:	9c 8b       	std	Y+20, r25	; 0x14
     94a:	ad 8b       	std	Y+21, r26	; 0x15
     94c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e8       	ldi	r20, 0x80	; 128
     954:	5f e3       	ldi	r21, 0x3F	; 63
     956:	6b 89       	ldd	r22, Y+19	; 0x13
     958:	7c 89       	ldd	r23, Y+20	; 0x14
     95a:	8d 89       	ldd	r24, Y+21	; 0x15
     95c:	9e 89       	ldd	r25, Y+22	; 0x16
     95e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__cmpsf2>
     962:	88 23       	and	r24, r24
     964:	2c f4       	brge	.+10     	; 0x970 <LCD_Init+0x9a>
		__ticks = 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	98 8f       	std	Y+24, r25	; 0x18
     96c:	8f 8b       	std	Y+23, r24	; 0x17
     96e:	54 c0       	rjmp	.+168    	; 0xa18 <LCD_Init+0x142>
	else if (__tmp > 65535)
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	3f ef       	ldi	r19, 0xFF	; 255
     974:	4f e7       	ldi	r20, 0x7F	; 127
     976:	57 e4       	ldi	r21, 0x47	; 71
     978:	6b 89       	ldd	r22, Y+19	; 0x13
     97a:	7c 89       	ldd	r23, Y+20	; 0x14
     97c:	8d 89       	ldd	r24, Y+21	; 0x15
     97e:	9e 89       	ldd	r25, Y+22	; 0x16
     980:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
     984:	18 16       	cp	r1, r24
     986:	d4 f5       	brge	.+116    	; 0x9fc <LCD_Init+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e2       	ldi	r20, 0x20	; 32
     98e:	51 e4       	ldi	r21, 0x41	; 65
     990:	6f 85       	ldd	r22, Y+15	; 0x0f
     992:	78 89       	ldd	r23, Y+16	; 0x10
     994:	89 89       	ldd	r24, Y+17	; 0x11
     996:	9a 89       	ldd	r25, Y+18	; 0x12
     998:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     99c:	69 a7       	std	Y+41, r22	; 0x29
     99e:	7a a7       	std	Y+42, r23	; 0x2a
     9a0:	8b a7       	std	Y+43, r24	; 0x2b
     9a2:	9c a7       	std	Y+44, r25	; 0x2c
     9a4:	89 a5       	ldd	r24, Y+41	; 0x29
     9a6:	9a a5       	ldd	r25, Y+42	; 0x2a
     9a8:	ab a5       	ldd	r26, Y+43	; 0x2b
     9aa:	bc a5       	ldd	r27, Y+44	; 0x2c
     9ac:	89 a3       	std	Y+33, r24	; 0x21
     9ae:	9a a3       	std	Y+34, r25	; 0x22
     9b0:	ab a3       	std	Y+35, r26	; 0x23
     9b2:	bc a3       	std	Y+36, r27	; 0x24
     9b4:	69 a1       	ldd	r22, Y+33	; 0x21
     9b6:	7a a1       	ldd	r23, Y+34	; 0x22
     9b8:	8b a1       	ldd	r24, Y+35	; 0x23
     9ba:	9c a1       	ldd	r25, Y+36	; 0x24
     9bc:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     9c0:	6d a7       	std	Y+45, r22	; 0x2d
     9c2:	7e a7       	std	Y+46, r23	; 0x2e
     9c4:	8f a7       	std	Y+47, r24	; 0x2f
     9c6:	98 ab       	std	Y+48, r25	; 0x30
     9c8:	ad a5       	ldd	r26, Y+45	; 0x2d
     9ca:	be a5       	ldd	r27, Y+46	; 0x2e
     9cc:	b8 8f       	std	Y+24, r27	; 0x18
     9ce:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     9d0:	10 c0       	rjmp	.+32     	; 0x9f2 <LCD_Init+0x11c>
     9d2:	88 ec       	ldi	r24, 0xC8	; 200
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	9a 8f       	std	Y+26, r25	; 0x1a
     9d8:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9da:	89 8d       	ldd	r24, Y+25	; 0x19
     9dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <LCD_Init+0x108>
     9e2:	9a 8f       	std	Y+26, r25	; 0x1a
     9e4:	89 8f       	std	Y+25, r24	; 0x19
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     9e6:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9e8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ea:	98 8d       	ldd	r25, Y+24	; 0x18
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	98 8f       	std	Y+24, r25	; 0x18
     9f0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9f2:	8f 89       	ldd	r24, Y+23	; 0x17
     9f4:	98 8d       	ldd	r25, Y+24	; 0x18
     9f6:	89 2b       	or	r24, r25
     9f8:	61 f7       	brne	.-40     	; 0x9d2 <LCD_Init+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     9fa:	19 c0       	rjmp	.+50     	; 0xa2e <LCD_Init+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
     9fc:	6b 89       	ldd	r22, Y+19	; 0x13
     9fe:	7c 89       	ldd	r23, Y+20	; 0x14
     a00:	8d 89       	ldd	r24, Y+21	; 0x15
     a02:	9e 89       	ldd	r25, Y+22	; 0x16
     a04:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     a08:	69 ab       	std	Y+49, r22	; 0x31
     a0a:	7a ab       	std	Y+50, r23	; 0x32
     a0c:	8b ab       	std	Y+51, r24	; 0x33
     a0e:	9c ab       	std	Y+52, r25	; 0x34
     a10:	89 a9       	ldd	r24, Y+49	; 0x31
     a12:	9a a9       	ldd	r25, Y+50	; 0x32
     a14:	98 8f       	std	Y+24, r25	; 0x18
     a16:	8f 8b       	std	Y+23, r24	; 0x17
     a18:	8f 89       	ldd	r24, Y+23	; 0x17
     a1a:	98 8d       	ldd	r25, Y+24	; 0x18
     a1c:	9c 8f       	std	Y+28, r25	; 0x1c
     a1e:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCD_Init+0x14e>
     a28:	9c 8f       	std	Y+28, r25	; 0x1c
     a2a:	8b 8f       	std	Y+27, r24	; 0x1b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     a2c:	00 00       	nop
	_delay_ms(100);

	LCD_WriteCommand(0x38); /*command to set the lcd in 8bit mode*/
     a2e:	88 e3       	ldi	r24, 0x38	; 56
     a30:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
	LCD_WriteCommand(0x0E); /*cursor blinking command*/
     a34:	8e e0       	ldi	r24, 0x0E	; 14
     a36:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
	LCD_WriteCommand(0x01); /*clear lcd command*/
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
	LCD_WriteCommand(0x06); /*shift cursor right command*/
     a40:	86 e0       	ldi	r24, 0x06	; 6
     a42:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
	LCD_WriteCommand(0x02); /*start from home(0,0) command*/
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	a0 ea       	ldi	r26, 0xA0	; 160
     a52:	b0 e4       	ldi	r27, 0x40	; 64
     a54:	89 83       	std	Y+1, r24	; 0x01
     a56:	9a 83       	std	Y+2, r25	; 0x02
     a58:	ab 83       	std	Y+3, r26	; 0x03
     a5a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	4a ef       	ldi	r20, 0xFA	; 250
     a62:	54 e4       	ldi	r21, 0x44	; 68
     a64:	69 81       	ldd	r22, Y+1	; 0x01
     a66:	7a 81       	ldd	r23, Y+2	; 0x02
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     a70:	6d ab       	std	Y+53, r22	; 0x35
     a72:	7e ab       	std	Y+54, r23	; 0x36
     a74:	8f ab       	std	Y+55, r24	; 0x37
     a76:	98 af       	std	Y+56, r25	; 0x38
     a78:	8d a9       	ldd	r24, Y+53	; 0x35
     a7a:	9e a9       	ldd	r25, Y+54	; 0x36
     a7c:	af a9       	ldd	r26, Y+55	; 0x37
     a7e:	b8 ad       	ldd	r27, Y+56	; 0x38
     a80:	8d 83       	std	Y+5, r24	; 0x05
     a82:	9e 83       	std	Y+6, r25	; 0x06
     a84:	af 83       	std	Y+7, r26	; 0x07
     a86:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e8       	ldi	r20, 0x80	; 128
     a8e:	5f e3       	ldi	r21, 0x3F	; 63
     a90:	6d 81       	ldd	r22, Y+5	; 0x05
     a92:	7e 81       	ldd	r23, Y+6	; 0x06
     a94:	8f 81       	ldd	r24, Y+7	; 0x07
     a96:	98 85       	ldd	r25, Y+8	; 0x08
     a98:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__cmpsf2>
     a9c:	88 23       	and	r24, r24
     a9e:	2c f4       	brge	.+10     	; 0xaaa <LCD_Init+0x1d4>
		__ticks = 1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9a 87       	std	Y+10, r25	; 0x0a
     aa6:	89 87       	std	Y+9, r24	; 0x09
     aa8:	5b c0       	rjmp	.+182    	; 0xb60 <LCD_Init+0x28a>
	else if (__tmp > 65535)
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	3f ef       	ldi	r19, 0xFF	; 255
     aae:	4f e7       	ldi	r20, 0x7F	; 127
     ab0:	57 e4       	ldi	r21, 0x47	; 71
     ab2:	6d 81       	ldd	r22, Y+5	; 0x05
     ab4:	7e 81       	ldd	r23, Y+6	; 0x06
     ab6:	8f 81       	ldd	r24, Y+7	; 0x07
     ab8:	98 85       	ldd	r25, Y+8	; 0x08
     aba:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
     abe:	18 16       	cp	r1, r24
     ac0:	0c f0       	brlt	.+2      	; 0xac4 <LCD_Init+0x1ee>
     ac2:	3c c0       	rjmp	.+120    	; 0xb3c <LCD_Init+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	40 e2       	ldi	r20, 0x20	; 32
     aca:	51 e4       	ldi	r21, 0x41	; 65
     acc:	69 81       	ldd	r22, Y+1	; 0x01
     ace:	7a 81       	ldd	r23, Y+2	; 0x02
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	9c 81       	ldd	r25, Y+4	; 0x04
     ad4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     ad8:	69 af       	std	Y+57, r22	; 0x39
     ada:	7a af       	std	Y+58, r23	; 0x3a
     adc:	8b af       	std	Y+59, r24	; 0x3b
     ade:	9c af       	std	Y+60, r25	; 0x3c
     ae0:	89 ad       	ldd	r24, Y+57	; 0x39
     ae2:	9a ad       	ldd	r25, Y+58	; 0x3a
     ae4:	ab ad       	ldd	r26, Y+59	; 0x3b
     ae6:	bc ad       	ldd	r27, Y+60	; 0x3c
     ae8:	8d 8f       	std	Y+29, r24	; 0x1d
     aea:	9e 8f       	std	Y+30, r25	; 0x1e
     aec:	af 8f       	std	Y+31, r26	; 0x1f
     aee:	b8 a3       	std	Y+32, r27	; 0x20
     af0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     af2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     af4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     af6:	98 a1       	ldd	r25, Y+32	; 0x20
     af8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     afc:	21 96       	adiw	r28, 0x01	; 1
     afe:	6c af       	std	Y+60, r22	; 0x3c
     b00:	7d af       	std	Y+61, r23	; 0x3d
     b02:	8e af       	std	Y+62, r24	; 0x3e
     b04:	9f af       	std	Y+63, r25	; 0x3f
     b06:	21 97       	sbiw	r28, 0x01	; 1
     b08:	ad ad       	ldd	r26, Y+61	; 0x3d
     b0a:	be ad       	ldd	r27, Y+62	; 0x3e
     b0c:	ba 87       	std	Y+10, r27	; 0x0a
     b0e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     b10:	10 c0       	rjmp	.+32     	; 0xb32 <LCD_Init+0x25c>
     b12:	88 ec       	ldi	r24, 0xC8	; 200
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	9c 87       	std	Y+12, r25	; 0x0c
     b18:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b1e:	01 97       	sbiw	r24, 0x01	; 1
     b20:	f1 f7       	brne	.-4      	; 0xb1e <LCD_Init+0x248>
     b22:	9c 87       	std	Y+12, r25	; 0x0c
     b24:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     b26:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b28:	89 85       	ldd	r24, Y+9	; 0x09
     b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	9a 87       	std	Y+10, r25	; 0x0a
     b30:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b32:	89 85       	ldd	r24, Y+9	; 0x09
     b34:	9a 85       	ldd	r25, Y+10	; 0x0a
     b36:	89 2b       	or	r24, r25
     b38:	61 f7       	brne	.-40     	; 0xb12 <LCD_Init+0x23c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     b3a:	1d c0       	rjmp	.+58     	; 0xb76 <LCD_Init+0x2a0>
	}
	else
		__ticks = (uint16_t)__tmp;
     b3c:	6d 81       	ldd	r22, Y+5	; 0x05
     b3e:	7e 81       	ldd	r23, Y+6	; 0x06
     b40:	8f 81       	ldd	r24, Y+7	; 0x07
     b42:	98 85       	ldd	r25, Y+8	; 0x08
     b44:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     b48:	25 96       	adiw	r28, 0x05	; 5
     b4a:	6c af       	std	Y+60, r22	; 0x3c
     b4c:	7d af       	std	Y+61, r23	; 0x3d
     b4e:	8e af       	std	Y+62, r24	; 0x3e
     b50:	9f af       	std	Y+63, r25	; 0x3f
     b52:	25 97       	sbiw	r28, 0x05	; 5
     b54:	23 96       	adiw	r28, 0x03	; 3
     b56:	8e ad       	ldd	r24, Y+62	; 0x3e
     b58:	9f ad       	ldd	r25, Y+63	; 0x3f
     b5a:	23 97       	sbiw	r28, 0x03	; 3
     b5c:	9a 87       	std	Y+10, r25	; 0x0a
     b5e:	89 87       	std	Y+9, r24	; 0x09
     b60:	89 85       	ldd	r24, Y+9	; 0x09
     b62:	9a 85       	ldd	r25, Y+10	; 0x0a
     b64:	9e 87       	std	Y+14, r25	; 0x0e
     b66:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b68:	8d 85       	ldd	r24, Y+13	; 0x0d
     b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCD_Init+0x296>
     b70:	9e 87       	std	Y+14, r25	; 0x0e
     b72:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     b74:	00 00       	nop
	LCD_WriteCommand(0x06); /*shift cursor right command*/
	LCD_WriteCommand(0x02); /*start from home(0,0) command*/
	_delay_ms(5);

	#endif
}
     b76:	00 00       	nop
     b78:	cc 5b       	subi	r28, 0xBC	; 188
     b7a:	df 4f       	sbci	r29, 0xFF	; 255
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <LCD_WriteCommand>:

void LCD_WriteCommand( uint8 cmd)
{
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	c5 54       	subi	r28, 0x45	; 69
     b96:	d1 09       	sbc	r29, r1
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_SetPinVal(LCD_Command_Port,LCD_RS_PIN,DIO_PIN_LOW);
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_Command_Port,LCD_RW_PIN,DIO_PIN_LOW);
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	62 e0       	ldi	r22, 0x02	; 2
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
	DIO_SetPinVal(LCD_Command_Port,LCD_E_PIN ,DIO_PIN_LOW);
     bb8:	40 e0       	ldi	r20, 0x00	; 0
     bba:	63 e0       	ldi	r22, 0x03	; 3
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>

	#if 		LCD_Mode == LCD_8BIT_MODE

	DIO_SetPortVal(LCD_Data_Port,cmd);
     bc2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_SetPortVal>

	DIO_SetPinVal(LCD_Command_Port,LCD_E_PIN ,DIO_PIN_HIGH);
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	63 e0       	ldi	r22, 0x03	; 3
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e8       	ldi	r26, 0x80	; 128
     bda:	bf e3       	ldi	r27, 0x3F	; 63
     bdc:	8f 87       	std	Y+15, r24	; 0x0f
     bde:	98 8b       	std	Y+16, r25	; 0x10
     be0:	a9 8b       	std	Y+17, r26	; 0x11
     be2:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a ef       	ldi	r20, 0xFA	; 250
     bea:	54 e4       	ldi	r21, 0x44	; 68
     bec:	6f 85       	ldd	r22, Y+15	; 0x0f
     bee:	78 89       	ldd	r23, Y+16	; 0x10
     bf0:	89 89       	ldd	r24, Y+17	; 0x11
     bf2:	9a 89       	ldd	r25, Y+18	; 0x12
     bf4:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     bf8:	6e a3       	std	Y+38, r22	; 0x26
     bfa:	7f a3       	std	Y+39, r23	; 0x27
     bfc:	88 a7       	std	Y+40, r24	; 0x28
     bfe:	99 a7       	std	Y+41, r25	; 0x29
     c00:	8e a1       	ldd	r24, Y+38	; 0x26
     c02:	9f a1       	ldd	r25, Y+39	; 0x27
     c04:	a8 a5       	ldd	r26, Y+40	; 0x28
     c06:	b9 a5       	ldd	r27, Y+41	; 0x29
     c08:	8b 8b       	std	Y+19, r24	; 0x13
     c0a:	9c 8b       	std	Y+20, r25	; 0x14
     c0c:	ad 8b       	std	Y+21, r26	; 0x15
     c0e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e8       	ldi	r20, 0x80	; 128
     c16:	5f e3       	ldi	r21, 0x3F	; 63
     c18:	6b 89       	ldd	r22, Y+19	; 0x13
     c1a:	7c 89       	ldd	r23, Y+20	; 0x14
     c1c:	8d 89       	ldd	r24, Y+21	; 0x15
     c1e:	9e 89       	ldd	r25, Y+22	; 0x16
     c20:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__cmpsf2>
     c24:	88 23       	and	r24, r24
     c26:	2c f4       	brge	.+10     	; 0xc32 <LCD_WriteCommand+0xa6>
		__ticks = 1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	98 8f       	std	Y+24, r25	; 0x18
     c2e:	8f 8b       	std	Y+23, r24	; 0x17
     c30:	54 c0       	rjmp	.+168    	; 0xcda <LCD_WriteCommand+0x14e>
	else if (__tmp > 65535)
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	3f ef       	ldi	r19, 0xFF	; 255
     c36:	4f e7       	ldi	r20, 0x7F	; 127
     c38:	57 e4       	ldi	r21, 0x47	; 71
     c3a:	6b 89       	ldd	r22, Y+19	; 0x13
     c3c:	7c 89       	ldd	r23, Y+20	; 0x14
     c3e:	8d 89       	ldd	r24, Y+21	; 0x15
     c40:	9e 89       	ldd	r25, Y+22	; 0x16
     c42:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
     c46:	18 16       	cp	r1, r24
     c48:	d4 f5       	brge	.+116    	; 0xcbe <LCD_WriteCommand+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e2       	ldi	r20, 0x20	; 32
     c50:	51 e4       	ldi	r21, 0x41	; 65
     c52:	6f 85       	ldd	r22, Y+15	; 0x0f
     c54:	78 89       	ldd	r23, Y+16	; 0x10
     c56:	89 89       	ldd	r24, Y+17	; 0x11
     c58:	9a 89       	ldd	r25, Y+18	; 0x12
     c5a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     c5e:	6a a7       	std	Y+42, r22	; 0x2a
     c60:	7b a7       	std	Y+43, r23	; 0x2b
     c62:	8c a7       	std	Y+44, r24	; 0x2c
     c64:	9d a7       	std	Y+45, r25	; 0x2d
     c66:	8a a5       	ldd	r24, Y+42	; 0x2a
     c68:	9b a5       	ldd	r25, Y+43	; 0x2b
     c6a:	ac a5       	ldd	r26, Y+44	; 0x2c
     c6c:	bd a5       	ldd	r27, Y+45	; 0x2d
     c6e:	8a a3       	std	Y+34, r24	; 0x22
     c70:	9b a3       	std	Y+35, r25	; 0x23
     c72:	ac a3       	std	Y+36, r26	; 0x24
     c74:	bd a3       	std	Y+37, r27	; 0x25
     c76:	6a a1       	ldd	r22, Y+34	; 0x22
     c78:	7b a1       	ldd	r23, Y+35	; 0x23
     c7a:	8c a1       	ldd	r24, Y+36	; 0x24
     c7c:	9d a1       	ldd	r25, Y+37	; 0x25
     c7e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     c82:	6e a7       	std	Y+46, r22	; 0x2e
     c84:	7f a7       	std	Y+47, r23	; 0x2f
     c86:	88 ab       	std	Y+48, r24	; 0x30
     c88:	99 ab       	std	Y+49, r25	; 0x31
     c8a:	ae a5       	ldd	r26, Y+46	; 0x2e
     c8c:	bf a5       	ldd	r27, Y+47	; 0x2f
     c8e:	b8 8f       	std	Y+24, r27	; 0x18
     c90:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     c92:	10 c0       	rjmp	.+32     	; 0xcb4 <LCD_WriteCommand+0x128>
     c94:	88 ec       	ldi	r24, 0xC8	; 200
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	9a 8f       	std	Y+26, r25	; 0x1a
     c9a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9c:	89 8d       	ldd	r24, Y+25	; 0x19
     c9e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <LCD_WriteCommand+0x114>
     ca4:	9a 8f       	std	Y+26, r25	; 0x1a
     ca6:	89 8f       	std	Y+25, r24	; 0x19
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     ca8:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     caa:	8f 89       	ldd	r24, Y+23	; 0x17
     cac:	98 8d       	ldd	r25, Y+24	; 0x18
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	98 8f       	std	Y+24, r25	; 0x18
     cb2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	89 2b       	or	r24, r25
     cba:	61 f7       	brne	.-40     	; 0xc94 <LCD_WriteCommand+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     cbc:	19 c0       	rjmp	.+50     	; 0xcf0 <LCD_WriteCommand+0x164>
	}
	else
		__ticks = (uint16_t)__tmp;
     cbe:	6b 89       	ldd	r22, Y+19	; 0x13
     cc0:	7c 89       	ldd	r23, Y+20	; 0x14
     cc2:	8d 89       	ldd	r24, Y+21	; 0x15
     cc4:	9e 89       	ldd	r25, Y+22	; 0x16
     cc6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     cca:	6a ab       	std	Y+50, r22	; 0x32
     ccc:	7b ab       	std	Y+51, r23	; 0x33
     cce:	8c ab       	std	Y+52, r24	; 0x34
     cd0:	9d ab       	std	Y+53, r25	; 0x35
     cd2:	8a a9       	ldd	r24, Y+50	; 0x32
     cd4:	9b a9       	ldd	r25, Y+51	; 0x33
     cd6:	98 8f       	std	Y+24, r25	; 0x18
     cd8:	8f 8b       	std	Y+23, r24	; 0x17
     cda:	8f 89       	ldd	r24, Y+23	; 0x17
     cdc:	98 8d       	ldd	r25, Y+24	; 0x18
     cde:	9c 8f       	std	Y+28, r25	; 0x1c
     ce0:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <LCD_WriteCommand+0x15a>
     cea:	9c 8f       	std	Y+28, r25	; 0x1c
     cec:	8b 8f       	std	Y+27, r24	; 0x1b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     cee:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinVal(LCD_Command_Port,LCD_E_PIN ,DIO_PIN_LOW);
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	63 e0       	ldi	r22, 0x03	; 3
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	a0 ea       	ldi	r26, 0xA0	; 160
     d00:	b0 e4       	ldi	r27, 0x40	; 64
     d02:	89 83       	std	Y+1, r24	; 0x01
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	ab 83       	std	Y+3, r26	; 0x03
     d08:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	4a ef       	ldi	r20, 0xFA	; 250
     d10:	54 e4       	ldi	r21, 0x44	; 68
     d12:	69 81       	ldd	r22, Y+1	; 0x01
     d14:	7a 81       	ldd	r23, Y+2	; 0x02
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     d1e:	6e ab       	std	Y+54, r22	; 0x36
     d20:	7f ab       	std	Y+55, r23	; 0x37
     d22:	88 af       	std	Y+56, r24	; 0x38
     d24:	99 af       	std	Y+57, r25	; 0x39
     d26:	8e a9       	ldd	r24, Y+54	; 0x36
     d28:	9f a9       	ldd	r25, Y+55	; 0x37
     d2a:	a8 ad       	ldd	r26, Y+56	; 0x38
     d2c:	b9 ad       	ldd	r27, Y+57	; 0x39
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	9e 83       	std	Y+6, r25	; 0x06
     d32:	af 83       	std	Y+7, r26	; 0x07
     d34:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	5f e3       	ldi	r21, 0x3F	; 63
     d3e:	6d 81       	ldd	r22, Y+5	; 0x05
     d40:	7e 81       	ldd	r23, Y+6	; 0x06
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	98 85       	ldd	r25, Y+8	; 0x08
     d46:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__cmpsf2>
     d4a:	88 23       	and	r24, r24
     d4c:	2c f4       	brge	.+10     	; 0xd58 <LCD_WriteCommand+0x1cc>
		__ticks = 1;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	9a 87       	std	Y+10, r25	; 0x0a
     d54:	89 87       	std	Y+9, r24	; 0x09
     d56:	5b c0       	rjmp	.+182    	; 0xe0e <LCD_WriteCommand+0x282>
	else if (__tmp > 65535)
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	3f ef       	ldi	r19, 0xFF	; 255
     d5c:	4f e7       	ldi	r20, 0x7F	; 127
     d5e:	57 e4       	ldi	r21, 0x47	; 71
     d60:	6d 81       	ldd	r22, Y+5	; 0x05
     d62:	7e 81       	ldd	r23, Y+6	; 0x06
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	98 85       	ldd	r25, Y+8	; 0x08
     d68:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
     d6c:	18 16       	cp	r1, r24
     d6e:	0c f0       	brlt	.+2      	; 0xd72 <LCD_WriteCommand+0x1e6>
     d70:	3c c0       	rjmp	.+120    	; 0xdea <LCD_WriteCommand+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	51 e4       	ldi	r21, 0x41	; 65
     d7a:	69 81       	ldd	r22, Y+1	; 0x01
     d7c:	7a 81       	ldd	r23, Y+2	; 0x02
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     d86:	6a af       	std	Y+58, r22	; 0x3a
     d88:	7b af       	std	Y+59, r23	; 0x3b
     d8a:	8c af       	std	Y+60, r24	; 0x3c
     d8c:	9d af       	std	Y+61, r25	; 0x3d
     d8e:	8a ad       	ldd	r24, Y+58	; 0x3a
     d90:	9b ad       	ldd	r25, Y+59	; 0x3b
     d92:	ac ad       	ldd	r26, Y+60	; 0x3c
     d94:	bd ad       	ldd	r27, Y+61	; 0x3d
     d96:	8e 8f       	std	Y+30, r24	; 0x1e
     d98:	9f 8f       	std	Y+31, r25	; 0x1f
     d9a:	a8 a3       	std	Y+32, r26	; 0x20
     d9c:	b9 a3       	std	Y+33, r27	; 0x21
     d9e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     da0:	7f 8d       	ldd	r23, Y+31	; 0x1f
     da2:	88 a1       	ldd	r24, Y+32	; 0x20
     da4:	99 a1       	ldd	r25, Y+33	; 0x21
     da6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     daa:	22 96       	adiw	r28, 0x02	; 2
     dac:	6c af       	std	Y+60, r22	; 0x3c
     dae:	7d af       	std	Y+61, r23	; 0x3d
     db0:	8e af       	std	Y+62, r24	; 0x3e
     db2:	9f af       	std	Y+63, r25	; 0x3f
     db4:	22 97       	sbiw	r28, 0x02	; 2
     db6:	ae ad       	ldd	r26, Y+62	; 0x3e
     db8:	bf ad       	ldd	r27, Y+63	; 0x3f
     dba:	ba 87       	std	Y+10, r27	; 0x0a
     dbc:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     dbe:	10 c0       	rjmp	.+32     	; 0xde0 <LCD_WriteCommand+0x254>
     dc0:	88 ec       	ldi	r24, 0xC8	; 200
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	9c 87       	std	Y+12, r25	; 0x0c
     dc6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dca:	9c 85       	ldd	r25, Y+12	; 0x0c
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <LCD_WriteCommand+0x240>
     dd0:	9c 87       	std	Y+12, r25	; 0x0c
     dd2:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     dd4:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	9a 87       	std	Y+10, r25	; 0x0a
     dde:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	89 2b       	or	r24, r25
     de6:	61 f7       	brne	.-40     	; 0xdc0 <LCD_WriteCommand+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     de8:	1d c0       	rjmp	.+58     	; 0xe24 <LCD_WriteCommand+0x298>
	}
	else
		__ticks = (uint16_t)__tmp;
     dea:	6d 81       	ldd	r22, Y+5	; 0x05
     dec:	7e 81       	ldd	r23, Y+6	; 0x06
     dee:	8f 81       	ldd	r24, Y+7	; 0x07
     df0:	98 85       	ldd	r25, Y+8	; 0x08
     df2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     df6:	26 96       	adiw	r28, 0x06	; 6
     df8:	6c af       	std	Y+60, r22	; 0x3c
     dfa:	7d af       	std	Y+61, r23	; 0x3d
     dfc:	8e af       	std	Y+62, r24	; 0x3e
     dfe:	9f af       	std	Y+63, r25	; 0x3f
     e00:	26 97       	sbiw	r28, 0x06	; 6
     e02:	24 96       	adiw	r28, 0x04	; 4
     e04:	8e ad       	ldd	r24, Y+62	; 0x3e
     e06:	9f ad       	ldd	r25, Y+63	; 0x3f
     e08:	24 97       	sbiw	r28, 0x04	; 4
     e0a:	9a 87       	std	Y+10, r25	; 0x0a
     e0c:	89 87       	std	Y+9, r24	; 0x09
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	9e 87       	std	Y+14, r25	; 0x0e
     e14:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e16:	8d 85       	ldd	r24, Y+13	; 0x0d
     e18:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <LCD_WriteCommand+0x28e>
     e1e:	9e 87       	std	Y+14, r25	; 0x0e
     e20:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     e22:	00 00       	nop

	#endif

	_delay_ms(5);

}
     e24:	00 00       	nop
     e26:	cb 5b       	subi	r28, 0xBB	; 187
     e28:	df 4f       	sbci	r29, 0xFF	; 255
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	08 95       	ret

00000e3a <LCD_WriteChar>:

void LCD_WriteChar(uint8 character)
{
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	c5 54       	subi	r28, 0x45	; 69
     e44:	d1 09       	sbc	r29, r1
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	8d 8f       	std	Y+29, r24	; 0x1d
		DIO_SetPinVal(LCD_Command_Port,LCD_RS_PIN,DIO_PIN_HIGH);
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
		DIO_SetPinVal(LCD_Command_Port,LCD_RW_PIN,DIO_PIN_LOW);
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
		DIO_SetPinVal(LCD_Command_Port,LCD_E_PIN ,DIO_PIN_LOW);
     e66:	40 e0       	ldi	r20, 0x00	; 0
     e68:	63 e0       	ldi	r22, 0x03	; 3
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>

		#if 		LCD_Mode == LCD_8BIT_MODE

		DIO_SetPortVal(LCD_Data_Port,character);
     e70:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DIO_SetPortVal>

		DIO_SetPinVal(LCD_Command_Port,LCD_E_PIN ,DIO_PIN_HIGH);
     e78:	41 e0       	ldi	r20, 0x01	; 1
     e7a:	63 e0       	ldi	r22, 0x03	; 3
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	a0 e8       	ldi	r26, 0x80	; 128
     e88:	bf e3       	ldi	r27, 0x3F	; 63
     e8a:	8f 87       	std	Y+15, r24	; 0x0f
     e8c:	98 8b       	std	Y+16, r25	; 0x10
     e8e:	a9 8b       	std	Y+17, r26	; 0x11
     e90:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	4a ef       	ldi	r20, 0xFA	; 250
     e98:	54 e4       	ldi	r21, 0x44	; 68
     e9a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e9c:	78 89       	ldd	r23, Y+16	; 0x10
     e9e:	89 89       	ldd	r24, Y+17	; 0x11
     ea0:	9a 89       	ldd	r25, Y+18	; 0x12
     ea2:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     ea6:	6e a3       	std	Y+38, r22	; 0x26
     ea8:	7f a3       	std	Y+39, r23	; 0x27
     eaa:	88 a7       	std	Y+40, r24	; 0x28
     eac:	99 a7       	std	Y+41, r25	; 0x29
     eae:	8e a1       	ldd	r24, Y+38	; 0x26
     eb0:	9f a1       	ldd	r25, Y+39	; 0x27
     eb2:	a8 a5       	ldd	r26, Y+40	; 0x28
     eb4:	b9 a5       	ldd	r27, Y+41	; 0x29
     eb6:	8b 8b       	std	Y+19, r24	; 0x13
     eb8:	9c 8b       	std	Y+20, r25	; 0x14
     eba:	ad 8b       	std	Y+21, r26	; 0x15
     ebc:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e8       	ldi	r20, 0x80	; 128
     ec4:	5f e3       	ldi	r21, 0x3F	; 63
     ec6:	6b 89       	ldd	r22, Y+19	; 0x13
     ec8:	7c 89       	ldd	r23, Y+20	; 0x14
     eca:	8d 89       	ldd	r24, Y+21	; 0x15
     ecc:	9e 89       	ldd	r25, Y+22	; 0x16
     ece:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__cmpsf2>
     ed2:	88 23       	and	r24, r24
     ed4:	2c f4       	brge	.+10     	; 0xee0 <LCD_WriteChar+0xa6>
		__ticks = 1;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	98 8f       	std	Y+24, r25	; 0x18
     edc:	8f 8b       	std	Y+23, r24	; 0x17
     ede:	54 c0       	rjmp	.+168    	; 0xf88 <LCD_WriteChar+0x14e>
	else if (__tmp > 65535)
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	3f ef       	ldi	r19, 0xFF	; 255
     ee4:	4f e7       	ldi	r20, 0x7F	; 127
     ee6:	57 e4       	ldi	r21, 0x47	; 71
     ee8:	6b 89       	ldd	r22, Y+19	; 0x13
     eea:	7c 89       	ldd	r23, Y+20	; 0x14
     eec:	8d 89       	ldd	r24, Y+21	; 0x15
     eee:	9e 89       	ldd	r25, Y+22	; 0x16
     ef0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
     ef4:	18 16       	cp	r1, r24
     ef6:	d4 f5       	brge	.+116    	; 0xf6c <LCD_WriteChar+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e2       	ldi	r20, 0x20	; 32
     efe:	51 e4       	ldi	r21, 0x41	; 65
     f00:	6f 85       	ldd	r22, Y+15	; 0x0f
     f02:	78 89       	ldd	r23, Y+16	; 0x10
     f04:	89 89       	ldd	r24, Y+17	; 0x11
     f06:	9a 89       	ldd	r25, Y+18	; 0x12
     f08:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     f0c:	6a a7       	std	Y+42, r22	; 0x2a
     f0e:	7b a7       	std	Y+43, r23	; 0x2b
     f10:	8c a7       	std	Y+44, r24	; 0x2c
     f12:	9d a7       	std	Y+45, r25	; 0x2d
     f14:	8a a5       	ldd	r24, Y+42	; 0x2a
     f16:	9b a5       	ldd	r25, Y+43	; 0x2b
     f18:	ac a5       	ldd	r26, Y+44	; 0x2c
     f1a:	bd a5       	ldd	r27, Y+45	; 0x2d
     f1c:	8a a3       	std	Y+34, r24	; 0x22
     f1e:	9b a3       	std	Y+35, r25	; 0x23
     f20:	ac a3       	std	Y+36, r26	; 0x24
     f22:	bd a3       	std	Y+37, r27	; 0x25
     f24:	6a a1       	ldd	r22, Y+34	; 0x22
     f26:	7b a1       	ldd	r23, Y+35	; 0x23
     f28:	8c a1       	ldd	r24, Y+36	; 0x24
     f2a:	9d a1       	ldd	r25, Y+37	; 0x25
     f2c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     f30:	6e a7       	std	Y+46, r22	; 0x2e
     f32:	7f a7       	std	Y+47, r23	; 0x2f
     f34:	88 ab       	std	Y+48, r24	; 0x30
     f36:	99 ab       	std	Y+49, r25	; 0x31
     f38:	ae a5       	ldd	r26, Y+46	; 0x2e
     f3a:	bf a5       	ldd	r27, Y+47	; 0x2f
     f3c:	b8 8f       	std	Y+24, r27	; 0x18
     f3e:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     f40:	10 c0       	rjmp	.+32     	; 0xf62 <LCD_WriteChar+0x128>
     f42:	88 ec       	ldi	r24, 0xC8	; 200
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9a 8f       	std	Y+26, r25	; 0x1a
     f48:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f4a:	89 8d       	ldd	r24, Y+25	; 0x19
     f4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <LCD_WriteChar+0x114>
     f52:	9a 8f       	std	Y+26, r25	; 0x1a
     f54:	89 8f       	std	Y+25, r24	; 0x19
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     f56:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f58:	8f 89       	ldd	r24, Y+23	; 0x17
     f5a:	98 8d       	ldd	r25, Y+24	; 0x18
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	98 8f       	std	Y+24, r25	; 0x18
     f60:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f62:	8f 89       	ldd	r24, Y+23	; 0x17
     f64:	98 8d       	ldd	r25, Y+24	; 0x18
     f66:	89 2b       	or	r24, r25
     f68:	61 f7       	brne	.-40     	; 0xf42 <LCD_WriteChar+0x108>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     f6a:	19 c0       	rjmp	.+50     	; 0xf9e <LCD_WriteChar+0x164>
	}
	else
		__ticks = (uint16_t)__tmp;
     f6c:	6b 89       	ldd	r22, Y+19	; 0x13
     f6e:	7c 89       	ldd	r23, Y+20	; 0x14
     f70:	8d 89       	ldd	r24, Y+21	; 0x15
     f72:	9e 89       	ldd	r25, Y+22	; 0x16
     f74:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
     f78:	6a ab       	std	Y+50, r22	; 0x32
     f7a:	7b ab       	std	Y+51, r23	; 0x33
     f7c:	8c ab       	std	Y+52, r24	; 0x34
     f7e:	9d ab       	std	Y+53, r25	; 0x35
     f80:	8a a9       	ldd	r24, Y+50	; 0x32
     f82:	9b a9       	ldd	r25, Y+51	; 0x33
     f84:	98 8f       	std	Y+24, r25	; 0x18
     f86:	8f 8b       	std	Y+23, r24	; 0x17
     f88:	8f 89       	ldd	r24, Y+23	; 0x17
     f8a:	98 8d       	ldd	r25, Y+24	; 0x18
     f8c:	9c 8f       	std	Y+28, r25	; 0x1c
     f8e:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f90:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f92:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <LCD_WriteChar+0x15a>
     f98:	9c 8f       	std	Y+28, r25	; 0x1c
     f9a:	8b 8f       	std	Y+27, r24	; 0x1b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     f9c:	00 00       	nop
		_delay_ms(1);
		DIO_SetPinVal(LCD_Command_Port,LCD_E_PIN ,DIO_PIN_LOW);
     f9e:	40 e0       	ldi	r20, 0x00	; 0
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_SetPinVal>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 ea       	ldi	r26, 0xA0	; 160
     fae:	b0 e4       	ldi	r27, 0x40	; 64
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	ab 83       	std	Y+3, r26	; 0x03
     fb6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	4a ef       	ldi	r20, 0xFA	; 250
     fbe:	54 e4       	ldi	r21, 0x44	; 68
     fc0:	69 81       	ldd	r22, Y+1	; 0x01
     fc2:	7a 81       	ldd	r23, Y+2	; 0x02
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
     fcc:	6e ab       	std	Y+54, r22	; 0x36
     fce:	7f ab       	std	Y+55, r23	; 0x37
     fd0:	88 af       	std	Y+56, r24	; 0x38
     fd2:	99 af       	std	Y+57, r25	; 0x39
     fd4:	8e a9       	ldd	r24, Y+54	; 0x36
     fd6:	9f a9       	ldd	r25, Y+55	; 0x37
     fd8:	a8 ad       	ldd	r26, Y+56	; 0x38
     fda:	b9 ad       	ldd	r27, Y+57	; 0x39
     fdc:	8d 83       	std	Y+5, r24	; 0x05
     fde:	9e 83       	std	Y+6, r25	; 0x06
     fe0:	af 83       	std	Y+7, r26	; 0x07
     fe2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e8       	ldi	r20, 0x80	; 128
     fea:	5f e3       	ldi	r21, 0x3F	; 63
     fec:	6d 81       	ldd	r22, Y+5	; 0x05
     fee:	7e 81       	ldd	r23, Y+6	; 0x06
     ff0:	8f 81       	ldd	r24, Y+7	; 0x07
     ff2:	98 85       	ldd	r25, Y+8	; 0x08
     ff4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <__cmpsf2>
     ff8:	88 23       	and	r24, r24
     ffa:	2c f4       	brge	.+10     	; 0x1006 <LCD_WriteChar+0x1cc>
		__ticks = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	9a 87       	std	Y+10, r25	; 0x0a
    1002:	89 87       	std	Y+9, r24	; 0x09
    1004:	5b c0       	rjmp	.+182    	; 0x10bc <LCD_WriteChar+0x282>
	else if (__tmp > 65535)
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	3f ef       	ldi	r19, 0xFF	; 255
    100a:	4f e7       	ldi	r20, 0x7F	; 127
    100c:	57 e4       	ldi	r21, 0x47	; 71
    100e:	6d 81       	ldd	r22, Y+5	; 0x05
    1010:	7e 81       	ldd	r23, Y+6	; 0x06
    1012:	8f 81       	ldd	r24, Y+7	; 0x07
    1014:	98 85       	ldd	r25, Y+8	; 0x08
    1016:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__gesf2>
    101a:	18 16       	cp	r1, r24
    101c:	0c f0       	brlt	.+2      	; 0x1020 <LCD_WriteChar+0x1e6>
    101e:	3c c0       	rjmp	.+120    	; 0x1098 <LCD_WriteChar+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	69 81       	ldd	r22, Y+1	; 0x01
    102a:	7a 81       	ldd	r23, Y+2	; 0x02
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__mulsf3>
    1034:	6a af       	std	Y+58, r22	; 0x3a
    1036:	7b af       	std	Y+59, r23	; 0x3b
    1038:	8c af       	std	Y+60, r24	; 0x3c
    103a:	9d af       	std	Y+61, r25	; 0x3d
    103c:	8a ad       	ldd	r24, Y+58	; 0x3a
    103e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1040:	ac ad       	ldd	r26, Y+60	; 0x3c
    1042:	bd ad       	ldd	r27, Y+61	; 0x3d
    1044:	8e 8f       	std	Y+30, r24	; 0x1e
    1046:	9f 8f       	std	Y+31, r25	; 0x1f
    1048:	a8 a3       	std	Y+32, r26	; 0x20
    104a:	b9 a3       	std	Y+33, r27	; 0x21
    104c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    104e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1050:	88 a1       	ldd	r24, Y+32	; 0x20
    1052:	99 a1       	ldd	r25, Y+33	; 0x21
    1054:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
    1058:	22 96       	adiw	r28, 0x02	; 2
    105a:	6c af       	std	Y+60, r22	; 0x3c
    105c:	7d af       	std	Y+61, r23	; 0x3d
    105e:	8e af       	std	Y+62, r24	; 0x3e
    1060:	9f af       	std	Y+63, r25	; 0x3f
    1062:	22 97       	sbiw	r28, 0x02	; 2
    1064:	ae ad       	ldd	r26, Y+62	; 0x3e
    1066:	bf ad       	ldd	r27, Y+63	; 0x3f
    1068:	ba 87       	std	Y+10, r27	; 0x0a
    106a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    106c:	10 c0       	rjmp	.+32     	; 0x108e <LCD_WriteChar+0x254>
    106e:	88 ec       	ldi	r24, 0xC8	; 200
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	9c 87       	std	Y+12, r25	; 0x0c
    1074:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1076:	8b 85       	ldd	r24, Y+11	; 0x0b
    1078:	9c 85       	ldd	r25, Y+12	; 0x0c
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_WriteChar+0x240>
    107e:	9c 87       	std	Y+12, r25	; 0x0c
    1080:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    1082:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	9a 87       	std	Y+10, r25	; 0x0a
    108c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108e:	89 85       	ldd	r24, Y+9	; 0x09
    1090:	9a 85       	ldd	r25, Y+10	; 0x0a
    1092:	89 2b       	or	r24, r25
    1094:	61 f7       	brne	.-40     	; 0x106e <LCD_WriteChar+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
    1096:	1d c0       	rjmp	.+58     	; 0x10d2 <LCD_WriteChar+0x298>
	}
	else
		__ticks = (uint16_t)__tmp;
    1098:	6d 81       	ldd	r22, Y+5	; 0x05
    109a:	7e 81       	ldd	r23, Y+6	; 0x06
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__fixunssfsi>
    10a4:	26 96       	adiw	r28, 0x06	; 6
    10a6:	6c af       	std	Y+60, r22	; 0x3c
    10a8:	7d af       	std	Y+61, r23	; 0x3d
    10aa:	8e af       	std	Y+62, r24	; 0x3e
    10ac:	9f af       	std	Y+63, r25	; 0x3f
    10ae:	26 97       	sbiw	r28, 0x06	; 6
    10b0:	24 96       	adiw	r28, 0x04	; 4
    10b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    10b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    10b6:	24 97       	sbiw	r28, 0x04	; 4
    10b8:	9a 87       	std	Y+10, r25	; 0x0a
    10ba:	89 87       	std	Y+9, r24	; 0x09
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	9e 87       	std	Y+14, r25	; 0x0e
    10c2:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <LCD_WriteChar+0x28e>
    10cc:	9e 87       	std	Y+14, r25	; 0x0e
    10ce:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
    10d0:	00 00       	nop
		#endif

		_delay_ms(5);


}
    10d2:	00 00       	nop
    10d4:	cb 5b       	subi	r28, 0xBB	; 187
    10d6:	df 4f       	sbci	r29, 0xFF	; 255
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <LCD_WriteString>:

void LCD_WriteString(uint8 *str)
{
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <LCD_WriteString+0x6>
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9b 83       	std	Y+3, r25	; 0x03
    10f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    10f8:	19 82       	std	Y+1, r1	; 0x01
	while(str[counter] != '\0')
    10fa:	0e c0       	rjmp	.+28     	; 0x1118 <LCD_WriteString+0x30>
	{
		LCD_WriteChar(str[counter]);
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	2a 81       	ldd	r18, Y+2	; 0x02
    1104:	3b 81       	ldd	r19, Y+3	; 0x03
    1106:	82 0f       	add	r24, r18
    1108:	93 1f       	adc	r25, r19
    110a:	fc 01       	movw	r30, r24
    110c:	80 81       	ld	r24, Z
    110e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_WriteChar>
		counter++;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_WriteString(uint8 *str)
{
	uint8 counter=0;
	while(str[counter] != '\0')
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	2a 81       	ldd	r18, Y+2	; 0x02
    1120:	3b 81       	ldd	r19, Y+3	; 0x03
    1122:	82 0f       	add	r24, r18
    1124:	93 1f       	adc	r25, r19
    1126:	fc 01       	movw	r30, r24
    1128:	80 81       	ld	r24, Z
    112a:	88 23       	and	r24, r24
    112c:	39 f7       	brne	.-50     	; 0x10fc <LCD_WriteString+0x14>
	{
		LCD_WriteChar(str[counter]);
		counter++;
	}

}
    112e:	00 00       	nop
    1130:	00 00       	nop
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <LCD_Goto>:

void LCD_Goto (uint8 row, uint8 col)
{
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	00 d0       	rcall	.+0      	; 0x1144 <LCD_Goto+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <LCD_Goto+0x8>
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	8b 83       	std	Y+3, r24	; 0x03
    114c:	6c 83       	std	Y+4, r22	; 0x04
	uint8 postion[2]={0x80,0xC0};
    114e:	80 e8       	ldi	r24, 0x80	; 128
    1150:	90 ec       	ldi	r25, 0xC0	; 192
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
	LCD_WriteCommand(postion[row]+col);
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9e 01       	movw	r18, r28
    115e:	2f 5f       	subi	r18, 0xFF	; 255
    1160:	3f 4f       	sbci	r19, 0xFF	; 255
    1162:	82 0f       	add	r24, r18
    1164:	93 1f       	adc	r25, r19
    1166:	fc 01       	movw	r30, r24
    1168:	90 81       	ld	r25, Z
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	89 0f       	add	r24, r25
    116e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>

}
    1172:	00 00       	nop
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <LCD_Clear>:

void LCD_Clear(void)
{
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(0x01); /*clear lcd command*/
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
}
    1190:	00 00       	nop
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <LCD_WriteInterger>:

void LCD_WriteInterger(sint32 intgr)
{
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	a0 97       	sbiw	r28, 0x20	; 32
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	6d 83       	std	Y+5, r22	; 0x05
    11ba:	7e 83       	std	Y+6, r23	; 0x06
    11bc:	8f 83       	std	Y+7, r24	; 0x07
    11be:	98 87       	std	Y+8, r25	; 0x08
	sint32 y=1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	a0 e0       	ldi	r26, 0x00	; 0
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	ab 83       	std	Y+3, r26	; 0x03
    11ce:	bc 83       	std	Y+4, r27	; 0x04

		if(intgr < 0)
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	af 81       	ldd	r26, Y+7	; 0x07
    11d6:	b8 85       	ldd	r27, Y+8	; 0x08
    11d8:	bb 23       	and	r27, r27
    11da:	0c f0       	brlt	.+2      	; 0x11de <LCD_WriteInterger+0x46>
    11dc:	69 c0       	rjmp	.+210    	; 0x12b0 <LCD_WriteInterger+0x118>
		{
			LCD_WriteChar('-');
    11de:	8d e2       	ldi	r24, 0x2D	; 45
    11e0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_WriteChar>
			intgr *= -1;
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	af 81       	ldd	r26, Y+7	; 0x07
    11ea:	b8 85       	ldd	r27, Y+8	; 0x08
    11ec:	b0 95       	com	r27
    11ee:	a0 95       	com	r26
    11f0:	90 95       	com	r25
    11f2:	81 95       	neg	r24
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	af 4f       	sbci	r26, 0xFF	; 255
    11f8:	bf 4f       	sbci	r27, 0xFF	; 255
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    11fc:	9e 83       	std	Y+6, r25	; 0x06
    11fe:	af 83       	std	Y+7, r26	; 0x07
    1200:	b8 87       	std	Y+8, r27	; 0x08
		}

		while (intgr > 0)
    1202:	56 c0       	rjmp	.+172    	; 0x12b0 <LCD_WriteInterger+0x118>
		{
			y = ((y*10) + (intgr%10));
    1204:	49 81       	ldd	r20, Y+1	; 0x01
    1206:	5a 81       	ldd	r21, Y+2	; 0x02
    1208:	6b 81       	ldd	r22, Y+3	; 0x03
    120a:	7c 81       	ldd	r23, Y+4	; 0x04
    120c:	db 01       	movw	r26, r22
    120e:	ca 01       	movw	r24, r20
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	aa 1f       	adc	r26, r26
    1216:	bb 1f       	adc	r27, r27
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	aa 1f       	adc	r26, r26
    121e:	bb 1f       	adc	r27, r27
    1220:	84 0f       	add	r24, r20
    1222:	95 1f       	adc	r25, r21
    1224:	a6 1f       	adc	r26, r22
    1226:	b7 1f       	adc	r27, r23
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	aa 1f       	adc	r26, r26
    122e:	bb 1f       	adc	r27, r27
    1230:	6c 01       	movw	r12, r24
    1232:	7d 01       	movw	r14, r26
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	af 81       	ldd	r26, Y+7	; 0x07
    123a:	b8 85       	ldd	r27, Y+8	; 0x08
    123c:	89 87       	std	Y+9, r24	; 0x09
    123e:	9a 87       	std	Y+10, r25	; 0x0a
    1240:	ab 87       	std	Y+11, r26	; 0x0b
    1242:	bc 87       	std	Y+12, r27	; 0x0c
    1244:	0a e0       	ldi	r16, 0x0A	; 10
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	69 85       	ldd	r22, Y+9	; 0x09
    124e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1250:	8b 85       	ldd	r24, Y+11	; 0x0b
    1252:	9c 85       	ldd	r25, Y+12	; 0x0c
    1254:	a9 01       	movw	r20, r18
    1256:	98 01       	movw	r18, r16
    1258:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divmodsi4>
    125c:	6d 87       	std	Y+13, r22	; 0x0d
    125e:	7e 87       	std	Y+14, r23	; 0x0e
    1260:	8f 87       	std	Y+15, r24	; 0x0f
    1262:	98 8b       	std	Y+16, r25	; 0x10
    1264:	8d 85       	ldd	r24, Y+13	; 0x0d
    1266:	9e 85       	ldd	r25, Y+14	; 0x0e
    1268:	af 85       	ldd	r26, Y+15	; 0x0f
    126a:	b8 89       	ldd	r27, Y+16	; 0x10
    126c:	8c 0d       	add	r24, r12
    126e:	9d 1d       	adc	r25, r13
    1270:	ae 1d       	adc	r26, r14
    1272:	bf 1d       	adc	r27, r15
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	ab 83       	std	Y+3, r26	; 0x03
    127a:	bc 83       	std	Y+4, r27	; 0x04
			intgr /=10;
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	9e 81       	ldd	r25, Y+6	; 0x06
    1280:	af 81       	ldd	r26, Y+7	; 0x07
    1282:	b8 85       	ldd	r27, Y+8	; 0x08
    1284:	89 8b       	std	Y+17, r24	; 0x11
    1286:	9a 8b       	std	Y+18, r25	; 0x12
    1288:	ab 8b       	std	Y+19, r26	; 0x13
    128a:	bc 8b       	std	Y+20, r27	; 0x14
    128c:	0a e0       	ldi	r16, 0x0A	; 10
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	69 89       	ldd	r22, Y+17	; 0x11
    1296:	7a 89       	ldd	r23, Y+18	; 0x12
    1298:	8b 89       	ldd	r24, Y+19	; 0x13
    129a:	9c 89       	ldd	r25, Y+20	; 0x14
    129c:	a9 01       	movw	r20, r18
    129e:	98 01       	movw	r18, r16
    12a0:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divmodsi4>
    12a4:	da 01       	movw	r26, r20
    12a6:	c9 01       	movw	r24, r18
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	af 83       	std	Y+7, r26	; 0x07
    12ae:	b8 87       	std	Y+8, r27	; 0x08
		{
			LCD_WriteChar('-');
			intgr *= -1;
		}

		while (intgr > 0)
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	af 81       	ldd	r26, Y+7	; 0x07
    12b6:	b8 85       	ldd	r27, Y+8	; 0x08
    12b8:	18 16       	cp	r1, r24
    12ba:	19 06       	cpc	r1, r25
    12bc:	1a 06       	cpc	r1, r26
    12be:	1b 06       	cpc	r1, r27
    12c0:	0c f4       	brge	.+2      	; 0x12c4 <LCD_WriteInterger+0x12c>
    12c2:	a0 cf       	rjmp	.-192    	; 0x1204 <LCD_WriteInterger+0x6c>
		{
			y = ((y*10) + (intgr%10));
			intgr /=10;
		}

		while (y>1)
    12c4:	39 c0       	rjmp	.+114    	; 0x1338 <LCD_WriteInterger+0x1a0>
		{
			LCD_WriteChar((y%10)+48);
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	ab 81       	ldd	r26, Y+3	; 0x03
    12cc:	bc 81       	ldd	r27, Y+4	; 0x04
    12ce:	8d 8b       	std	Y+21, r24	; 0x15
    12d0:	9e 8b       	std	Y+22, r25	; 0x16
    12d2:	af 8b       	std	Y+23, r26	; 0x17
    12d4:	b8 8f       	std	Y+24, r27	; 0x18
    12d6:	0a e0       	ldi	r16, 0x0A	; 10
    12d8:	10 e0       	ldi	r17, 0x00	; 0
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	6d 89       	ldd	r22, Y+21	; 0x15
    12e0:	7e 89       	ldd	r23, Y+22	; 0x16
    12e2:	8f 89       	ldd	r24, Y+23	; 0x17
    12e4:	98 8d       	ldd	r25, Y+24	; 0x18
    12e6:	a9 01       	movw	r20, r18
    12e8:	98 01       	movw	r18, r16
    12ea:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divmodsi4>
    12ee:	69 8f       	std	Y+25, r22	; 0x19
    12f0:	7a 8f       	std	Y+26, r23	; 0x1a
    12f2:	8b 8f       	std	Y+27, r24	; 0x1b
    12f4:	9c 8f       	std	Y+28, r25	; 0x1c
    12f6:	89 8d       	ldd	r24, Y+25	; 0x19
    12f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12fa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    12fc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    12fe:	80 5d       	subi	r24, 0xD0	; 208
    1300:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_WriteChar>
			y/=10;
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	9a 81       	ldd	r25, Y+2	; 0x02
    1308:	ab 81       	ldd	r26, Y+3	; 0x03
    130a:	bc 81       	ldd	r27, Y+4	; 0x04
    130c:	8d 8f       	std	Y+29, r24	; 0x1d
    130e:	9e 8f       	std	Y+30, r25	; 0x1e
    1310:	af 8f       	std	Y+31, r26	; 0x1f
    1312:	b8 a3       	std	Y+32, r27	; 0x20
    1314:	0a e0       	ldi	r16, 0x0A	; 10
    1316:	10 e0       	ldi	r17, 0x00	; 0
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    131e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1320:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1322:	98 a1       	ldd	r25, Y+32	; 0x20
    1324:	a9 01       	movw	r20, r18
    1326:	98 01       	movw	r18, r16
    1328:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divmodsi4>
    132c:	da 01       	movw	r26, r20
    132e:	c9 01       	movw	r24, r18
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	ab 83       	std	Y+3, r26	; 0x03
    1336:	bc 83       	std	Y+4, r27	; 0x04
		{
			y = ((y*10) + (intgr%10));
			intgr /=10;
		}

		while (y>1)
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	9a 81       	ldd	r25, Y+2	; 0x02
    133c:	ab 81       	ldd	r26, Y+3	; 0x03
    133e:	bc 81       	ldd	r27, Y+4	; 0x04
    1340:	02 97       	sbiw	r24, 0x02	; 2
    1342:	a1 05       	cpc	r26, r1
    1344:	b1 05       	cpc	r27, r1
    1346:	0c f0       	brlt	.+2      	; 0x134a <LCD_WriteInterger+0x1b2>
    1348:	be cf       	rjmp	.-132    	; 0x12c6 <LCD_WriteInterger+0x12e>
		{
			LCD_WriteChar((y%10)+48);
			y/=10;
		}
}
    134a:	00 00       	nop
    134c:	00 00       	nop
    134e:	a0 96       	adiw	r28, 0x20	; 32
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	df 91       	pop	r29
    135c:	cf 91       	pop	r28
    135e:	1f 91       	pop	r17
    1360:	0f 91       	pop	r16
    1362:	ff 90       	pop	r15
    1364:	ef 90       	pop	r14
    1366:	df 90       	pop	r13
    1368:	cf 90       	pop	r12
    136a:	08 95       	ret

0000136c <LCD_StoreCustomChar>:

void LCD_StoreCustomChar (uint8* pattern ,uint8 CGRAM_index)
{
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	00 d0       	rcall	.+0      	; 0x1372 <LCD_StoreCustomChar+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <LCD_StoreCustomChar+0x8>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	9c 83       	std	Y+4, r25	; 0x04
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	6d 83       	std	Y+5, r22	; 0x05

	uint8 address;
	uint8 index;

	if (CGRAM_index < 8)
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	88 30       	cpi	r24, 0x08	; 8
    1384:	f0 f4       	brcc	.+60     	; 0x13c2 <LCD_StoreCustomChar+0x56>
	{
	address = CGRAM_index *8;
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	88 0f       	add	r24, r24
    138a:	88 0f       	add	r24, r24
    138c:	88 0f       	add	r24, r24
    138e:	8a 83       	std	Y+2, r24	; 0x02

	address = SET_BIT(address,6);
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	8a 83       	std	Y+2, r24	; 0x02
	LCD_WriteCommand(address);
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
	for(index=0 ; index <8 ;index++)
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <LCD_StoreCustomChar+0x50>
	{
	LCD_WriteChar(pattern[index]);
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	fc 01       	movw	r30, r24
    13b0:	80 81       	ld	r24, Z
    13b2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_WriteChar>
	{
	address = CGRAM_index *8;

	address = SET_BIT(address,6);
	LCD_WriteCommand(address);
	for(index=0 ; index <8 ;index++)
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	88 30       	cpi	r24, 0x08	; 8
    13c0:	78 f3       	brcs	.-34     	; 0x13a0 <LCD_StoreCustomChar+0x34>
	{
	LCD_WriteChar(pattern[index]);
	}
	}
	LCD_WriteCommand(0x02);
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_WriteCommand>
}
    13c8:	00 00       	nop
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <LCD_PrintCustomChar>:

void LCD_PrintCustomChar (uint8 CGRAM_index,uint8 row, uint8 col)
{
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <LCD_PrintCustomChar+0x6>
    13e0:	0f 92       	push	r0
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	6a 83       	std	Y+2, r22	; 0x02
    13ea:	4b 83       	std	Y+3, r20	; 0x03
LCD_Goto(row,col);
    13ec:	6b 81       	ldd	r22, Y+3	; 0x03
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	0e 94 9f 08 	call	0x113e	; 0x113e <LCD_Goto>
LCD_WriteChar(CGRAM_index);
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_WriteChar>

}
    13fa:	00 00       	nop
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <main>:

#include"DIO_Interface.h"
#include"LCD_Interface.h"

void main()
{
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    DIO_SetPortDir(DIO_PORTA,DIO_PORT_OUTPUT);
    1410:	6f ef       	ldi	r22, 0xFF	; 255
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPortDir>
    DIO_SetPortDir(DIO_PORTB,DIO_PORT_OUTPUT);
    1418:	6f ef       	ldi	r22, 0xFF	; 255
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPortDir>

	void LCD_Init(void);
	LCD_WriteChar('1');
    1420:	81 e3       	ldi	r24, 0x31	; 49
    1422:	0e 94 1d 07 	call	0xe3a	; 0xe3a <LCD_WriteChar>
	while(1)
    1426:	ff cf       	rjmp	.-2      	; 0x1426 <main+0x1e>

00001428 <__divmodsi4>:
    1428:	05 2e       	mov	r0, r21
    142a:	97 fb       	bst	r25, 7
    142c:	1e f4       	brtc	.+6      	; 0x1434 <__divmodsi4+0xc>
    142e:	00 94       	com	r0
    1430:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__negsi2>
    1434:	57 fd       	sbrc	r21, 7
    1436:	07 d0       	rcall	.+14     	; 0x1446 <__divmodsi4_neg2>
    1438:	0e 94 33 0a 	call	0x1466	; 0x1466 <__udivmodsi4>
    143c:	07 fc       	sbrc	r0, 7
    143e:	03 d0       	rcall	.+6      	; 0x1446 <__divmodsi4_neg2>
    1440:	4e f4       	brtc	.+18     	; 0x1454 <__divmodsi4_exit>
    1442:	0c 94 2b 0a 	jmp	0x1456	; 0x1456 <__negsi2>

00001446 <__divmodsi4_neg2>:
    1446:	50 95       	com	r21
    1448:	40 95       	com	r20
    144a:	30 95       	com	r19
    144c:	21 95       	neg	r18
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	4f 4f       	sbci	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255

00001454 <__divmodsi4_exit>:
    1454:	08 95       	ret

00001456 <__negsi2>:
    1456:	90 95       	com	r25
    1458:	80 95       	com	r24
    145a:	70 95       	com	r23
    145c:	61 95       	neg	r22
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	08 95       	ret

00001466 <__udivmodsi4>:
    1466:	a1 e2       	ldi	r26, 0x21	; 33
    1468:	1a 2e       	mov	r1, r26
    146a:	aa 1b       	sub	r26, r26
    146c:	bb 1b       	sub	r27, r27
    146e:	fd 01       	movw	r30, r26
    1470:	0d c0       	rjmp	.+26     	; 0x148c <__udivmodsi4_ep>

00001472 <__udivmodsi4_loop>:
    1472:	aa 1f       	adc	r26, r26
    1474:	bb 1f       	adc	r27, r27
    1476:	ee 1f       	adc	r30, r30
    1478:	ff 1f       	adc	r31, r31
    147a:	a2 17       	cp	r26, r18
    147c:	b3 07       	cpc	r27, r19
    147e:	e4 07       	cpc	r30, r20
    1480:	f5 07       	cpc	r31, r21
    1482:	20 f0       	brcs	.+8      	; 0x148c <__udivmodsi4_ep>
    1484:	a2 1b       	sub	r26, r18
    1486:	b3 0b       	sbc	r27, r19
    1488:	e4 0b       	sbc	r30, r20
    148a:	f5 0b       	sbc	r31, r21

0000148c <__udivmodsi4_ep>:
    148c:	66 1f       	adc	r22, r22
    148e:	77 1f       	adc	r23, r23
    1490:	88 1f       	adc	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	1a 94       	dec	r1
    1496:	69 f7       	brne	.-38     	; 0x1472 <__udivmodsi4_loop>
    1498:	60 95       	com	r22
    149a:	70 95       	com	r23
    149c:	80 95       	com	r24
    149e:	90 95       	com	r25
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
    14a4:	bd 01       	movw	r22, r26
    14a6:	cf 01       	movw	r24, r30
    14a8:	08 95       	ret

000014aa <__cmpsf2>:
    14aa:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_cmp>
    14ae:	08 f4       	brcc	.+2      	; 0x14b2 <__cmpsf2+0x8>
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	08 95       	ret

000014b4 <__fixunssfsi>:
    14b4:	0e 94 b5 0a 	call	0x156a	; 0x156a <__fp_splitA>
    14b8:	88 f0       	brcs	.+34     	; 0x14dc <__fixunssfsi+0x28>
    14ba:	9f 57       	subi	r25, 0x7F	; 127
    14bc:	98 f0       	brcs	.+38     	; 0x14e4 <__fixunssfsi+0x30>
    14be:	b9 2f       	mov	r27, r25
    14c0:	99 27       	eor	r25, r25
    14c2:	b7 51       	subi	r27, 0x17	; 23
    14c4:	b0 f0       	brcs	.+44     	; 0x14f2 <__fixunssfsi+0x3e>
    14c6:	e1 f0       	breq	.+56     	; 0x1500 <__fixunssfsi+0x4c>
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	1a f0       	brmi	.+6      	; 0x14d8 <__fixunssfsi+0x24>
    14d2:	ba 95       	dec	r27
    14d4:	c9 f7       	brne	.-14     	; 0x14c8 <__fixunssfsi+0x14>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <__fixunssfsi+0x4c>
    14d8:	b1 30       	cpi	r27, 0x01	; 1
    14da:	91 f0       	breq	.+36     	; 0x1500 <__fixunssfsi+0x4c>
    14dc:	0e 94 cf 0a 	call	0x159e	; 0x159e <__fp_zero>
    14e0:	b1 e0       	ldi	r27, 0x01	; 1
    14e2:	08 95       	ret
    14e4:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__fp_zero>
    14e8:	67 2f       	mov	r22, r23
    14ea:	78 2f       	mov	r23, r24
    14ec:	88 27       	eor	r24, r24
    14ee:	b8 5f       	subi	r27, 0xF8	; 248
    14f0:	39 f0       	breq	.+14     	; 0x1500 <__fixunssfsi+0x4c>
    14f2:	b9 3f       	cpi	r27, 0xF9	; 249
    14f4:	cc f3       	brlt	.-14     	; 0x14e8 <__fixunssfsi+0x34>
    14f6:	86 95       	lsr	r24
    14f8:	77 95       	ror	r23
    14fa:	67 95       	ror	r22
    14fc:	b3 95       	inc	r27
    14fe:	d9 f7       	brne	.-10     	; 0x14f6 <__fixunssfsi+0x42>
    1500:	3e f4       	brtc	.+14     	; 0x1510 <__fixunssfsi+0x5c>
    1502:	90 95       	com	r25
    1504:	80 95       	com	r24
    1506:	70 95       	com	r23
    1508:	61 95       	neg	r22
    150a:	7f 4f       	sbci	r23, 0xFF	; 255
    150c:	8f 4f       	sbci	r24, 0xFF	; 255
    150e:	9f 4f       	sbci	r25, 0xFF	; 255
    1510:	08 95       	ret

00001512 <__fp_cmp>:
    1512:	99 0f       	add	r25, r25
    1514:	00 08       	sbc	r0, r0
    1516:	55 0f       	add	r21, r21
    1518:	aa 0b       	sbc	r26, r26
    151a:	e0 e8       	ldi	r30, 0x80	; 128
    151c:	fe ef       	ldi	r31, 0xFE	; 254
    151e:	16 16       	cp	r1, r22
    1520:	17 06       	cpc	r1, r23
    1522:	e8 07       	cpc	r30, r24
    1524:	f9 07       	cpc	r31, r25
    1526:	c0 f0       	brcs	.+48     	; 0x1558 <__fp_cmp+0x46>
    1528:	12 16       	cp	r1, r18
    152a:	13 06       	cpc	r1, r19
    152c:	e4 07       	cpc	r30, r20
    152e:	f5 07       	cpc	r31, r21
    1530:	98 f0       	brcs	.+38     	; 0x1558 <__fp_cmp+0x46>
    1532:	62 1b       	sub	r22, r18
    1534:	73 0b       	sbc	r23, r19
    1536:	84 0b       	sbc	r24, r20
    1538:	95 0b       	sbc	r25, r21
    153a:	39 f4       	brne	.+14     	; 0x154a <__fp_cmp+0x38>
    153c:	0a 26       	eor	r0, r26
    153e:	61 f0       	breq	.+24     	; 0x1558 <__fp_cmp+0x46>
    1540:	23 2b       	or	r18, r19
    1542:	24 2b       	or	r18, r20
    1544:	25 2b       	or	r18, r21
    1546:	21 f4       	brne	.+8      	; 0x1550 <__fp_cmp+0x3e>
    1548:	08 95       	ret
    154a:	0a 26       	eor	r0, r26
    154c:	09 f4       	brne	.+2      	; 0x1550 <__fp_cmp+0x3e>
    154e:	a1 40       	sbci	r26, 0x01	; 1
    1550:	a6 95       	lsr	r26
    1552:	8f ef       	ldi	r24, 0xFF	; 255
    1554:	81 1d       	adc	r24, r1
    1556:	81 1d       	adc	r24, r1
    1558:	08 95       	ret

0000155a <__fp_split3>:
    155a:	57 fd       	sbrc	r21, 7
    155c:	90 58       	subi	r25, 0x80	; 128
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	59 f0       	breq	.+22     	; 0x157a <__fp_splitA+0x10>
    1564:	5f 3f       	cpi	r21, 0xFF	; 255
    1566:	71 f0       	breq	.+28     	; 0x1584 <__fp_splitA+0x1a>
    1568:	47 95       	ror	r20

0000156a <__fp_splitA>:
    156a:	88 0f       	add	r24, r24
    156c:	97 fb       	bst	r25, 7
    156e:	99 1f       	adc	r25, r25
    1570:	61 f0       	breq	.+24     	; 0x158a <__fp_splitA+0x20>
    1572:	9f 3f       	cpi	r25, 0xFF	; 255
    1574:	79 f0       	breq	.+30     	; 0x1594 <__fp_splitA+0x2a>
    1576:	87 95       	ror	r24
    1578:	08 95       	ret
    157a:	12 16       	cp	r1, r18
    157c:	13 06       	cpc	r1, r19
    157e:	14 06       	cpc	r1, r20
    1580:	55 1f       	adc	r21, r21
    1582:	f2 cf       	rjmp	.-28     	; 0x1568 <__fp_split3+0xe>
    1584:	46 95       	lsr	r20
    1586:	f1 df       	rcall	.-30     	; 0x156a <__fp_splitA>
    1588:	08 c0       	rjmp	.+16     	; 0x159a <__fp_splitA+0x30>
    158a:	16 16       	cp	r1, r22
    158c:	17 06       	cpc	r1, r23
    158e:	18 06       	cpc	r1, r24
    1590:	99 1f       	adc	r25, r25
    1592:	f1 cf       	rjmp	.-30     	; 0x1576 <__fp_splitA+0xc>
    1594:	86 95       	lsr	r24
    1596:	71 05       	cpc	r23, r1
    1598:	61 05       	cpc	r22, r1
    159a:	08 94       	sec
    159c:	08 95       	ret

0000159e <__fp_zero>:
    159e:	e8 94       	clt

000015a0 <__fp_szero>:
    15a0:	bb 27       	eor	r27, r27
    15a2:	66 27       	eor	r22, r22
    15a4:	77 27       	eor	r23, r23
    15a6:	cb 01       	movw	r24, r22
    15a8:	97 f9       	bld	r25, 7
    15aa:	08 95       	ret

000015ac <__gesf2>:
    15ac:	0e 94 89 0a 	call	0x1512	; 0x1512 <__fp_cmp>
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <__gesf2+0x8>
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	08 95       	ret

000015b6 <__mulsf3>:
    15b6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__mulsf3x>
    15ba:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__fp_round>
    15be:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__fp_pscA>
    15c2:	38 f0       	brcs	.+14     	; 0x15d2 <__mulsf3+0x1c>
    15c4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__fp_pscB>
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <__mulsf3+0x1c>
    15ca:	95 23       	and	r25, r21
    15cc:	11 f0       	breq	.+4      	; 0x15d2 <__mulsf3+0x1c>
    15ce:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_inf>
    15d2:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__fp_nan>
    15d6:	11 24       	eor	r1, r1
    15d8:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_szero>

000015dc <__mulsf3x>:
    15dc:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_split3>
    15e0:	70 f3       	brcs	.-36     	; 0x15be <__mulsf3+0x8>

000015e2 <__mulsf3_pse>:
    15e2:	95 9f       	mul	r25, r21
    15e4:	c1 f3       	breq	.-16     	; 0x15d6 <__mulsf3+0x20>
    15e6:	95 0f       	add	r25, r21
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	55 1f       	adc	r21, r21
    15ec:	62 9f       	mul	r22, r18
    15ee:	f0 01       	movw	r30, r0
    15f0:	72 9f       	mul	r23, r18
    15f2:	bb 27       	eor	r27, r27
    15f4:	f0 0d       	add	r31, r0
    15f6:	b1 1d       	adc	r27, r1
    15f8:	63 9f       	mul	r22, r19
    15fa:	aa 27       	eor	r26, r26
    15fc:	f0 0d       	add	r31, r0
    15fe:	b1 1d       	adc	r27, r1
    1600:	aa 1f       	adc	r26, r26
    1602:	64 9f       	mul	r22, r20
    1604:	66 27       	eor	r22, r22
    1606:	b0 0d       	add	r27, r0
    1608:	a1 1d       	adc	r26, r1
    160a:	66 1f       	adc	r22, r22
    160c:	82 9f       	mul	r24, r18
    160e:	22 27       	eor	r18, r18
    1610:	b0 0d       	add	r27, r0
    1612:	a1 1d       	adc	r26, r1
    1614:	62 1f       	adc	r22, r18
    1616:	73 9f       	mul	r23, r19
    1618:	b0 0d       	add	r27, r0
    161a:	a1 1d       	adc	r26, r1
    161c:	62 1f       	adc	r22, r18
    161e:	83 9f       	mul	r24, r19
    1620:	a0 0d       	add	r26, r0
    1622:	61 1d       	adc	r22, r1
    1624:	22 1f       	adc	r18, r18
    1626:	74 9f       	mul	r23, r20
    1628:	33 27       	eor	r19, r19
    162a:	a0 0d       	add	r26, r0
    162c:	61 1d       	adc	r22, r1
    162e:	23 1f       	adc	r18, r19
    1630:	84 9f       	mul	r24, r20
    1632:	60 0d       	add	r22, r0
    1634:	21 1d       	adc	r18, r1
    1636:	82 2f       	mov	r24, r18
    1638:	76 2f       	mov	r23, r22
    163a:	6a 2f       	mov	r22, r26
    163c:	11 24       	eor	r1, r1
    163e:	9f 57       	subi	r25, 0x7F	; 127
    1640:	50 40       	sbci	r21, 0x00	; 0
    1642:	9a f0       	brmi	.+38     	; 0x166a <__mulsf3_pse+0x88>
    1644:	f1 f0       	breq	.+60     	; 0x1682 <__mulsf3_pse+0xa0>
    1646:	88 23       	and	r24, r24
    1648:	4a f0       	brmi	.+18     	; 0x165c <__mulsf3_pse+0x7a>
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	bb 1f       	adc	r27, r27
    1650:	66 1f       	adc	r22, r22
    1652:	77 1f       	adc	r23, r23
    1654:	88 1f       	adc	r24, r24
    1656:	91 50       	subi	r25, 0x01	; 1
    1658:	50 40       	sbci	r21, 0x00	; 0
    165a:	a9 f7       	brne	.-22     	; 0x1646 <__mulsf3_pse+0x64>
    165c:	9e 3f       	cpi	r25, 0xFE	; 254
    165e:	51 05       	cpc	r21, r1
    1660:	80 f0       	brcs	.+32     	; 0x1682 <__mulsf3_pse+0xa0>
    1662:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__fp_inf>
    1666:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__fp_szero>
    166a:	5f 3f       	cpi	r21, 0xFF	; 255
    166c:	e4 f3       	brlt	.-8      	; 0x1666 <__mulsf3_pse+0x84>
    166e:	98 3e       	cpi	r25, 0xE8	; 232
    1670:	d4 f3       	brlt	.-12     	; 0x1666 <__mulsf3_pse+0x84>
    1672:	86 95       	lsr	r24
    1674:	77 95       	ror	r23
    1676:	67 95       	ror	r22
    1678:	b7 95       	ror	r27
    167a:	f7 95       	ror	r31
    167c:	e7 95       	ror	r30
    167e:	9f 5f       	subi	r25, 0xFF	; 255
    1680:	c1 f7       	brne	.-16     	; 0x1672 <__mulsf3_pse+0x90>
    1682:	fe 2b       	or	r31, r30
    1684:	88 0f       	add	r24, r24
    1686:	91 1d       	adc	r25, r1
    1688:	96 95       	lsr	r25
    168a:	87 95       	ror	r24
    168c:	97 f9       	bld	r25, 7
    168e:	08 95       	ret

00001690 <__fp_inf>:
    1690:	97 f9       	bld	r25, 7
    1692:	9f 67       	ori	r25, 0x7F	; 127
    1694:	80 e8       	ldi	r24, 0x80	; 128
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	08 95       	ret

0000169c <__fp_nan>:
    169c:	9f ef       	ldi	r25, 0xFF	; 255
    169e:	80 ec       	ldi	r24, 0xC0	; 192
    16a0:	08 95       	ret

000016a2 <__fp_pscA>:
    16a2:	00 24       	eor	r0, r0
    16a4:	0a 94       	dec	r0
    16a6:	16 16       	cp	r1, r22
    16a8:	17 06       	cpc	r1, r23
    16aa:	18 06       	cpc	r1, r24
    16ac:	09 06       	cpc	r0, r25
    16ae:	08 95       	ret

000016b0 <__fp_pscB>:
    16b0:	00 24       	eor	r0, r0
    16b2:	0a 94       	dec	r0
    16b4:	12 16       	cp	r1, r18
    16b6:	13 06       	cpc	r1, r19
    16b8:	14 06       	cpc	r1, r20
    16ba:	05 06       	cpc	r0, r21
    16bc:	08 95       	ret

000016be <__fp_round>:
    16be:	09 2e       	mov	r0, r25
    16c0:	03 94       	inc	r0
    16c2:	00 0c       	add	r0, r0
    16c4:	11 f4       	brne	.+4      	; 0x16ca <__fp_round+0xc>
    16c6:	88 23       	and	r24, r24
    16c8:	52 f0       	brmi	.+20     	; 0x16de <__fp_round+0x20>
    16ca:	bb 0f       	add	r27, r27
    16cc:	40 f4       	brcc	.+16     	; 0x16de <__fp_round+0x20>
    16ce:	bf 2b       	or	r27, r31
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <__fp_round+0x18>
    16d2:	60 ff       	sbrs	r22, 0
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <__fp_round+0x20>
    16d6:	6f 5f       	subi	r22, 0xFF	; 255
    16d8:	7f 4f       	sbci	r23, 0xFF	; 255
    16da:	8f 4f       	sbci	r24, 0xFF	; 255
    16dc:	9f 4f       	sbci	r25, 0xFF	; 255
    16de:	08 95       	ret

000016e0 <_exit>:
    16e0:	f8 94       	cli

000016e2 <__stop_program>:
    16e2:	ff cf       	rjmp	.-2      	; 0x16e2 <__stop_program>
