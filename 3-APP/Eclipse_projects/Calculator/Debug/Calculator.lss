
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000f46  00000fda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  00000ff2  2**0
                  ALLOC
  3 .stab         00001df4  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001157  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003f3f  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000080  00000000  00000000  00003f90  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000057e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004f3  00000000  00000000  0000458e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000002bb  00000000  00000000  00004a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  00004d3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3f 06 	call	0xc7e	; 0xc7e <main>
  8a:	0c 94 a1 07 	jmp	0xf42	; 0xf42 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
#include"CLCD_interface.h"
#include"CLCD_private.h"


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	a3 97       	sbiw	r28, 0x23	; 35
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode == Eight_Bit_Mode

		/*set RS pin to LOW for command*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

		/*set RW pin to Low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

		/*set command  to Data pins*/
		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
  bc:	6f 85       	ldd	r22, Y+15	; 0x0f
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_u8SetPortValue>

		/*set E pin to HIGH for Enable*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b0 e4       	ldi	r27, 0x40	; 64
  d6:	89 83       	std	Y+1, r24	; 0x01
  d8:	9a 83       	std	Y+2, r25	; 0x02
  da:	ab 83       	std	Y+3, r26	; 0x03
  dc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4a ef       	ldi	r20, 0xFA	; 250
  e4:	54 e4       	ldi	r21, 0x44	; 68
  e6:	69 81       	ldd	r22, Y+1	; 0x01
  e8:	7a 81       	ldd	r23, Y+2	; 0x02
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	9c 81       	ldd	r25, Y+4	; 0x04
  ee:	0e 94 0c 07 	call	0xe18	; 0xe18 <__mulsf3>
  f2:	6c 8b       	std	Y+20, r22	; 0x14
  f4:	7d 8b       	std	Y+21, r23	; 0x15
  f6:	8e 8b       	std	Y+22, r24	; 0x16
  f8:	9f 8b       	std	Y+23, r25	; 0x17
  fa:	8c 89       	ldd	r24, Y+20	; 0x14
  fc:	9d 89       	ldd	r25, Y+21	; 0x15
  fe:	ae 89       	ldd	r26, Y+22	; 0x16
 100:	bf 89       	ldd	r27, Y+23	; 0x17
 102:	8d 83       	std	Y+5, r24	; 0x05
 104:	9e 83       	std	Y+6, r25	; 0x06
 106:	af 83       	std	Y+7, r26	; 0x07
 108:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	5f e3       	ldi	r21, 0x3F	; 63
 112:	6d 81       	ldd	r22, Y+5	; 0x05
 114:	7e 81       	ldd	r23, Y+6	; 0x06
 116:	8f 81       	ldd	r24, Y+7	; 0x07
 118:	98 85       	ldd	r25, Y+8	; 0x08
 11a:	0e 94 86 06 	call	0xd0c	; 0xd0c <__cmpsf2>
 11e:	88 23       	and	r24, r24
 120:	2c f4       	brge	.+10     	; 0x12c <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	9a 87       	std	Y+10, r25	; 0x0a
 128:	89 87       	std	Y+9, r24	; 0x09
 12a:	54 c0       	rjmp	.+168    	; 0x1d4 <CLCD_voidSendCommand+0x142>
	else if (__tmp > 65535)
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	3f ef       	ldi	r19, 0xFF	; 255
 130:	4f e7       	ldi	r20, 0x7F	; 127
 132:	57 e4       	ldi	r21, 0x47	; 71
 134:	6d 81       	ldd	r22, Y+5	; 0x05
 136:	7e 81       	ldd	r23, Y+6	; 0x06
 138:	8f 81       	ldd	r24, Y+7	; 0x07
 13a:	98 85       	ldd	r25, Y+8	; 0x08
 13c:	0e 94 07 07 	call	0xe0e	; 0xe0e <__gesf2>
 140:	18 16       	cp	r1, r24
 142:	d4 f5       	brge	.+116    	; 0x1b8 <CLCD_voidSendCommand+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	40 e2       	ldi	r20, 0x20	; 32
 14a:	51 e4       	ldi	r21, 0x41	; 65
 14c:	69 81       	ldd	r22, Y+1	; 0x01
 14e:	7a 81       	ldd	r23, Y+2	; 0x02
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	9c 81       	ldd	r25, Y+4	; 0x04
 154:	0e 94 0c 07 	call	0xe18	; 0xe18 <__mulsf3>
 158:	68 8f       	std	Y+24, r22	; 0x18
 15a:	79 8f       	std	Y+25, r23	; 0x19
 15c:	8a 8f       	std	Y+26, r24	; 0x1a
 15e:	9b 8f       	std	Y+27, r25	; 0x1b
 160:	88 8d       	ldd	r24, Y+24	; 0x18
 162:	99 8d       	ldd	r25, Y+25	; 0x19
 164:	aa 8d       	ldd	r26, Y+26	; 0x1a
 166:	bb 8d       	ldd	r27, Y+27	; 0x1b
 168:	88 8b       	std	Y+16, r24	; 0x10
 16a:	99 8b       	std	Y+17, r25	; 0x11
 16c:	aa 8b       	std	Y+18, r26	; 0x12
 16e:	bb 8b       	std	Y+19, r27	; 0x13
 170:	68 89       	ldd	r22, Y+16	; 0x10
 172:	79 89       	ldd	r23, Y+17	; 0x11
 174:	8a 89       	ldd	r24, Y+18	; 0x12
 176:	9b 89       	ldd	r25, Y+19	; 0x13
 178:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 17c:	6c 8f       	std	Y+28, r22	; 0x1c
 17e:	7d 8f       	std	Y+29, r23	; 0x1d
 180:	8e 8f       	std	Y+30, r24	; 0x1e
 182:	9f 8f       	std	Y+31, r25	; 0x1f
 184:	ac 8d       	ldd	r26, Y+28	; 0x1c
 186:	bd 8d       	ldd	r27, Y+29	; 0x1d
 188:	ba 87       	std	Y+10, r27	; 0x0a
 18a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 18c:	10 c0       	rjmp	.+32     	; 0x1ae <CLCD_voidSendCommand+0x11c>
 18e:	88 ec       	ldi	r24, 0xC8	; 200
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9c 87       	std	Y+12, r25	; 0x0c
 194:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 196:	8b 85       	ldd	r24, Y+11	; 0x0b
 198:	9c 85       	ldd	r25, Y+12	; 0x0c
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <CLCD_voidSendCommand+0x108>
 19e:	9c 87       	std	Y+12, r25	; 0x0c
 1a0:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 1a2:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	89 85       	ldd	r24, Y+9	; 0x09
 1a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	9a 87       	std	Y+10, r25	; 0x0a
 1ac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ae:	89 85       	ldd	r24, Y+9	; 0x09
 1b0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1b2:	89 2b       	or	r24, r25
 1b4:	61 f7       	brne	.-40     	; 0x18e <CLCD_voidSendCommand+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 1b6:	19 c0       	rjmp	.+50     	; 0x1ea <CLCD_voidSendCommand+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
 1b8:	6d 81       	ldd	r22, Y+5	; 0x05
 1ba:	7e 81       	ldd	r23, Y+6	; 0x06
 1bc:	8f 81       	ldd	r24, Y+7	; 0x07
 1be:	98 85       	ldd	r25, Y+8	; 0x08
 1c0:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 1c4:	68 a3       	std	Y+32, r22	; 0x20
 1c6:	79 a3       	std	Y+33, r23	; 0x21
 1c8:	8a a3       	std	Y+34, r24	; 0x22
 1ca:	9b a3       	std	Y+35, r25	; 0x23
 1cc:	88 a1       	ldd	r24, Y+32	; 0x20
 1ce:	99 a1       	ldd	r25, Y+33	; 0x21
 1d0:	9a 87       	std	Y+10, r25	; 0x0a
 1d2:	89 87       	std	Y+9, r24	; 0x09
 1d4:	89 85       	ldd	r24, Y+9	; 0x09
 1d6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d8:	9e 87       	std	Y+14, r25	; 0x0e
 1da:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 1de:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <CLCD_voidSendCommand+0x14e>
 1e4:	9e 87       	std	Y+14, r25	; 0x0e
 1e6:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 1e8:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#else
#error "Wrong CLCD Mode Configurations"
#endif
}
 1f4:	00 00       	nop
 1f6:	a3 96       	adiw	r28, 0x23	; 35
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	a3 97       	sbiw	r28, 0x23	; 35
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode == Eight_Bit_Mode

	/*set RS pin to LOW for Data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

	/*set RW pin to HIGH for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

	/*set data  to Data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
 232:	6f 85       	ldd	r22, Y+15	; 0x0f
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DIO_u8SetPortValue>

	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	a0 e0       	ldi	r26, 0x00	; 0
 24a:	b0 e4       	ldi	r27, 0x40	; 64
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	ab 83       	std	Y+3, r26	; 0x03
 252:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	4a ef       	ldi	r20, 0xFA	; 250
 25a:	54 e4       	ldi	r21, 0x44	; 68
 25c:	69 81       	ldd	r22, Y+1	; 0x01
 25e:	7a 81       	ldd	r23, Y+2	; 0x02
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	9c 81       	ldd	r25, Y+4	; 0x04
 264:	0e 94 0c 07 	call	0xe18	; 0xe18 <__mulsf3>
 268:	6c 8b       	std	Y+20, r22	; 0x14
 26a:	7d 8b       	std	Y+21, r23	; 0x15
 26c:	8e 8b       	std	Y+22, r24	; 0x16
 26e:	9f 8b       	std	Y+23, r25	; 0x17
 270:	8c 89       	ldd	r24, Y+20	; 0x14
 272:	9d 89       	ldd	r25, Y+21	; 0x15
 274:	ae 89       	ldd	r26, Y+22	; 0x16
 276:	bf 89       	ldd	r27, Y+23	; 0x17
 278:	8d 83       	std	Y+5, r24	; 0x05
 27a:	9e 83       	std	Y+6, r25	; 0x06
 27c:	af 83       	std	Y+7, r26	; 0x07
 27e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e8       	ldi	r20, 0x80	; 128
 286:	5f e3       	ldi	r21, 0x3F	; 63
 288:	6d 81       	ldd	r22, Y+5	; 0x05
 28a:	7e 81       	ldd	r23, Y+6	; 0x06
 28c:	8f 81       	ldd	r24, Y+7	; 0x07
 28e:	98 85       	ldd	r25, Y+8	; 0x08
 290:	0e 94 86 06 	call	0xd0c	; 0xd0c <__cmpsf2>
 294:	88 23       	and	r24, r24
 296:	2c f4       	brge	.+10     	; 0x2a2 <CLCD_voidSendData+0x9a>
		__ticks = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	9a 87       	std	Y+10, r25	; 0x0a
 29e:	89 87       	std	Y+9, r24	; 0x09
 2a0:	54 c0       	rjmp	.+168    	; 0x34a <CLCD_voidSendData+0x142>
	else if (__tmp > 65535)
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	3f ef       	ldi	r19, 0xFF	; 255
 2a6:	4f e7       	ldi	r20, 0x7F	; 127
 2a8:	57 e4       	ldi	r21, 0x47	; 71
 2aa:	6d 81       	ldd	r22, Y+5	; 0x05
 2ac:	7e 81       	ldd	r23, Y+6	; 0x06
 2ae:	8f 81       	ldd	r24, Y+7	; 0x07
 2b0:	98 85       	ldd	r25, Y+8	; 0x08
 2b2:	0e 94 07 07 	call	0xe0e	; 0xe0e <__gesf2>
 2b6:	18 16       	cp	r1, r24
 2b8:	d4 f5       	brge	.+116    	; 0x32e <CLCD_voidSendData+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e2       	ldi	r20, 0x20	; 32
 2c0:	51 e4       	ldi	r21, 0x41	; 65
 2c2:	69 81       	ldd	r22, Y+1	; 0x01
 2c4:	7a 81       	ldd	r23, Y+2	; 0x02
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ca:	0e 94 0c 07 	call	0xe18	; 0xe18 <__mulsf3>
 2ce:	68 8f       	std	Y+24, r22	; 0x18
 2d0:	79 8f       	std	Y+25, r23	; 0x19
 2d2:	8a 8f       	std	Y+26, r24	; 0x1a
 2d4:	9b 8f       	std	Y+27, r25	; 0x1b
 2d6:	88 8d       	ldd	r24, Y+24	; 0x18
 2d8:	99 8d       	ldd	r25, Y+25	; 0x19
 2da:	aa 8d       	ldd	r26, Y+26	; 0x1a
 2dc:	bb 8d       	ldd	r27, Y+27	; 0x1b
 2de:	88 8b       	std	Y+16, r24	; 0x10
 2e0:	99 8b       	std	Y+17, r25	; 0x11
 2e2:	aa 8b       	std	Y+18, r26	; 0x12
 2e4:	bb 8b       	std	Y+19, r27	; 0x13
 2e6:	68 89       	ldd	r22, Y+16	; 0x10
 2e8:	79 89       	ldd	r23, Y+17	; 0x11
 2ea:	8a 89       	ldd	r24, Y+18	; 0x12
 2ec:	9b 89       	ldd	r25, Y+19	; 0x13
 2ee:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 2f2:	6c 8f       	std	Y+28, r22	; 0x1c
 2f4:	7d 8f       	std	Y+29, r23	; 0x1d
 2f6:	8e 8f       	std	Y+30, r24	; 0x1e
 2f8:	9f 8f       	std	Y+31, r25	; 0x1f
 2fa:	ac 8d       	ldd	r26, Y+28	; 0x1c
 2fc:	bd 8d       	ldd	r27, Y+29	; 0x1d
 2fe:	ba 87       	std	Y+10, r27	; 0x0a
 300:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 302:	10 c0       	rjmp	.+32     	; 0x324 <CLCD_voidSendData+0x11c>
 304:	88 ec       	ldi	r24, 0xC8	; 200
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	9c 87       	std	Y+12, r25	; 0x0c
 30a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 30c:	8b 85       	ldd	r24, Y+11	; 0x0b
 30e:	9c 85       	ldd	r25, Y+12	; 0x0c
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <CLCD_voidSendData+0x108>
 314:	9c 87       	std	Y+12, r25	; 0x0c
 316:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 318:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 31a:	89 85       	ldd	r24, Y+9	; 0x09
 31c:	9a 85       	ldd	r25, Y+10	; 0x0a
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	9a 87       	std	Y+10, r25	; 0x0a
 322:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 324:	89 85       	ldd	r24, Y+9	; 0x09
 326:	9a 85       	ldd	r25, Y+10	; 0x0a
 328:	89 2b       	or	r24, r25
 32a:	61 f7       	brne	.-40     	; 0x304 <CLCD_voidSendData+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 32c:	19 c0       	rjmp	.+50     	; 0x360 <CLCD_voidSendData+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
 32e:	6d 81       	ldd	r22, Y+5	; 0x05
 330:	7e 81       	ldd	r23, Y+6	; 0x06
 332:	8f 81       	ldd	r24, Y+7	; 0x07
 334:	98 85       	ldd	r25, Y+8	; 0x08
 336:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 33a:	68 a3       	std	Y+32, r22	; 0x20
 33c:	79 a3       	std	Y+33, r23	; 0x21
 33e:	8a a3       	std	Y+34, r24	; 0x22
 340:	9b a3       	std	Y+35, r25	; 0x23
 342:	88 a1       	ldd	r24, Y+32	; 0x20
 344:	99 a1       	ldd	r25, Y+33	; 0x21
 346:	9a 87       	std	Y+10, r25	; 0x0a
 348:	89 87       	std	Y+9, r24	; 0x09
 34a:	89 85       	ldd	r24, Y+9	; 0x09
 34c:	9a 85       	ldd	r25, Y+10	; 0x0a
 34e:	9e 87       	std	Y+14, r25	; 0x0e
 350:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 352:	8d 85       	ldd	r24, Y+13	; 0x0d
 354:	9e 85       	ldd	r25, Y+14	; 0x0e
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <CLCD_voidSendData+0x14e>
 35a:	9e 87       	std	Y+14, r25	; 0x0e
 35c:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 35e:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	62 e0       	ldi	r22, 0x02	; 2
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#endif

}
 36a:	00 00       	nop
 36c:	a3 96       	adiw	r28, 0x23	; 35
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <CLCD_voidInit>:

void CLCD_voidInit(void)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	a2 97       	sbiw	r28, 0x22	; 34
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a0 e2       	ldi	r26, 0x20	; 32
 398:	b2 e4       	ldi	r27, 0x42	; 66
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	9a 83       	std	Y+2, r25	; 0x02
 39e:	ab 83       	std	Y+3, r26	; 0x03
 3a0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	4a ef       	ldi	r20, 0xFA	; 250
 3a8:	54 e4       	ldi	r21, 0x44	; 68
 3aa:	69 81       	ldd	r22, Y+1	; 0x01
 3ac:	7a 81       	ldd	r23, Y+2	; 0x02
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	9c 81       	ldd	r25, Y+4	; 0x04
 3b2:	0e 94 0c 07 	call	0xe18	; 0xe18 <__mulsf3>
 3b6:	6b 8b       	std	Y+19, r22	; 0x13
 3b8:	7c 8b       	std	Y+20, r23	; 0x14
 3ba:	8d 8b       	std	Y+21, r24	; 0x15
 3bc:	9e 8b       	std	Y+22, r25	; 0x16
 3be:	8b 89       	ldd	r24, Y+19	; 0x13
 3c0:	9c 89       	ldd	r25, Y+20	; 0x14
 3c2:	ad 89       	ldd	r26, Y+21	; 0x15
 3c4:	be 89       	ldd	r27, Y+22	; 0x16
 3c6:	8d 83       	std	Y+5, r24	; 0x05
 3c8:	9e 83       	std	Y+6, r25	; 0x06
 3ca:	af 83       	std	Y+7, r26	; 0x07
 3cc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	40 e8       	ldi	r20, 0x80	; 128
 3d4:	5f e3       	ldi	r21, 0x3F	; 63
 3d6:	6d 81       	ldd	r22, Y+5	; 0x05
 3d8:	7e 81       	ldd	r23, Y+6	; 0x06
 3da:	8f 81       	ldd	r24, Y+7	; 0x07
 3dc:	98 85       	ldd	r25, Y+8	; 0x08
 3de:	0e 94 86 06 	call	0xd0c	; 0xd0c <__cmpsf2>
 3e2:	88 23       	and	r24, r24
 3e4:	2c f4       	brge	.+10     	; 0x3f0 <CLCD_voidInit+0x72>
		__ticks = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	9a 87       	std	Y+10, r25	; 0x0a
 3ec:	89 87       	std	Y+9, r24	; 0x09
 3ee:	54 c0       	rjmp	.+168    	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
	else if (__tmp > 65535)
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	3f ef       	ldi	r19, 0xFF	; 255
 3f4:	4f e7       	ldi	r20, 0x7F	; 127
 3f6:	57 e4       	ldi	r21, 0x47	; 71
 3f8:	6d 81       	ldd	r22, Y+5	; 0x05
 3fa:	7e 81       	ldd	r23, Y+6	; 0x06
 3fc:	8f 81       	ldd	r24, Y+7	; 0x07
 3fe:	98 85       	ldd	r25, Y+8	; 0x08
 400:	0e 94 07 07 	call	0xe0e	; 0xe0e <__gesf2>
 404:	18 16       	cp	r1, r24
 406:	d4 f5       	brge	.+116    	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 408:	20 e0       	ldi	r18, 0x00	; 0
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	40 e2       	ldi	r20, 0x20	; 32
 40e:	51 e4       	ldi	r21, 0x41	; 65
 410:	69 81       	ldd	r22, Y+1	; 0x01
 412:	7a 81       	ldd	r23, Y+2	; 0x02
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	9c 81       	ldd	r25, Y+4	; 0x04
 418:	0e 94 0c 07 	call	0xe18	; 0xe18 <__mulsf3>
 41c:	6f 8b       	std	Y+23, r22	; 0x17
 41e:	78 8f       	std	Y+24, r23	; 0x18
 420:	89 8f       	std	Y+25, r24	; 0x19
 422:	9a 8f       	std	Y+26, r25	; 0x1a
 424:	8f 89       	ldd	r24, Y+23	; 0x17
 426:	98 8d       	ldd	r25, Y+24	; 0x18
 428:	a9 8d       	ldd	r26, Y+25	; 0x19
 42a:	ba 8d       	ldd	r27, Y+26	; 0x1a
 42c:	8f 87       	std	Y+15, r24	; 0x0f
 42e:	98 8b       	std	Y+16, r25	; 0x10
 430:	a9 8b       	std	Y+17, r26	; 0x11
 432:	ba 8b       	std	Y+18, r27	; 0x12
 434:	6f 85       	ldd	r22, Y+15	; 0x0f
 436:	78 89       	ldd	r23, Y+16	; 0x10
 438:	89 89       	ldd	r24, Y+17	; 0x11
 43a:	9a 89       	ldd	r25, Y+18	; 0x12
 43c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 440:	6b 8f       	std	Y+27, r22	; 0x1b
 442:	7c 8f       	std	Y+28, r23	; 0x1c
 444:	8d 8f       	std	Y+29, r24	; 0x1d
 446:	9e 8f       	std	Y+30, r25	; 0x1e
 448:	ab 8d       	ldd	r26, Y+27	; 0x1b
 44a:	bc 8d       	ldd	r27, Y+28	; 0x1c
 44c:	ba 87       	std	Y+10, r27	; 0x0a
 44e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 450:	10 c0       	rjmp	.+32     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
 452:	88 ec       	ldi	r24, 0xC8	; 200
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	9c 87       	std	Y+12, r25	; 0x0c
 458:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 45a:	8b 85       	ldd	r24, Y+11	; 0x0b
 45c:	9c 85       	ldd	r25, Y+12	; 0x0c
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 462:	9c 87       	std	Y+12, r25	; 0x0c
 464:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 466:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 468:	89 85       	ldd	r24, Y+9	; 0x09
 46a:	9a 85       	ldd	r25, Y+10	; 0x0a
 46c:	01 97       	sbiw	r24, 0x01	; 1
 46e:	9a 87       	std	Y+10, r25	; 0x0a
 470:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 472:	89 85       	ldd	r24, Y+9	; 0x09
 474:	9a 85       	ldd	r25, Y+10	; 0x0a
 476:	89 2b       	or	r24, r25
 478:	61 f7       	brne	.-40     	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 47a:	19 c0       	rjmp	.+50     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
	}
	else
		__ticks = (uint16_t)__tmp;
 47c:	6d 81       	ldd	r22, Y+5	; 0x05
 47e:	7e 81       	ldd	r23, Y+6	; 0x06
 480:	8f 81       	ldd	r24, Y+7	; 0x07
 482:	98 85       	ldd	r25, Y+8	; 0x08
 484:	0e 94 8b 06 	call	0xd16	; 0xd16 <__fixunssfsi>
 488:	6f 8f       	std	Y+31, r22	; 0x1f
 48a:	78 a3       	std	Y+32, r23	; 0x20
 48c:	89 a3       	std	Y+33, r24	; 0x21
 48e:	9a a3       	std	Y+34, r25	; 0x22
 490:	8f 8d       	ldd	r24, Y+31	; 0x1f
 492:	98 a1       	ldd	r25, Y+32	; 0x20
 494:	9a 87       	std	Y+10, r25	; 0x0a
 496:	89 87       	std	Y+9, r24	; 0x09
 498:	89 85       	ldd	r24, Y+9	; 0x09
 49a:	9a 85       	ldd	r25, Y+10	; 0x0a
 49c:	9e 87       	std	Y+14, r25	; 0x0e
 49e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4a0:	8d 85       	ldd	r24, Y+13	; 0x0d
 4a2:	9e 85       	ldd	r25, Y+14	; 0x0e
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__FUSE_REGION_LENGTH__+0xa4>
 4a8:	9e 87       	std	Y+14, r25	; 0x0e
 4aa:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 4ac:	00 00       	nop

	/*wait for more than 30ms*/
	_delay_ms(40);

	/*function set command: 2 lines"1", 5*8 Font Size"0"*/
	CLCD_voidSendCommand(0b00111000);
 4ae:	88 e3       	ldi	r24, 0x38	; 56
 4b0:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

	/*Display ON/OFF control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
 4b4:	8c e0       	ldi	r24, 0x0C	; 12
 4b6:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

 	/*Display clear*/
	CLCD_voidSendCommand(1);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

		/*Display Clear*/
		CLCD_voidSendCommand(0b00000001);

#endif
}
 4c0:	00 00       	nop
 4c2:	a2 96       	adiw	r28, 0x22	; 34
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <CLCD_voidSendString>:

void CLCD_voidSendString(const char*Copy_pcString )
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	00 d0       	rcall	.+0      	; 0x4da <CLCD_voidSendString+0x6>
 4da:	0f 92       	push	r0
 4dc:	cd b7       	in	r28, 0x3d	; 61
 4de:	de b7       	in	r29, 0x3e	; 62
 4e0:	9b 83       	std	Y+3, r25	; 0x03
 4e2:	8a 83       	std	Y+2, r24	; 0x02
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
 4e4:	19 82       	std	Y+1, r1	; 0x01
	while(Copy_pcString[Local_u8Counter]!='\0')
 4e6:	0e c0       	rjmp	.+28     	; 0x504 <CLCD_voidSendString+0x30>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	2a 81       	ldd	r18, Y+2	; 0x02
 4f0:	3b 81       	ldd	r19, Y+3	; 0x03
 4f2:	82 0f       	add	r24, r18
 4f4:	93 1f       	adc	r25, r19
 4f6:	fc 01       	movw	r30, r24
 4f8:	80 81       	ld	r24, Z
 4fa:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>
	Local_u8Counter++;
 4fe:	89 81       	ldd	r24, Y+1	; 0x01
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char*Copy_pcString )
{
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	2a 81       	ldd	r18, Y+2	; 0x02
 50c:	3b 81       	ldd	r19, Y+3	; 0x03
 50e:	82 0f       	add	r24, r18
 510:	93 1f       	adc	r25, r19
 512:	fc 01       	movw	r30, r24
 514:	80 81       	ld	r24, Z
 516:	88 23       	and	r24, r24
 518:	39 f7       	brne	.-50     	; 0x4e8 <CLCD_voidSendString+0x14>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
	Local_u8Counter++;
	}

}
 51a:	00 00       	nop
 51c:	00 00       	nop
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	00 d0       	rcall	.+0      	; 0x530 <CLCD_voidGoToXY+0x6>
 530:	00 d0       	rcall	.+0      	; 0x532 <CLCD_voidGoToXY+0x8>
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	8b 83       	std	Y+3, r24	; 0x03
 538:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=0;
 53a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	88 23       	and	r24, r24
 540:	19 f4       	brne	.+6      	; 0x548 <CLCD_voidGoToXY+0x1e>
	{
		/*Location is at first line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos;
 542:	8c 81       	ldd	r24, Y+4	; 0x04
 544:	89 83       	std	Y+1, r24	; 0x01
 546:	06 c0       	rjmp	.+12     	; 0x554 <CLCD_voidGoToXY+0x2a>
	}
	else if(Copy_u8XPos==1)
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	19 f4       	brne	.+6      	; 0x554 <CLCD_voidGoToXY+0x2a>
	{
		/*Location is at Second line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos+0x40;
 54e:	8c 81       	ldd	r24, Y+4	; 0x04
 550:	80 5c       	subi	r24, 0xC0	; 192
 552:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	80 58       	subi	r24, 0x80	; 128
 558:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
}
 55c:	00 00       	nop
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8*Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	00 d0       	rcall	.+0      	; 0x572 <CLCD_voidWriteSpecialCharacter+0x6>
 572:	00 d0       	rcall	.+0      	; 0x574 <CLCD_voidWriteSpecialCharacter+0x8>
 574:	00 d0       	rcall	.+0      	; 0x576 <CLCD_voidWriteSpecialCharacter+0xa>
 576:	0f 92       	push	r0
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	9c 83       	std	Y+4, r25	; 0x04
 57e:	8b 83       	std	Y+3, r24	; 0x03
 580:	6d 83       	std	Y+5, r22	; 0x05
 582:	4e 83       	std	Y+6, r20	; 0x06
 584:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
 586:	1a 82       	std	Y+2, r1	; 0x02

	/*calculate the CGRAM Address whose each block is 8 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
 588:	8d 81       	ldd	r24, Y+5	; 0x05
 58a:	88 0f       	add	r24, r24
 58c:	88 0f       	add	r24, r24
 58e:	88 0f       	add	r24, r24
 590:	8a 83       	std	Y+2, r24	; 0x02

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	80 5c       	subi	r24, 0xC0	; 192
 596:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
 59a:	19 82       	std	Y+1, r1	; 0x01
 59c:	0e c0       	rjmp	.+28     	; 0x5ba <CLCD_voidWriteSpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	2b 81       	ldd	r18, Y+3	; 0x03
 5a6:	3c 81       	ldd	r19, Y+4	; 0x04
 5a8:	82 0f       	add	r24, r18
 5aa:	93 1f       	adc	r25, r19
 5ac:	fc 01       	movw	r30, r24
 5ae:	80 81       	ld	r24, Z
 5b0:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>

	/*send CGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	8f 5f       	subi	r24, 0xFF	; 255
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	88 30       	cpi	r24, 0x08	; 8
 5be:	78 f3       	brcs	.-34     	; 0x59e <CLCD_voidWriteSpecialCharacter+0x32>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/*Go back to the DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
 5c0:	6f 81       	ldd	r22, Y+7	; 0x07
 5c2:	8e 81       	ldd	r24, Y+6	; 0x06
 5c4:	0e 94 95 02 	call	0x52a	; 0x52a <CLCD_voidGoToXY>

	/*Display the pattern written in the CG RAM
	 * DDRAM treat with the CGRAM with location(block) number from 0 to 7*/
	CLCD_voidSendData(Copy_u8PatternNumber);
 5c8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ca:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>

}
 5ce:	00 00       	nop
 5d0:	27 96       	adiw	r28, 0x07	; 7
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	f8 94       	cli
 5d6:	de bf       	out	0x3e, r29	; 62
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	cd bf       	out	0x3d, r28	; 61
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
 5e2:	cf 92       	push	r12
 5e4:	df 92       	push	r13
 5e6:	ef 92       	push	r14
 5e8:	ff 92       	push	r15
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	a0 97       	sbiw	r28, 0x20	; 32
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	de bf       	out	0x3e, r29	; 62
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	cd bf       	out	0x3d, r28	; 61
 602:	6d 83       	std	Y+5, r22	; 0x05
 604:	7e 83       	std	Y+6, r23	; 0x06
 606:	8f 83       	std	Y+7, r24	; 0x07
 608:	98 87       	std	Y+8, r25	; 0x08
	u32 Local_u32Reserverd=1;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	a0 e0       	ldi	r26, 0x00	; 0
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	9a 83       	std	Y+2, r25	; 0x02
 616:	ab 83       	std	Y+3, r26	; 0x03
 618:	bc 83       	std	Y+4, r27	; 0x04

	while(Copy_u32Number !=0)
 61a:	56 c0       	rjmp	.+172    	; 0x6c8 <CLCD_voidWriteNumber+0xe6>
	{
		Local_u32Reserverd=Local_u32Reserverd*10 + Copy_u32Number%10;
 61c:	49 81       	ldd	r20, Y+1	; 0x01
 61e:	5a 81       	ldd	r21, Y+2	; 0x02
 620:	6b 81       	ldd	r22, Y+3	; 0x03
 622:	7c 81       	ldd	r23, Y+4	; 0x04
 624:	db 01       	movw	r26, r22
 626:	ca 01       	movw	r24, r20
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	aa 1f       	adc	r26, r26
 62e:	bb 1f       	adc	r27, r27
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	aa 1f       	adc	r26, r26
 636:	bb 1f       	adc	r27, r27
 638:	84 0f       	add	r24, r20
 63a:	95 1f       	adc	r25, r21
 63c:	a6 1f       	adc	r26, r22
 63e:	b7 1f       	adc	r27, r23
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	aa 1f       	adc	r26, r26
 646:	bb 1f       	adc	r27, r27
 648:	6c 01       	movw	r12, r24
 64a:	7d 01       	movw	r14, r26
 64c:	8d 81       	ldd	r24, Y+5	; 0x05
 64e:	9e 81       	ldd	r25, Y+6	; 0x06
 650:	af 81       	ldd	r26, Y+7	; 0x07
 652:	b8 85       	ldd	r27, Y+8	; 0x08
 654:	89 87       	std	Y+9, r24	; 0x09
 656:	9a 87       	std	Y+10, r25	; 0x0a
 658:	ab 87       	std	Y+11, r26	; 0x0b
 65a:	bc 87       	std	Y+12, r27	; 0x0c
 65c:	0a e0       	ldi	r16, 0x0A	; 10
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	69 85       	ldd	r22, Y+9	; 0x09
 666:	7a 85       	ldd	r23, Y+10	; 0x0a
 668:	8b 85       	ldd	r24, Y+11	; 0x0b
 66a:	9c 85       	ldd	r25, Y+12	; 0x0c
 66c:	a9 01       	movw	r20, r18
 66e:	98 01       	movw	r18, r16
 670:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__udivmodsi4>
 674:	6d 87       	std	Y+13, r22	; 0x0d
 676:	7e 87       	std	Y+14, r23	; 0x0e
 678:	8f 87       	std	Y+15, r24	; 0x0f
 67a:	98 8b       	std	Y+16, r25	; 0x10
 67c:	8d 85       	ldd	r24, Y+13	; 0x0d
 67e:	9e 85       	ldd	r25, Y+14	; 0x0e
 680:	af 85       	ldd	r26, Y+15	; 0x0f
 682:	b8 89       	ldd	r27, Y+16	; 0x10
 684:	8c 0d       	add	r24, r12
 686:	9d 1d       	adc	r25, r13
 688:	ae 1d       	adc	r26, r14
 68a:	bf 1d       	adc	r27, r15
 68c:	89 83       	std	Y+1, r24	; 0x01
 68e:	9a 83       	std	Y+2, r25	; 0x02
 690:	ab 83       	std	Y+3, r26	; 0x03
 692:	bc 83       	std	Y+4, r27	; 0x04
		Copy_u32Number/=10;
 694:	8d 81       	ldd	r24, Y+5	; 0x05
 696:	9e 81       	ldd	r25, Y+6	; 0x06
 698:	af 81       	ldd	r26, Y+7	; 0x07
 69a:	b8 85       	ldd	r27, Y+8	; 0x08
 69c:	89 8b       	std	Y+17, r24	; 0x11
 69e:	9a 8b       	std	Y+18, r25	; 0x12
 6a0:	ab 8b       	std	Y+19, r26	; 0x13
 6a2:	bc 8b       	std	Y+20, r27	; 0x14
 6a4:	0a e0       	ldi	r16, 0x0A	; 10
 6a6:	10 e0       	ldi	r17, 0x00	; 0
 6a8:	20 e0       	ldi	r18, 0x00	; 0
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	69 89       	ldd	r22, Y+17	; 0x11
 6ae:	7a 89       	ldd	r23, Y+18	; 0x12
 6b0:	8b 89       	ldd	r24, Y+19	; 0x13
 6b2:	9c 89       	ldd	r25, Y+20	; 0x14
 6b4:	a9 01       	movw	r20, r18
 6b6:	98 01       	movw	r18, r16
 6b8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__udivmodsi4>
 6bc:	da 01       	movw	r26, r20
 6be:	c9 01       	movw	r24, r18
 6c0:	8d 83       	std	Y+5, r24	; 0x05
 6c2:	9e 83       	std	Y+6, r25	; 0x06
 6c4:	af 83       	std	Y+7, r26	; 0x07
 6c6:	b8 87       	std	Y+8, r27	; 0x08

void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
	u32 Local_u32Reserverd=1;

	while(Copy_u32Number !=0)
 6c8:	8d 81       	ldd	r24, Y+5	; 0x05
 6ca:	9e 81       	ldd	r25, Y+6	; 0x06
 6cc:	af 81       	ldd	r26, Y+7	; 0x07
 6ce:	b8 85       	ldd	r27, Y+8	; 0x08
 6d0:	89 2b       	or	r24, r25
 6d2:	8a 2b       	or	r24, r26
 6d4:	8b 2b       	or	r24, r27
 6d6:	09 f0       	breq	.+2      	; 0x6da <CLCD_voidWriteNumber+0xf8>
 6d8:	a1 cf       	rjmp	.-190    	; 0x61c <CLCD_voidWriteNumber+0x3a>
		Copy_u32Number/=10;
	}

	do
	{
		CLCD_voidSendData((Local_u32Reserverd%10)+'0');
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	9a 81       	ldd	r25, Y+2	; 0x02
 6de:	ab 81       	ldd	r26, Y+3	; 0x03
 6e0:	bc 81       	ldd	r27, Y+4	; 0x04
 6e2:	8d 8b       	std	Y+21, r24	; 0x15
 6e4:	9e 8b       	std	Y+22, r25	; 0x16
 6e6:	af 8b       	std	Y+23, r26	; 0x17
 6e8:	b8 8f       	std	Y+24, r27	; 0x18
 6ea:	0a e0       	ldi	r16, 0x0A	; 10
 6ec:	10 e0       	ldi	r17, 0x00	; 0
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	6d 89       	ldd	r22, Y+21	; 0x15
 6f4:	7e 89       	ldd	r23, Y+22	; 0x16
 6f6:	8f 89       	ldd	r24, Y+23	; 0x17
 6f8:	98 8d       	ldd	r25, Y+24	; 0x18
 6fa:	a9 01       	movw	r20, r18
 6fc:	98 01       	movw	r18, r16
 6fe:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__udivmodsi4>
 702:	69 8f       	std	Y+25, r22	; 0x19
 704:	7a 8f       	std	Y+26, r23	; 0x1a
 706:	8b 8f       	std	Y+27, r24	; 0x1b
 708:	9c 8f       	std	Y+28, r25	; 0x1c
 70a:	89 8d       	ldd	r24, Y+25	; 0x19
 70c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 70e:	ab 8d       	ldd	r26, Y+27	; 0x1b
 710:	bc 8d       	ldd	r27, Y+28	; 0x1c
 712:	80 5d       	subi	r24, 0xD0	; 208
 714:	0e 94 04 01 	call	0x208	; 0x208 <CLCD_voidSendData>
		Local_u32Reserverd/=10;
 718:	89 81       	ldd	r24, Y+1	; 0x01
 71a:	9a 81       	ldd	r25, Y+2	; 0x02
 71c:	ab 81       	ldd	r26, Y+3	; 0x03
 71e:	bc 81       	ldd	r27, Y+4	; 0x04
 720:	8d 8f       	std	Y+29, r24	; 0x1d
 722:	9e 8f       	std	Y+30, r25	; 0x1e
 724:	af 8f       	std	Y+31, r26	; 0x1f
 726:	b8 a3       	std	Y+32, r27	; 0x20
 728:	0a e0       	ldi	r16, 0x0A	; 10
 72a:	10 e0       	ldi	r17, 0x00	; 0
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	6d 8d       	ldd	r22, Y+29	; 0x1d
 732:	7e 8d       	ldd	r23, Y+30	; 0x1e
 734:	8f 8d       	ldd	r24, Y+31	; 0x1f
 736:	98 a1       	ldd	r25, Y+32	; 0x20
 738:	a9 01       	movw	r20, r18
 73a:	98 01       	movw	r18, r16
 73c:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__udivmodsi4>
 740:	da 01       	movw	r26, r20
 742:	c9 01       	movw	r24, r18
 744:	89 83       	std	Y+1, r24	; 0x01
 746:	9a 83       	std	Y+2, r25	; 0x02
 748:	ab 83       	std	Y+3, r26	; 0x03
 74a:	bc 83       	std	Y+4, r27	; 0x04

	}while(Local_u32Reserverd !=1);
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	9a 81       	ldd	r25, Y+2	; 0x02
 750:	ab 81       	ldd	r26, Y+3	; 0x03
 752:	bc 81       	ldd	r27, Y+4	; 0x04
 754:	01 97       	sbiw	r24, 0x01	; 1
 756:	a1 05       	cpc	r26, r1
 758:	b1 05       	cpc	r27, r1
 75a:	09 f0       	breq	.+2      	; 0x75e <CLCD_voidWriteNumber+0x17c>
 75c:	be cf       	rjmp	.-132    	; 0x6da <CLCD_voidWriteNumber+0xf8>
}
 75e:	00 00       	nop
 760:	00 00       	nop
 762:	a0 96       	adiw	r28, 0x20	; 32
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	f8 94       	cli
 768:	de bf       	out	0x3e, r29	; 62
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	cd bf       	out	0x3d, r28	; 61
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	cf 90       	pop	r12
 77e:	08 95       	ret

00000780 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen()
{
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand('1');
 788:	81 e3       	ldi	r24, 0x31	; 49
 78a:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
}
 78e:	00 00       	nop
 790:	df 91       	pop	r29
 792:	cf 91       	pop	r28
 794:	08 95       	ret

00000796 <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	00 d0       	rcall	.+0      	; 0x79c <DIO_u8SetPinValue+0x6>
 79c:	00 d0       	rcall	.+0      	; 0x79e <DIO_u8SetPinValue+0x8>
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	8a 83       	std	Y+2, r24	; 0x02
 7a4:	6b 83       	std	Y+3, r22	; 0x03
 7a6:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
 7a8:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	88 30       	cpi	r24, 0x08	; 8
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <DIO_u8SetPinValue+0x1c>
 7b0:	f3 c0       	rjmp	.+486    	; 0x998 <__stack+0x139>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
 7b2:	8c 81       	ldd	r24, Y+4	; 0x04
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	09 f0       	breq	.+2      	; 0x7ba <DIO_u8SetPinValue+0x24>
 7b8:	72 c0       	rjmp	.+228    	; 0x89e <__stack+0x3f>
		{
		switch(Copy_u8Port)
 7ba:	8a 81       	ldd	r24, Y+2	; 0x02
 7bc:	88 2f       	mov	r24, r24
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	84 30       	cpi	r24, 0x04	; 4
 7c2:	91 05       	cpc	r25, r1
 7c4:	09 f4       	brne	.+2      	; 0x7c8 <DIO_u8SetPinValue+0x32>
 7c6:	52 c0       	rjmp	.+164    	; 0x86c <__stack+0xd>
 7c8:	85 30       	cpi	r24, 0x05	; 5
 7ca:	91 05       	cpc	r25, r1
 7cc:	0c f0       	brlt	.+2      	; 0x7d0 <DIO_u8SetPinValue+0x3a>
 7ce:	64 c0       	rjmp	.+200    	; 0x898 <__stack+0x39>
 7d0:	83 30       	cpi	r24, 0x03	; 3
 7d2:	91 05       	cpc	r25, r1
 7d4:	a9 f1       	breq	.+106    	; 0x840 <DIO_u8SetPinValue+0xaa>
 7d6:	84 30       	cpi	r24, 0x04	; 4
 7d8:	91 05       	cpc	r25, r1
 7da:	0c f0       	brlt	.+2      	; 0x7de <DIO_u8SetPinValue+0x48>
 7dc:	5d c0       	rjmp	.+186    	; 0x898 <__stack+0x39>
 7de:	00 97       	sbiw	r24, 0x00	; 0
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <DIO_u8SetPinValue+0x52>
 7e2:	01 97       	sbiw	r24, 0x01	; 1
 7e4:	b9 f0       	breq	.+46     	; 0x814 <DIO_u8SetPinValue+0x7e>
 7e6:	58 c0       	rjmp	.+176    	; 0x898 <__stack+0x39>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 7e8:	8b e3       	ldi	r24, 0x3B	; 59
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	fc 01       	movw	r30, r24
 7ee:	80 81       	ld	r24, Z
 7f0:	48 2f       	mov	r20, r24
 7f2:	8b 81       	ldd	r24, Y+3	; 0x03
 7f4:	28 2f       	mov	r18, r24
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_u8SetPinValue+0x6c>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	2a 95       	dec	r18
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_u8SetPinValue+0x68>
 806:	24 2f       	mov	r18, r20
 808:	28 2b       	or	r18, r24
 80a:	8b e3       	ldi	r24, 0x3B	; 59
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	fc 01       	movw	r30, r24
 810:	20 83       	st	Z, r18
 812:	c4 c0       	rjmp	.+392    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 814:	88 e3       	ldi	r24, 0x38	; 56
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	fc 01       	movw	r30, r24
 81a:	80 81       	ld	r24, Z
 81c:	48 2f       	mov	r20, r24
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_u8SetPinValue+0x98>
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	2a 95       	dec	r18
 830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_u8SetPinValue+0x94>
 832:	24 2f       	mov	r18, r20
 834:	28 2b       	or	r18, r24
 836:	88 e3       	ldi	r24, 0x38	; 56
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18
 83e:	ae c0       	rjmp	.+348    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 840:	85 e3       	ldi	r24, 0x35	; 53
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	fc 01       	movw	r30, r24
 846:	80 81       	ld	r24, Z
 848:	48 2f       	mov	r20, r24
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	28 2f       	mov	r18, r24
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_u8SetPinValue+0xc4>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	2a 95       	dec	r18
 85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_u8SetPinValue+0xc0>
 85e:	24 2f       	mov	r18, r20
 860:	28 2b       	or	r18, r24
 862:	85 e3       	ldi	r24, 0x35	; 53
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
 86a:	98 c0       	rjmp	.+304    	; 0x99c <__stack+0x13d>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 86c:	82 e3       	ldi	r24, 0x32	; 50
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	80 81       	ld	r24, Z
 874:	48 2f       	mov	r20, r24
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	2a 95       	dec	r18
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	24 2f       	mov	r18, r20
 88c:	28 2b       	or	r18, r24
 88e:	82 e3       	ldi	r24, 0x32	; 50
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	fc 01       	movw	r30, r24
 894:	20 83       	st	Z, r18
 896:	82 c0       	rjmp	.+260    	; 0x99c <__stack+0x13d>
			default :Local_u8ErrorState=1;break;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	89 83       	std	Y+1, r24	; 0x01
 89c:	7f c0       	rjmp	.+254    	; 0x99c <__stack+0x13d>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 89e:	8c 81       	ldd	r24, Y+4	; 0x04
 8a0:	88 23       	and	r24, r24
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__stack+0x47>
 8a4:	76 c0       	rjmp	.+236    	; 0x992 <__stack+0x133>
		{
			switch(Copy_u8Port)
 8a6:	8a 81       	ldd	r24, Y+2	; 0x02
 8a8:	88 2f       	mov	r24, r24
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	84 30       	cpi	r24, 0x04	; 4
 8ae:	91 05       	cpc	r25, r1
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <__stack+0x55>
 8b2:	55 c0       	rjmp	.+170    	; 0x95e <__stack+0xff>
 8b4:	85 30       	cpi	r24, 0x05	; 5
 8b6:	91 05       	cpc	r25, r1
 8b8:	0c f0       	brlt	.+2      	; 0x8bc <__stack+0x5d>
 8ba:	68 c0       	rjmp	.+208    	; 0x98c <__stack+0x12d>
 8bc:	83 30       	cpi	r24, 0x03	; 3
 8be:	91 05       	cpc	r25, r1
 8c0:	b9 f1       	breq	.+110    	; 0x930 <__stack+0xd1>
 8c2:	84 30       	cpi	r24, 0x04	; 4
 8c4:	91 05       	cpc	r25, r1
 8c6:	0c f0       	brlt	.+2      	; 0x8ca <__stack+0x6b>
 8c8:	61 c0       	rjmp	.+194    	; 0x98c <__stack+0x12d>
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	19 f0       	breq	.+6      	; 0x8d4 <__stack+0x75>
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	c1 f0       	breq	.+48     	; 0x902 <__stack+0xa3>
 8d2:	5c c0       	rjmp	.+184    	; 0x98c <__stack+0x12d>
			{
				case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 8d4:	8b e3       	ldi	r24, 0x3B	; 59
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	fc 01       	movw	r30, r24
 8da:	80 81       	ld	r24, Z
 8dc:	48 2f       	mov	r20, r24
 8de:	8b 81       	ldd	r24, Y+3	; 0x03
 8e0:	28 2f       	mov	r18, r24
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
 8ea:	88 0f       	add	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	2a 95       	dec	r18
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
 8f2:	80 95       	com	r24
 8f4:	24 2f       	mov	r18, r20
 8f6:	28 23       	and	r18, r24
 8f8:	8b e3       	ldi	r24, 0x3B	; 59
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	fc 01       	movw	r30, r24
 8fe:	20 83       	st	Z, r18
 900:	4d c0       	rjmp	.+154    	; 0x99c <__stack+0x13d>
				case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 902:	88 e3       	ldi	r24, 0x38	; 56
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	fc 01       	movw	r30, r24
 908:	80 81       	ld	r24, Z
 90a:	48 2f       	mov	r20, r24
 90c:	8b 81       	ldd	r24, Y+3	; 0x03
 90e:	28 2f       	mov	r18, r24
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0xbd>
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	2a 95       	dec	r18
 91e:	e2 f7       	brpl	.-8      	; 0x918 <__stack+0xb9>
 920:	80 95       	com	r24
 922:	24 2f       	mov	r18, r20
 924:	28 23       	and	r18, r24
 926:	88 e3       	ldi	r24, 0x38	; 56
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	fc 01       	movw	r30, r24
 92c:	20 83       	st	Z, r18
 92e:	36 c0       	rjmp	.+108    	; 0x99c <__stack+0x13d>
				case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 930:	85 e3       	ldi	r24, 0x35	; 53
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	fc 01       	movw	r30, r24
 936:	80 81       	ld	r24, Z
 938:	48 2f       	mov	r20, r24
 93a:	8b 81       	ldd	r24, Y+3	; 0x03
 93c:	28 2f       	mov	r18, r24
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0xeb>
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	2a 95       	dec	r18
 94c:	e2 f7       	brpl	.-8      	; 0x946 <__stack+0xe7>
 94e:	80 95       	com	r24
 950:	24 2f       	mov	r18, r20
 952:	28 23       	and	r18, r24
 954:	85 e3       	ldi	r24, 0x35	; 53
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	fc 01       	movw	r30, r24
 95a:	20 83       	st	Z, r18
 95c:	1f c0       	rjmp	.+62     	; 0x99c <__stack+0x13d>
				case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 95e:	82 e3       	ldi	r24, 0x32	; 50
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	fc 01       	movw	r30, r24
 964:	80 81       	ld	r24, Z
 966:	48 2f       	mov	r20, r24
 968:	8b 81       	ldd	r24, Y+3	; 0x03
 96a:	28 2f       	mov	r18, r24
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	02 c0       	rjmp	.+4      	; 0x978 <__stack+0x119>
 974:	88 0f       	add	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	2a 95       	dec	r18
 97a:	e2 f7       	brpl	.-8      	; 0x974 <__stack+0x115>
 97c:	80 95       	com	r24
 97e:	24 2f       	mov	r18, r20
 980:	28 23       	and	r18, r24
 982:	82 e3       	ldi	r24, 0x32	; 50
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	fc 01       	movw	r30, r24
 988:	20 83       	st	Z, r18
 98a:	08 c0       	rjmp	.+16     	; 0x99c <__stack+0x13d>
				default :Local_u8ErrorState=1;break;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	89 83       	std	Y+1, r24	; 0x01
 990:	05 c0       	rjmp	.+10     	; 0x99c <__stack+0x13d>
			}

		}
		else
		{
			Local_u8ErrorState=1;
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	89 83       	std	Y+1, r24	; 0x01
 996:	02 c0       	rjmp	.+4      	; 0x99c <__stack+0x13d>
		}

}
else
{
	 Local_u8ErrorState=1;
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	89 83       	std	Y+1, r24	; 0x01
}

return Local_u8ErrorState;
 99c:	89 81       	ldd	r24, Y+1	; 0x01
}
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	0f 90       	pop	r0
 9a4:	0f 90       	pop	r0
 9a6:	df 91       	pop	r29
 9a8:	cf 91       	pop	r28
 9aa:	08 95       	ret

000009ac <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	00 d0       	rcall	.+0      	; 0x9b2 <DIO_u8SetPortValue+0x6>
 9b2:	0f 92       	push	r0
 9b4:	cd b7       	in	r28, 0x3d	; 61
 9b6:	de b7       	in	r29, 0x3e	; 62
 9b8:	8a 83       	std	Y+2, r24	; 0x02
 9ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 9bc:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 9be:	8a 81       	ldd	r24, Y+2	; 0x02
 9c0:	88 2f       	mov	r24, r24
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	84 30       	cpi	r24, 0x04	; 4
 9c6:	91 05       	cpc	r25, r1
 9c8:	01 f1       	breq	.+64     	; 0xa0a <DIO_u8SetPortValue+0x5e>
 9ca:	85 30       	cpi	r24, 0x05	; 5
 9cc:	91 05       	cpc	r25, r1
 9ce:	1c f5       	brge	.+70     	; 0xa16 <DIO_u8SetPortValue+0x6a>
 9d0:	83 30       	cpi	r24, 0x03	; 3
 9d2:	91 05       	cpc	r25, r1
 9d4:	a1 f0       	breq	.+40     	; 0x9fe <DIO_u8SetPortValue+0x52>
 9d6:	84 30       	cpi	r24, 0x04	; 4
 9d8:	91 05       	cpc	r25, r1
 9da:	ec f4       	brge	.+58     	; 0xa16 <DIO_u8SetPortValue+0x6a>
 9dc:	00 97       	sbiw	r24, 0x00	; 0
 9de:	19 f0       	breq	.+6      	; 0x9e6 <DIO_u8SetPortValue+0x3a>
 9e0:	01 97       	sbiw	r24, 0x01	; 1
 9e2:	39 f0       	breq	.+14     	; 0x9f2 <DIO_u8SetPortValue+0x46>
 9e4:	18 c0       	rjmp	.+48     	; 0xa16 <DIO_u8SetPortValue+0x6a>
	{
		case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 9e6:	8b e3       	ldi	r24, 0x3B	; 59
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	2b 81       	ldd	r18, Y+3	; 0x03
 9ec:	fc 01       	movw	r30, r24
 9ee:	20 83       	st	Z, r18
 9f0:	15 c0       	rjmp	.+42     	; 0xa1c <DIO_u8SetPortValue+0x70>
		case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 9f2:	88 e3       	ldi	r24, 0x38	; 56
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	2b 81       	ldd	r18, Y+3	; 0x03
 9f8:	fc 01       	movw	r30, r24
 9fa:	20 83       	st	Z, r18
 9fc:	0f c0       	rjmp	.+30     	; 0xa1c <DIO_u8SetPortValue+0x70>
		case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 9fe:	85 e3       	ldi	r24, 0x35	; 53
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	2b 81       	ldd	r18, Y+3	; 0x03
 a04:	fc 01       	movw	r30, r24
 a06:	20 83       	st	Z, r18
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <DIO_u8SetPortValue+0x70>
		case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 a0a:	82 e3       	ldi	r24, 0x32	; 50
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	2b 81       	ldd	r18, Y+3	; 0x03
 a10:	fc 01       	movw	r30, r24
 a12:	20 83       	st	Z, r18
 a14:	03 c0       	rjmp	.+6      	; 0xa1c <DIO_u8SetPortValue+0x70>
		default :Local_u8ErrorState=1; break;
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	89 83       	std	Y+1, r24	; 0x01
 a1a:	00 00       	nop
	}

	return Local_u8ErrorState;
 a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
 a1e:	0f 90       	pop	r0
 a20:	0f 90       	pop	r0
 a22:	0f 90       	pop	r0
 a24:	df 91       	pop	r29
 a26:	cf 91       	pop	r28
 a28:	08 95       	ret

00000a2a <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	00 d0       	rcall	.+0      	; 0xa30 <DIO_u8GetPinValue+0x6>
 a30:	00 d0       	rcall	.+0      	; 0xa32 <DIO_u8GetPinValue+0x8>
 a32:	0f 92       	push	r0
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	8a 83       	std	Y+2, r24	; 0x02
 a3a:	6b 83       	std	Y+3, r22	; 0x03
 a3c:	5d 83       	std	Y+5, r21	; 0x05
 a3e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 a40:	19 82       	std	Y+1, r1	; 0x01

	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 a42:	8c 81       	ldd	r24, Y+4	; 0x04
 a44:	9d 81       	ldd	r25, Y+5	; 0x05
 a46:	89 2b       	or	r24, r25
 a48:	09 f4       	brne	.+2      	; 0xa4c <DIO_u8GetPinValue+0x22>
 a4a:	73 c0       	rjmp	.+230    	; 0xb32 <DIO_u8GetPinValue+0x108>
 a4c:	8b 81       	ldd	r24, Y+3	; 0x03
 a4e:	88 30       	cpi	r24, 0x08	; 8
 a50:	08 f0       	brcs	.+2      	; 0xa54 <DIO_u8GetPinValue+0x2a>
 a52:	6f c0       	rjmp	.+222    	; 0xb32 <DIO_u8GetPinValue+0x108>
	{
		switch(Copy_u8Port)
 a54:	8a 81       	ldd	r24, Y+2	; 0x02
 a56:	88 2f       	mov	r24, r24
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	84 30       	cpi	r24, 0x04	; 4
 a5c:	91 05       	cpc	r25, r1
 a5e:	09 f4       	brne	.+2      	; 0xa62 <DIO_u8GetPinValue+0x38>
 a60:	4f c0       	rjmp	.+158    	; 0xb00 <DIO_u8GetPinValue+0xd6>
 a62:	85 30       	cpi	r24, 0x05	; 5
 a64:	91 05       	cpc	r25, r1
 a66:	0c f0       	brlt	.+2      	; 0xa6a <DIO_u8GetPinValue+0x40>
 a68:	60 c0       	rjmp	.+192    	; 0xb2a <DIO_u8GetPinValue+0x100>
 a6a:	83 30       	cpi	r24, 0x03	; 3
 a6c:	91 05       	cpc	r25, r1
 a6e:	99 f1       	breq	.+102    	; 0xad6 <DIO_u8GetPinValue+0xac>
 a70:	84 30       	cpi	r24, 0x04	; 4
 a72:	91 05       	cpc	r25, r1
 a74:	0c f0       	brlt	.+2      	; 0xa78 <DIO_u8GetPinValue+0x4e>
 a76:	59 c0       	rjmp	.+178    	; 0xb2a <DIO_u8GetPinValue+0x100>
 a78:	00 97       	sbiw	r24, 0x00	; 0
 a7a:	19 f0       	breq	.+6      	; 0xa82 <DIO_u8GetPinValue+0x58>
 a7c:	01 97       	sbiw	r24, 0x01	; 1
 a7e:	b1 f0       	breq	.+44     	; 0xaac <DIO_u8GetPinValue+0x82>
 a80:	54 c0       	rjmp	.+168    	; 0xb2a <DIO_u8GetPinValue+0x100>
		 {
			 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 a82:	89 e3       	ldi	r24, 0x39	; 57
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	fc 01       	movw	r30, r24
 a88:	80 81       	ld	r24, Z
 a8a:	88 2f       	mov	r24, r24
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	2b 81       	ldd	r18, Y+3	; 0x03
 a90:	22 2f       	mov	r18, r18
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <DIO_u8GetPinValue+0x70>
 a96:	95 95       	asr	r25
 a98:	87 95       	ror	r24
 a9a:	2a 95       	dec	r18
 a9c:	e2 f7       	brpl	.-8      	; 0xa96 <DIO_u8GetPinValue+0x6c>
 a9e:	28 2f       	mov	r18, r24
 aa0:	21 70       	andi	r18, 0x01	; 1
 aa2:	8c 81       	ldd	r24, Y+4	; 0x04
 aa4:	9d 81       	ldd	r25, Y+5	; 0x05
 aa6:	fc 01       	movw	r30, r24
 aa8:	20 83       	st	Z, r18
 aaa:	42 c0       	rjmp	.+132    	; 0xb30 <DIO_u8GetPinValue+0x106>
			 case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 aac:	86 e3       	ldi	r24, 0x36	; 54
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	fc 01       	movw	r30, r24
 ab2:	80 81       	ld	r24, Z
 ab4:	88 2f       	mov	r24, r24
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	2b 81       	ldd	r18, Y+3	; 0x03
 aba:	22 2f       	mov	r18, r18
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <DIO_u8GetPinValue+0x9a>
 ac0:	95 95       	asr	r25
 ac2:	87 95       	ror	r24
 ac4:	2a 95       	dec	r18
 ac6:	e2 f7       	brpl	.-8      	; 0xac0 <DIO_u8GetPinValue+0x96>
 ac8:	28 2f       	mov	r18, r24
 aca:	21 70       	andi	r18, 0x01	; 1
 acc:	8c 81       	ldd	r24, Y+4	; 0x04
 ace:	9d 81       	ldd	r25, Y+5	; 0x05
 ad0:	fc 01       	movw	r30, r24
 ad2:	20 83       	st	Z, r18
 ad4:	2d c0       	rjmp	.+90     	; 0xb30 <DIO_u8GetPinValue+0x106>
			 case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 ad6:	83 e3       	ldi	r24, 0x33	; 51
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	fc 01       	movw	r30, r24
 adc:	80 81       	ld	r24, Z
 ade:	88 2f       	mov	r24, r24
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	2b 81       	ldd	r18, Y+3	; 0x03
 ae4:	22 2f       	mov	r18, r18
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_u8GetPinValue+0xc4>
 aea:	95 95       	asr	r25
 aec:	87 95       	ror	r24
 aee:	2a 95       	dec	r18
 af0:	e2 f7       	brpl	.-8      	; 0xaea <DIO_u8GetPinValue+0xc0>
 af2:	28 2f       	mov	r18, r24
 af4:	21 70       	andi	r18, 0x01	; 1
 af6:	8c 81       	ldd	r24, Y+4	; 0x04
 af8:	9d 81       	ldd	r25, Y+5	; 0x05
 afa:	fc 01       	movw	r30, r24
 afc:	20 83       	st	Z, r18
 afe:	18 c0       	rjmp	.+48     	; 0xb30 <DIO_u8GetPinValue+0x106>
			 case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 b00:	80 e3       	ldi	r24, 0x30	; 48
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	fc 01       	movw	r30, r24
 b06:	80 81       	ld	r24, Z
 b08:	88 2f       	mov	r24, r24
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	2b 81       	ldd	r18, Y+3	; 0x03
 b0e:	22 2f       	mov	r18, r18
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <DIO_u8GetPinValue+0xee>
 b14:	95 95       	asr	r25
 b16:	87 95       	ror	r24
 b18:	2a 95       	dec	r18
 b1a:	e2 f7       	brpl	.-8      	; 0xb14 <DIO_u8GetPinValue+0xea>
 b1c:	28 2f       	mov	r18, r24
 b1e:	21 70       	andi	r18, 0x01	; 1
 b20:	8c 81       	ldd	r24, Y+4	; 0x04
 b22:	9d 81       	ldd	r25, Y+5	; 0x05
 b24:	fc 01       	movw	r30, r24
 b26:	20 83       	st	Z, r18
 b28:	03 c0       	rjmp	.+6      	; 0xb30 <DIO_u8GetPinValue+0x106>
			 default : Local_u8ErrorState=1; break;
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	89 83       	std	Y+1, r24	; 0x01
 b2e:	00 00       	nop
{
	u8 Local_u8ErrorState=0;

	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
	{
		switch(Copy_u8Port)
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <DIO_u8GetPinValue+0x10c>

	}

	else
	{
		Local_u8ErrorState = 1;
 b32:	81 e0       	ldi	r24, 0x01	; 1
 b34:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 b36:	89 81       	ldd	r24, Y+1	; 0x01
}
 b38:	0f 90       	pop	r0
 b3a:	0f 90       	pop	r0
 b3c:	0f 90       	pop	r0
 b3e:	0f 90       	pop	r0
 b40:	0f 90       	pop	r0
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	08 95       	ret

00000b48 <KPD_u8GetPressedKey>:
#include"KPD_config.h"
#include"KPD_private.h"


u8 KPD_u8GetPressedKey(void)
{
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	00 d0       	rcall	.+0      	; 0xb4e <KPD_u8GetPressedKey+0x6>
 b4e:	0f 92       	push	r0
 b50:	cd b7       	in	r28, 0x3d	; 61
 b52:	de b7       	in	r29, 0x3e	; 62
static u8 Local_u8PressedKey;
static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COLUMN_NUM] = KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM] = {KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < KPD_COLUMN_NUM; Local_u8ColumnIdx++)
 b54:	19 82       	std	Y+1, r1	; 0x01
 b56:	5b c0       	rjmp	.+182    	; 0xc0e <KPD_u8GetPressedKey+0xc6>
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
 b58:	89 81       	ldd	r24, Y+1	; 0x01
 b5a:	88 2f       	mov	r24, r24
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	80 5a       	subi	r24, 0xA0	; 160
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	fc 01       	movw	r30, r24
 b64:	80 81       	ld	r24, Z
 b66:	40 e0       	ldi	r20, 0x00	; 0
 b68:	68 2f       	mov	r22, r24
 b6a:	84 e0       	ldi	r24, 0x04	; 4
 b6c:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>

	for(Local_u8RowIdx = 0; Local_u8RowIdx < KPD_ROW_NUM; Local_u8RowIdx++)
 b70:	1a 82       	std	Y+2, r1	; 0x02
 b72:	3b c0       	rjmp	.+118    	; 0xbea <KPD_u8GetPressedKey+0xa2>
	{
		/*Read the current row*/
		DIO_u8GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
 b74:	8a 81       	ldd	r24, Y+2	; 0x02
 b76:	88 2f       	mov	r24, r24
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	8c 59       	subi	r24, 0x9C	; 156
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	fc 01       	movw	r30, r24
 b80:	20 81       	ld	r18, Z
 b82:	ce 01       	movw	r24, r28
 b84:	03 96       	adiw	r24, 0x03	; 3
 b86:	ac 01       	movw	r20, r24
 b88:	62 2f       	mov	r22, r18
 b8a:	84 e0       	ldi	r24, 0x04	; 4
 b8c:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_u8GetPinValue>

		 /*Check switch is pressed*/
		if(DIO_u8PIN_LOW == Local_u8PinState)
 b90:	8b 81       	ldd	r24, Y+3	; 0x03
 b92:	88 23       	and	r24, r24
 b94:	39 f5       	brne	.+78     	; 0xbe4 <KPD_u8GetPressedKey+0x9c>
		{
			Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
 b96:	8a 81       	ldd	r24, Y+2	; 0x02
 b98:	28 2f       	mov	r18, r24
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	89 81       	ldd	r24, Y+1	; 0x01
 b9e:	88 2f       	mov	r24, r24
 ba0:	90 e0       	ldi	r25, 0x00	; 0
 ba2:	22 0f       	add	r18, r18
 ba4:	33 1f       	adc	r19, r19
 ba6:	22 0f       	add	r18, r18
 ba8:	33 1f       	adc	r19, r19
 baa:	82 0f       	add	r24, r18
 bac:	93 1f       	adc	r25, r19
 bae:	88 59       	subi	r24, 0x98	; 152
 bb0:	9f 4f       	sbci	r25, 0xFF	; 255
 bb2:	fc 01       	movw	r30, r24
 bb4:	80 81       	ld	r24, Z
 bb6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>

			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW == Local_u8PinState)
 bba:	0e c0       	rjmp	.+28     	; 0xbd8 <KPD_u8GetPressedKey+0x90>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
 bbc:	8a 81       	ldd	r24, Y+2	; 0x02
 bbe:	88 2f       	mov	r24, r24
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	8c 59       	subi	r24, 0x9C	; 156
 bc4:	9f 4f       	sbci	r25, 0xFF	; 255
 bc6:	fc 01       	movw	r30, r24
 bc8:	20 81       	ld	r18, Z
 bca:	ce 01       	movw	r24, r28
 bcc:	03 96       	adiw	r24, 0x03	; 3
 bce:	ac 01       	movw	r20, r24
 bd0:	62 2f       	mov	r22, r18
 bd2:	84 e0       	ldi	r24, 0x04	; 4
 bd4:	0e 94 15 05 	call	0xa2a	; 0xa2a <DIO_u8GetPinValue>
		if(DIO_u8PIN_LOW == Local_u8PinState)
		{
			Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW == Local_u8PinState)
 bd8:	8b 81       	ldd	r24, Y+3	; 0x03
 bda:	88 23       	and	r24, r24
 bdc:	79 f3       	breq	.-34     	; 0xbbc <KPD_u8GetPressedKey+0x74>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
			}

			return Local_u8PressedKey;
 bde:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
 be2:	1b c0       	rjmp	.+54     	; 0xc1a <KPD_u8GetPressedKey+0xd2>
for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < KPD_COLUMN_NUM; Local_u8ColumnIdx++)
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

	for(Local_u8RowIdx = 0; Local_u8RowIdx < KPD_ROW_NUM; Local_u8RowIdx++)
 be4:	8a 81       	ldd	r24, Y+2	; 0x02
 be6:	8f 5f       	subi	r24, 0xFF	; 255
 be8:	8a 83       	std	Y+2, r24	; 0x02
 bea:	8a 81       	ldd	r24, Y+2	; 0x02
 bec:	84 30       	cpi	r24, 0x04	; 4
 bee:	10 f2       	brcs	.-124    	; 0xb74 <KPD_u8GetPressedKey+0x2c>
			return Local_u8PressedKey;
		}
	}

	/*Deactivate the current column*/
	DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
 bf0:	89 81       	ldd	r24, Y+1	; 0x01
 bf2:	88 2f       	mov	r24, r24
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	80 5a       	subi	r24, 0xA0	; 160
 bf8:	9f 4f       	sbci	r25, 0xFF	; 255
 bfa:	fc 01       	movw	r30, r24
 bfc:	80 81       	ld	r24, Z
 bfe:	41 e0       	ldi	r20, 0x01	; 1
 c00:	68 2f       	mov	r22, r24
 c02:	84 e0       	ldi	r24, 0x04	; 4
 c04:	0e 94 cb 03 	call	0x796	; 0x796 <DIO_u8SetPinValue>
static u8 Local_u8PressedKey;
static u8 Local_u8KPDArr[KPD_ROW_NUM][KPD_COLUMN_NUM] = KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM] = {KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM] = {KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0; Local_u8ColumnIdx < KPD_COLUMN_NUM; Local_u8ColumnIdx++)
 c08:	89 81       	ldd	r24, Y+1	; 0x01
 c0a:	8f 5f       	subi	r24, 0xFF	; 255
 c0c:	89 83       	std	Y+1, r24	; 0x01
 c0e:	89 81       	ldd	r24, Y+1	; 0x01
 c10:	84 30       	cpi	r24, 0x04	; 4
 c12:	08 f4       	brcc	.+2      	; 0xc16 <KPD_u8GetPressedKey+0xce>
 c14:	a1 cf       	rjmp	.-190    	; 0xb58 <KPD_u8GetPressedKey+0x10>
	/*Deactivate the current column*/
	DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColumnArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);

}

return Local_u8PressedKey;
 c16:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__data_end>
}
 c1a:	0f 90       	pop	r0
 c1c:	0f 90       	pop	r0
 c1e:	0f 90       	pop	r0
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	08 95       	ret

00000c26 <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 c26:	cf 93       	push	r28
 c28:	df 93       	push	r29
 c2a:	cd b7       	in	r28, 0x3d	; 61
 c2c:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 c2e:	8a e3       	ldi	r24, 0x3A	; 58
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	2f ef       	ldi	r18, 0xFF	; 255
 c34:	fc 01       	movw	r30, r24
 c36:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
 c38:	87 e3       	ldi	r24, 0x37	; 55
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	fc 01       	movw	r30, r24
 c3e:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 c40:	84 e3       	ldi	r24, 0x34	; 52
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	27 e0       	ldi	r18, 0x07	; 7
 c46:	fc 01       	movw	r30, r24
 c48:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 c4a:	81 e3       	ldi	r24, 0x31	; 49
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	2f e0       	ldi	r18, 0x0F	; 15
 c50:	fc 01       	movw	r30, r24
 c52:	20 83       	st	Z, r18

	PORTA=PORTA_InitVal;
 c54:	8b e3       	ldi	r24, 0x3B	; 59
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	fc 01       	movw	r30, r24
 c5a:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 c5c:	88 e3       	ldi	r24, 0x38	; 56
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	fc 01       	movw	r30, r24
 c62:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 c64:	85 e3       	ldi	r24, 0x35	; 53
 c66:	90 e0       	ldi	r25, 0x00	; 0
 c68:	fc 01       	movw	r30, r24
 c6a:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 c6c:	82 e3       	ldi	r24, 0x32	; 50
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	2f ef       	ldi	r18, 0xFF	; 255
 c72:	fc 01       	movw	r30, r24
 c74:	20 83       	st	Z, r18
}
 c76:	00 00       	nop
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

00000c7e <main>:
#include "CLCD_interface.h"
#include "KPD_interface.h"


void main()
{
 c7e:	cf 93       	push	r28
 c80:	df 93       	push	r29
 c82:	00 d0       	rcall	.+0      	; 0xc84 <main+0x6>
 c84:	00 d0       	rcall	.+0      	; 0xc86 <main+0x8>
 c86:	cd b7       	in	r28, 0x3d	; 61
 c88:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 c8a:	0e 94 13 06 	call	0xc26	; 0xc26 <PORT_voidInit>
	CLCD_voidInit();
 c8e:	0e 94 bf 01 	call	0x37e	; 0x37e <CLCD_voidInit>

	while(1)
	{
		do
		{
			KPD_u8GetPressedKey();
 c92:	0e 94 a4 05 	call	0xb48	; 0xb48 <KPD_u8GetPressedKey>

		}while(KPD_u8GetPressedKey() == KPD_NO_PRESSED_KEY);
 c96:	0e 94 a4 05 	call	0xb48	; 0xb48 <KPD_u8GetPressedKey>
 c9a:	8f 3f       	cpi	r24, 0xFF	; 255
 c9c:	d1 f3       	breq	.-12     	; 0xc92 <main+0x14>

		KPD = KPD_u8GetPressedKey();
 c9e:	0e 94 a4 05 	call	0xb48	; 0xb48 <KPD_u8GetPressedKey>
 ca2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <KPD.1501>
		CLCD_voidWriteNumber(KPD);
 ca6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <KPD.1501>
 caa:	28 2f       	mov	r18, r24
 cac:	30 e0       	ldi	r19, 0x00	; 0
 cae:	40 e0       	ldi	r20, 0x00	; 0
 cb0:	50 e0       	ldi	r21, 0x00	; 0
 cb2:	29 83       	std	Y+1, r18	; 0x01
 cb4:	3a 83       	std	Y+2, r19	; 0x02
 cb6:	4b 83       	std	Y+3, r20	; 0x03
 cb8:	5c 83       	std	Y+4, r21	; 0x04
 cba:	69 81       	ldd	r22, Y+1	; 0x01
 cbc:	7a 81       	ldd	r23, Y+2	; 0x02
 cbe:	8b 81       	ldd	r24, Y+3	; 0x03
 cc0:	9c 81       	ldd	r25, Y+4	; 0x04
 cc2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <CLCD_voidWriteNumber>
	PORT_voidInit();
	CLCD_voidInit();

	static u8 KPD;

	while(1)
 cc6:	e5 cf       	rjmp	.-54     	; 0xc92 <main+0x14>

00000cc8 <__udivmodsi4>:
 cc8:	a1 e2       	ldi	r26, 0x21	; 33
 cca:	1a 2e       	mov	r1, r26
 ccc:	aa 1b       	sub	r26, r26
 cce:	bb 1b       	sub	r27, r27
 cd0:	fd 01       	movw	r30, r26
 cd2:	0d c0       	rjmp	.+26     	; 0xcee <__udivmodsi4_ep>

00000cd4 <__udivmodsi4_loop>:
 cd4:	aa 1f       	adc	r26, r26
 cd6:	bb 1f       	adc	r27, r27
 cd8:	ee 1f       	adc	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	a2 17       	cp	r26, r18
 cde:	b3 07       	cpc	r27, r19
 ce0:	e4 07       	cpc	r30, r20
 ce2:	f5 07       	cpc	r31, r21
 ce4:	20 f0       	brcs	.+8      	; 0xcee <__udivmodsi4_ep>
 ce6:	a2 1b       	sub	r26, r18
 ce8:	b3 0b       	sbc	r27, r19
 cea:	e4 0b       	sbc	r30, r20
 cec:	f5 0b       	sbc	r31, r21

00000cee <__udivmodsi4_ep>:
 cee:	66 1f       	adc	r22, r22
 cf0:	77 1f       	adc	r23, r23
 cf2:	88 1f       	adc	r24, r24
 cf4:	99 1f       	adc	r25, r25
 cf6:	1a 94       	dec	r1
 cf8:	69 f7       	brne	.-38     	; 0xcd4 <__udivmodsi4_loop>
 cfa:	60 95       	com	r22
 cfc:	70 95       	com	r23
 cfe:	80 95       	com	r24
 d00:	90 95       	com	r25
 d02:	9b 01       	movw	r18, r22
 d04:	ac 01       	movw	r20, r24
 d06:	bd 01       	movw	r22, r26
 d08:	cf 01       	movw	r24, r30
 d0a:	08 95       	ret

00000d0c <__cmpsf2>:
 d0c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_cmp>
 d10:	08 f4       	brcc	.+2      	; 0xd14 <__cmpsf2+0x8>
 d12:	81 e0       	ldi	r24, 0x01	; 1
 d14:	08 95       	ret

00000d16 <__fixunssfsi>:
 d16:	0e 94 e6 06 	call	0xdcc	; 0xdcc <__fp_splitA>
 d1a:	88 f0       	brcs	.+34     	; 0xd3e <__fixunssfsi+0x28>
 d1c:	9f 57       	subi	r25, 0x7F	; 127
 d1e:	98 f0       	brcs	.+38     	; 0xd46 <__fixunssfsi+0x30>
 d20:	b9 2f       	mov	r27, r25
 d22:	99 27       	eor	r25, r25
 d24:	b7 51       	subi	r27, 0x17	; 23
 d26:	b0 f0       	brcs	.+44     	; 0xd54 <__fixunssfsi+0x3e>
 d28:	e1 f0       	breq	.+56     	; 0xd62 <__fixunssfsi+0x4c>
 d2a:	66 0f       	add	r22, r22
 d2c:	77 1f       	adc	r23, r23
 d2e:	88 1f       	adc	r24, r24
 d30:	99 1f       	adc	r25, r25
 d32:	1a f0       	brmi	.+6      	; 0xd3a <__fixunssfsi+0x24>
 d34:	ba 95       	dec	r27
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__fixunssfsi+0x14>
 d38:	14 c0       	rjmp	.+40     	; 0xd62 <__fixunssfsi+0x4c>
 d3a:	b1 30       	cpi	r27, 0x01	; 1
 d3c:	91 f0       	breq	.+36     	; 0xd62 <__fixunssfsi+0x4c>
 d3e:	0e 94 00 07 	call	0xe00	; 0xe00 <__fp_zero>
 d42:	b1 e0       	ldi	r27, 0x01	; 1
 d44:	08 95       	ret
 d46:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__fp_zero>
 d4a:	67 2f       	mov	r22, r23
 d4c:	78 2f       	mov	r23, r24
 d4e:	88 27       	eor	r24, r24
 d50:	b8 5f       	subi	r27, 0xF8	; 248
 d52:	39 f0       	breq	.+14     	; 0xd62 <__fixunssfsi+0x4c>
 d54:	b9 3f       	cpi	r27, 0xF9	; 249
 d56:	cc f3       	brlt	.-14     	; 0xd4a <__fixunssfsi+0x34>
 d58:	86 95       	lsr	r24
 d5a:	77 95       	ror	r23
 d5c:	67 95       	ror	r22
 d5e:	b3 95       	inc	r27
 d60:	d9 f7       	brne	.-10     	; 0xd58 <__fixunssfsi+0x42>
 d62:	3e f4       	brtc	.+14     	; 0xd72 <__fixunssfsi+0x5c>
 d64:	90 95       	com	r25
 d66:	80 95       	com	r24
 d68:	70 95       	com	r23
 d6a:	61 95       	neg	r22
 d6c:	7f 4f       	sbci	r23, 0xFF	; 255
 d6e:	8f 4f       	sbci	r24, 0xFF	; 255
 d70:	9f 4f       	sbci	r25, 0xFF	; 255
 d72:	08 95       	ret

00000d74 <__fp_cmp>:
 d74:	99 0f       	add	r25, r25
 d76:	00 08       	sbc	r0, r0
 d78:	55 0f       	add	r21, r21
 d7a:	aa 0b       	sbc	r26, r26
 d7c:	e0 e8       	ldi	r30, 0x80	; 128
 d7e:	fe ef       	ldi	r31, 0xFE	; 254
 d80:	16 16       	cp	r1, r22
 d82:	17 06       	cpc	r1, r23
 d84:	e8 07       	cpc	r30, r24
 d86:	f9 07       	cpc	r31, r25
 d88:	c0 f0       	brcs	.+48     	; 0xdba <__fp_cmp+0x46>
 d8a:	12 16       	cp	r1, r18
 d8c:	13 06       	cpc	r1, r19
 d8e:	e4 07       	cpc	r30, r20
 d90:	f5 07       	cpc	r31, r21
 d92:	98 f0       	brcs	.+38     	; 0xdba <__fp_cmp+0x46>
 d94:	62 1b       	sub	r22, r18
 d96:	73 0b       	sbc	r23, r19
 d98:	84 0b       	sbc	r24, r20
 d9a:	95 0b       	sbc	r25, r21
 d9c:	39 f4       	brne	.+14     	; 0xdac <__fp_cmp+0x38>
 d9e:	0a 26       	eor	r0, r26
 da0:	61 f0       	breq	.+24     	; 0xdba <__fp_cmp+0x46>
 da2:	23 2b       	or	r18, r19
 da4:	24 2b       	or	r18, r20
 da6:	25 2b       	or	r18, r21
 da8:	21 f4       	brne	.+8      	; 0xdb2 <__fp_cmp+0x3e>
 daa:	08 95       	ret
 dac:	0a 26       	eor	r0, r26
 dae:	09 f4       	brne	.+2      	; 0xdb2 <__fp_cmp+0x3e>
 db0:	a1 40       	sbci	r26, 0x01	; 1
 db2:	a6 95       	lsr	r26
 db4:	8f ef       	ldi	r24, 0xFF	; 255
 db6:	81 1d       	adc	r24, r1
 db8:	81 1d       	adc	r24, r1
 dba:	08 95       	ret

00000dbc <__fp_split3>:
 dbc:	57 fd       	sbrc	r21, 7
 dbe:	90 58       	subi	r25, 0x80	; 128
 dc0:	44 0f       	add	r20, r20
 dc2:	55 1f       	adc	r21, r21
 dc4:	59 f0       	breq	.+22     	; 0xddc <__fp_splitA+0x10>
 dc6:	5f 3f       	cpi	r21, 0xFF	; 255
 dc8:	71 f0       	breq	.+28     	; 0xde6 <__fp_splitA+0x1a>
 dca:	47 95       	ror	r20

00000dcc <__fp_splitA>:
 dcc:	88 0f       	add	r24, r24
 dce:	97 fb       	bst	r25, 7
 dd0:	99 1f       	adc	r25, r25
 dd2:	61 f0       	breq	.+24     	; 0xdec <__fp_splitA+0x20>
 dd4:	9f 3f       	cpi	r25, 0xFF	; 255
 dd6:	79 f0       	breq	.+30     	; 0xdf6 <__fp_splitA+0x2a>
 dd8:	87 95       	ror	r24
 dda:	08 95       	ret
 ddc:	12 16       	cp	r1, r18
 dde:	13 06       	cpc	r1, r19
 de0:	14 06       	cpc	r1, r20
 de2:	55 1f       	adc	r21, r21
 de4:	f2 cf       	rjmp	.-28     	; 0xdca <__fp_split3+0xe>
 de6:	46 95       	lsr	r20
 de8:	f1 df       	rcall	.-30     	; 0xdcc <__fp_splitA>
 dea:	08 c0       	rjmp	.+16     	; 0xdfc <__fp_splitA+0x30>
 dec:	16 16       	cp	r1, r22
 dee:	17 06       	cpc	r1, r23
 df0:	18 06       	cpc	r1, r24
 df2:	99 1f       	adc	r25, r25
 df4:	f1 cf       	rjmp	.-30     	; 0xdd8 <__fp_splitA+0xc>
 df6:	86 95       	lsr	r24
 df8:	71 05       	cpc	r23, r1
 dfa:	61 05       	cpc	r22, r1
 dfc:	08 94       	sec
 dfe:	08 95       	ret

00000e00 <__fp_zero>:
 e00:	e8 94       	clt

00000e02 <__fp_szero>:
 e02:	bb 27       	eor	r27, r27
 e04:	66 27       	eor	r22, r22
 e06:	77 27       	eor	r23, r23
 e08:	cb 01       	movw	r24, r22
 e0a:	97 f9       	bld	r25, 7
 e0c:	08 95       	ret

00000e0e <__gesf2>:
 e0e:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_cmp>
 e12:	08 f4       	brcc	.+2      	; 0xe16 <__gesf2+0x8>
 e14:	8f ef       	ldi	r24, 0xFF	; 255
 e16:	08 95       	ret

00000e18 <__mulsf3>:
 e18:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__mulsf3x>
 e1c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__fp_round>
 e20:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscA>
 e24:	38 f0       	brcs	.+14     	; 0xe34 <__mulsf3+0x1c>
 e26:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscB>
 e2a:	20 f0       	brcs	.+8      	; 0xe34 <__mulsf3+0x1c>
 e2c:	95 23       	and	r25, r21
 e2e:	11 f0       	breq	.+4      	; 0xe34 <__mulsf3+0x1c>
 e30:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
 e34:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_nan>
 e38:	11 24       	eor	r1, r1
 e3a:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>

00000e3e <__mulsf3x>:
 e3e:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fp_split3>
 e42:	70 f3       	brcs	.-36     	; 0xe20 <__mulsf3+0x8>

00000e44 <__mulsf3_pse>:
 e44:	95 9f       	mul	r25, r21
 e46:	c1 f3       	breq	.-16     	; 0xe38 <__mulsf3+0x20>
 e48:	95 0f       	add	r25, r21
 e4a:	50 e0       	ldi	r21, 0x00	; 0
 e4c:	55 1f       	adc	r21, r21
 e4e:	62 9f       	mul	r22, r18
 e50:	f0 01       	movw	r30, r0
 e52:	72 9f       	mul	r23, r18
 e54:	bb 27       	eor	r27, r27
 e56:	f0 0d       	add	r31, r0
 e58:	b1 1d       	adc	r27, r1
 e5a:	63 9f       	mul	r22, r19
 e5c:	aa 27       	eor	r26, r26
 e5e:	f0 0d       	add	r31, r0
 e60:	b1 1d       	adc	r27, r1
 e62:	aa 1f       	adc	r26, r26
 e64:	64 9f       	mul	r22, r20
 e66:	66 27       	eor	r22, r22
 e68:	b0 0d       	add	r27, r0
 e6a:	a1 1d       	adc	r26, r1
 e6c:	66 1f       	adc	r22, r22
 e6e:	82 9f       	mul	r24, r18
 e70:	22 27       	eor	r18, r18
 e72:	b0 0d       	add	r27, r0
 e74:	a1 1d       	adc	r26, r1
 e76:	62 1f       	adc	r22, r18
 e78:	73 9f       	mul	r23, r19
 e7a:	b0 0d       	add	r27, r0
 e7c:	a1 1d       	adc	r26, r1
 e7e:	62 1f       	adc	r22, r18
 e80:	83 9f       	mul	r24, r19
 e82:	a0 0d       	add	r26, r0
 e84:	61 1d       	adc	r22, r1
 e86:	22 1f       	adc	r18, r18
 e88:	74 9f       	mul	r23, r20
 e8a:	33 27       	eor	r19, r19
 e8c:	a0 0d       	add	r26, r0
 e8e:	61 1d       	adc	r22, r1
 e90:	23 1f       	adc	r18, r19
 e92:	84 9f       	mul	r24, r20
 e94:	60 0d       	add	r22, r0
 e96:	21 1d       	adc	r18, r1
 e98:	82 2f       	mov	r24, r18
 e9a:	76 2f       	mov	r23, r22
 e9c:	6a 2f       	mov	r22, r26
 e9e:	11 24       	eor	r1, r1
 ea0:	9f 57       	subi	r25, 0x7F	; 127
 ea2:	50 40       	sbci	r21, 0x00	; 0
 ea4:	9a f0       	brmi	.+38     	; 0xecc <__mulsf3_pse+0x88>
 ea6:	f1 f0       	breq	.+60     	; 0xee4 <__mulsf3_pse+0xa0>
 ea8:	88 23       	and	r24, r24
 eaa:	4a f0       	brmi	.+18     	; 0xebe <__mulsf3_pse+0x7a>
 eac:	ee 0f       	add	r30, r30
 eae:	ff 1f       	adc	r31, r31
 eb0:	bb 1f       	adc	r27, r27
 eb2:	66 1f       	adc	r22, r22
 eb4:	77 1f       	adc	r23, r23
 eb6:	88 1f       	adc	r24, r24
 eb8:	91 50       	subi	r25, 0x01	; 1
 eba:	50 40       	sbci	r21, 0x00	; 0
 ebc:	a9 f7       	brne	.-22     	; 0xea8 <__mulsf3_pse+0x64>
 ebe:	9e 3f       	cpi	r25, 0xFE	; 254
 ec0:	51 05       	cpc	r21, r1
 ec2:	80 f0       	brcs	.+32     	; 0xee4 <__mulsf3_pse+0xa0>
 ec4:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__fp_inf>
 ec8:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__fp_szero>
 ecc:	5f 3f       	cpi	r21, 0xFF	; 255
 ece:	e4 f3       	brlt	.-8      	; 0xec8 <__mulsf3_pse+0x84>
 ed0:	98 3e       	cpi	r25, 0xE8	; 232
 ed2:	d4 f3       	brlt	.-12     	; 0xec8 <__mulsf3_pse+0x84>
 ed4:	86 95       	lsr	r24
 ed6:	77 95       	ror	r23
 ed8:	67 95       	ror	r22
 eda:	b7 95       	ror	r27
 edc:	f7 95       	ror	r31
 ede:	e7 95       	ror	r30
 ee0:	9f 5f       	subi	r25, 0xFF	; 255
 ee2:	c1 f7       	brne	.-16     	; 0xed4 <__mulsf3_pse+0x90>
 ee4:	fe 2b       	or	r31, r30
 ee6:	88 0f       	add	r24, r24
 ee8:	91 1d       	adc	r25, r1
 eea:	96 95       	lsr	r25
 eec:	87 95       	ror	r24
 eee:	97 f9       	bld	r25, 7
 ef0:	08 95       	ret

00000ef2 <__fp_inf>:
 ef2:	97 f9       	bld	r25, 7
 ef4:	9f 67       	ori	r25, 0x7F	; 127
 ef6:	80 e8       	ldi	r24, 0x80	; 128
 ef8:	70 e0       	ldi	r23, 0x00	; 0
 efa:	60 e0       	ldi	r22, 0x00	; 0
 efc:	08 95       	ret

00000efe <__fp_nan>:
 efe:	9f ef       	ldi	r25, 0xFF	; 255
 f00:	80 ec       	ldi	r24, 0xC0	; 192
 f02:	08 95       	ret

00000f04 <__fp_pscA>:
 f04:	00 24       	eor	r0, r0
 f06:	0a 94       	dec	r0
 f08:	16 16       	cp	r1, r22
 f0a:	17 06       	cpc	r1, r23
 f0c:	18 06       	cpc	r1, r24
 f0e:	09 06       	cpc	r0, r25
 f10:	08 95       	ret

00000f12 <__fp_pscB>:
 f12:	00 24       	eor	r0, r0
 f14:	0a 94       	dec	r0
 f16:	12 16       	cp	r1, r18
 f18:	13 06       	cpc	r1, r19
 f1a:	14 06       	cpc	r1, r20
 f1c:	05 06       	cpc	r0, r21
 f1e:	08 95       	ret

00000f20 <__fp_round>:
 f20:	09 2e       	mov	r0, r25
 f22:	03 94       	inc	r0
 f24:	00 0c       	add	r0, r0
 f26:	11 f4       	brne	.+4      	; 0xf2c <__fp_round+0xc>
 f28:	88 23       	and	r24, r24
 f2a:	52 f0       	brmi	.+20     	; 0xf40 <__fp_round+0x20>
 f2c:	bb 0f       	add	r27, r27
 f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fp_round+0x20>
 f30:	bf 2b       	or	r27, r31
 f32:	11 f4       	brne	.+4      	; 0xf38 <__fp_round+0x18>
 f34:	60 ff       	sbrs	r22, 0
 f36:	04 c0       	rjmp	.+8      	; 0xf40 <__fp_round+0x20>
 f38:	6f 5f       	subi	r22, 0xFF	; 255
 f3a:	7f 4f       	sbci	r23, 0xFF	; 255
 f3c:	8f 4f       	sbci	r24, 0xFF	; 255
 f3e:	9f 4f       	sbci	r25, 0xFF	; 255
 f40:	08 95       	ret

00000f42 <_exit>:
 f42:	f8 94       	cli

00000f44 <__stop_program>:
 f44:	ff cf       	rjmp	.-2      	; 0xf44 <__stop_program>
