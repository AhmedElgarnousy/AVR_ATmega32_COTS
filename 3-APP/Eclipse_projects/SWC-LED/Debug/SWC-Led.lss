
SWC-LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f24  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000f24  00000f98  2**0
                  ALLOC, LOAD, DATA
  2 .stab         00001734  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f01  00000000  00000000  000026cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000035cd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000035e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00003620  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  00004003  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00004081  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b2 03 	call	0x764	; 0x764 <main>
  64:	0c 94 90 07 	jmp	0xf20	; 0xf20 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinDirection>:




u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinDirection+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinDirection+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8b 83       	std	Y+3, r24	; 0x03
  7c:	6c 83       	std	Y+4, r22	; 0x04
  7e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=0;
  80:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
  82:	8c 81       	ldd	r24, Y+4	; 0x04
  84:	88 30       	cpi	r24, 0x08	; 8
  86:	08 f0       	brcs	.+2      	; 0x8a <DIO_u8SetPinDirection+0x1e>
  88:	f3 c0       	rjmp	.+486    	; 0x270 <DIO_u8SetPinDirection+0x204>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
  8a:	8d 81       	ldd	r24, Y+5	; 0x05
  8c:	88 23       	and	r24, r24
  8e:	09 f0       	breq	.+2      	; 0x92 <DIO_u8SetPinDirection+0x26>
  90:	76 c0       	rjmp	.+236    	; 0x17e <DIO_u8SetPinDirection+0x112>
		{
			switch(Copy_u8Port)
  92:	8b 81       	ldd	r24, Y+3	; 0x03
  94:	88 2f       	mov	r24, r24
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	84 30       	cpi	r24, 0x04	; 4
  9a:	91 05       	cpc	r25, r1
  9c:	09 f4       	brne	.+2      	; 0xa0 <DIO_u8SetPinDirection+0x34>
  9e:	55 c0       	rjmp	.+170    	; 0x14a <DIO_u8SetPinDirection+0xde>
  a0:	85 30       	cpi	r24, 0x05	; 5
  a2:	91 05       	cpc	r25, r1
  a4:	0c f0       	brlt	.+2      	; 0xa8 <DIO_u8SetPinDirection+0x3c>
  a6:	68 c0       	rjmp	.+208    	; 0x178 <DIO_u8SetPinDirection+0x10c>
  a8:	83 30       	cpi	r24, 0x03	; 3
  aa:	91 05       	cpc	r25, r1
  ac:	b9 f1       	breq	.+110    	; 0x11c <DIO_u8SetPinDirection+0xb0>
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	0c f0       	brlt	.+2      	; 0xb6 <DIO_u8SetPinDirection+0x4a>
  b4:	61 c0       	rjmp	.+194    	; 0x178 <DIO_u8SetPinDirection+0x10c>
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	19 f0       	breq	.+6      	; 0xc0 <DIO_u8SetPinDirection+0x54>
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	c1 f0       	breq	.+48     	; 0xee <DIO_u8SetPinDirection+0x82>
  be:	5c c0       	rjmp	.+184    	; 0x178 <DIO_u8SetPinDirection+0x10c>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
  c0:	8a e3       	ldi	r24, 0x3A	; 58
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	fc 01       	movw	r30, r24
  c6:	80 81       	ld	r24, Z
  c8:	48 2f       	mov	r20, r24
  ca:	8c 81       	ldd	r24, Y+4	; 0x04
  cc:	28 2f       	mov	r18, r24
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_u8SetPinDirection+0x6e>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	2a 95       	dec	r18
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_u8SetPinDirection+0x6a>
  de:	80 95       	com	r24
  e0:	24 2f       	mov	r18, r20
  e2:	28 23       	and	r18, r24
  e4:	8a e3       	ldi	r24, 0x3A	; 58
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
  ec:	c3 c0       	rjmp	.+390    	; 0x274 <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
  ee:	87 e3       	ldi	r24, 0x37	; 55
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	80 81       	ld	r24, Z
  f6:	48 2f       	mov	r20, r24
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_u8SetPinDirection+0x9c>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	2a 95       	dec	r18
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_u8SetPinDirection+0x98>
 10c:	80 95       	com	r24
 10e:	24 2f       	mov	r18, r20
 110:	28 23       	and	r18, r24
 112:	87 e3       	ldi	r24, 0x37	; 55
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
 11a:	ac c0       	rjmp	.+344    	; 0x274 <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
 11c:	84 e3       	ldi	r24, 0x34	; 52
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	80 81       	ld	r24, Z
 124:	48 2f       	mov	r20, r24
 126:	8c 81       	ldd	r24, Y+4	; 0x04
 128:	28 2f       	mov	r18, r24
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_u8SetPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	2a 95       	dec	r18
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_u8SetPinDirection+0xc6>
 13a:	80 95       	com	r24
 13c:	24 2f       	mov	r18, r20
 13e:	28 23       	and	r18, r24
 140:	84 e3       	ldi	r24, 0x34	; 52
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
 148:	95 c0       	rjmp	.+298    	; 0x274 <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
 14a:	81 e3       	ldi	r24, 0x31	; 49
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8c 81       	ldd	r24, Y+4	; 0x04
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_u8SetPinDirection+0xf8>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_u8SetPinDirection+0xf4>
 168:	80 95       	com	r24
 16a:	24 2f       	mov	r18, r20
 16c:	28 23       	and	r18, r24
 16e:	81 e3       	ldi	r24, 0x31	; 49
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
 176:	7e c0       	rjmp	.+252    	; 0x274 <DIO_u8SetPinDirection+0x208>
			default:Local_u8ErrorState=1;  break;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	7b c0       	rjmp	.+246    	; 0x274 <DIO_u8SetPinDirection+0x208>
			}

		}
		else if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
 17e:	8d 81       	ldd	r24, Y+5	; 0x05
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	09 f0       	breq	.+2      	; 0x186 <DIO_u8SetPinDirection+0x11a>
 184:	72 c0       	rjmp	.+228    	; 0x26a <DIO_u8SetPinDirection+0x1fe>
		{
			switch(Copy_u8Port)
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	91 05       	cpc	r25, r1
 190:	09 f4       	brne	.+2      	; 0x194 <DIO_u8SetPinDirection+0x128>
 192:	52 c0       	rjmp	.+164    	; 0x238 <DIO_u8SetPinDirection+0x1cc>
 194:	85 30       	cpi	r24, 0x05	; 5
 196:	91 05       	cpc	r25, r1
 198:	0c f0       	brlt	.+2      	; 0x19c <DIO_u8SetPinDirection+0x130>
 19a:	64 c0       	rjmp	.+200    	; 0x264 <DIO_u8SetPinDirection+0x1f8>
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	91 05       	cpc	r25, r1
 1a0:	a9 f1       	breq	.+106    	; 0x20c <DIO_u8SetPinDirection+0x1a0>
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	91 05       	cpc	r25, r1
 1a6:	0c f0       	brlt	.+2      	; 0x1aa <DIO_u8SetPinDirection+0x13e>
 1a8:	5d c0       	rjmp	.+186    	; 0x264 <DIO_u8SetPinDirection+0x1f8>
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <DIO_u8SetPinDirection+0x148>
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	b9 f0       	breq	.+46     	; 0x1e0 <DIO_u8SetPinDirection+0x174>
 1b2:	58 c0       	rjmp	.+176    	; 0x264 <DIO_u8SetPinDirection+0x1f8>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
 1b4:	8a e3       	ldi	r24, 0x3A	; 58
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	80 81       	ld	r24, Z
 1bc:	48 2f       	mov	r20, r24
 1be:	8c 81       	ldd	r24, Y+4	; 0x04
 1c0:	28 2f       	mov	r18, r24
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_u8SetPinDirection+0x162>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	2a 95       	dec	r18
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_u8SetPinDirection+0x15e>
 1d2:	24 2f       	mov	r18, r20
 1d4:	28 2b       	or	r18, r24
 1d6:	8a e3       	ldi	r24, 0x3A	; 58
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
 1de:	4a c0       	rjmp	.+148    	; 0x274 <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
 1e0:	87 e3       	ldi	r24, 0x37	; 55
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	48 2f       	mov	r20, r24
 1ea:	8c 81       	ldd	r24, Y+4	; 0x04
 1ec:	28 2f       	mov	r18, r24
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinDirection+0x18e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	2a 95       	dec	r18
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinDirection+0x18a>
 1fe:	24 2f       	mov	r18, r20
 200:	28 2b       	or	r18, r24
 202:	87 e3       	ldi	r24, 0x37	; 55
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
 20a:	34 c0       	rjmp	.+104    	; 0x274 <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
 20c:	84 e3       	ldi	r24, 0x34	; 52
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8c 81       	ldd	r24, Y+4	; 0x04
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_u8SetPinDirection+0x1ba>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	2a 95       	dec	r18
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_u8SetPinDirection+0x1b6>
 22a:	24 2f       	mov	r18, r20
 22c:	28 2b       	or	r18, r24
 22e:	84 e3       	ldi	r24, 0x34	; 52
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	1e c0       	rjmp	.+60     	; 0x274 <DIO_u8SetPinDirection+0x208>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
 238:	81 e3       	ldi	r24, 0x31	; 49
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8c 81       	ldd	r24, Y+4	; 0x04
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_u8SetPinDirection+0x1e6>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	2a 95       	dec	r18
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_u8SetPinDirection+0x1e2>
 256:	24 2f       	mov	r18, r20
 258:	28 2b       	or	r18, r24
 25a:	81 e3       	ldi	r24, 0x31	; 49
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
 262:	08 c0       	rjmp	.+16     	; 0x274 <DIO_u8SetPinDirection+0x208>
			default: Local_u8ErrorState=1;  break;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	05 c0       	rjmp	.+10     	; 0x274 <DIO_u8SetPinDirection+0x208>
			}

		}
		else
		{
			Local_u8ErrorState=1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_u8SetPinDirection+0x208>


	}
	else
	{
		u8 Local_u8ErrorState=1;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	8a 83       	std	Y+2, r24	; 0x02

	}


	return Local_u8ErrorState;
 274:	89 81       	ldd	r24, Y+1	; 0x01

}
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <DIO_u8SetPortDirection>:
			/******************************************/
u8 DIO_u8SetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <DIO_u8SetPortDirection+0x6>
 28c:	0f 92       	push	r0
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	8a 83       	std	Y+2, r24	; 0x02
 294:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 296:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Port)
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	88 2f       	mov	r24, r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	84 30       	cpi	r24, 0x04	; 4
 2a0:	91 05       	cpc	r25, r1
 2a2:	01 f1       	breq	.+64     	; 0x2e4 <DIO_u8SetPortDirection+0x5e>
 2a4:	85 30       	cpi	r24, 0x05	; 5
 2a6:	91 05       	cpc	r25, r1
 2a8:	1c f5       	brge	.+70     	; 0x2f0 <DIO_u8SetPortDirection+0x6a>
 2aa:	83 30       	cpi	r24, 0x03	; 3
 2ac:	91 05       	cpc	r25, r1
 2ae:	a1 f0       	breq	.+40     	; 0x2d8 <DIO_u8SetPortDirection+0x52>
 2b0:	84 30       	cpi	r24, 0x04	; 4
 2b2:	91 05       	cpc	r25, r1
 2b4:	ec f4       	brge	.+58     	; 0x2f0 <DIO_u8SetPortDirection+0x6a>
 2b6:	00 97       	sbiw	r24, 0x00	; 0
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <DIO_u8SetPortDirection+0x3a>
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	39 f0       	breq	.+14     	; 0x2cc <DIO_u8SetPortDirection+0x46>
 2be:	18 c0       	rjmp	.+48     	; 0x2f0 <DIO_u8SetPortDirection+0x6a>
				{
				case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
 2c0:	8a e3       	ldi	r24, 0x3A	; 58
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	2b 81       	ldd	r18, Y+3	; 0x03
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
 2ca:	15 c0       	rjmp	.+42     	; 0x2f6 <DIO_u8SetPortDirection+0x70>
				case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
 2cc:	87 e3       	ldi	r24, 0x37	; 55
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	2b 81       	ldd	r18, Y+3	; 0x03
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
 2d6:	0f c0       	rjmp	.+30     	; 0x2f6 <DIO_u8SetPortDirection+0x70>
				case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
 2d8:	84 e3       	ldi	r24, 0x34	; 52
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	2b 81       	ldd	r18, Y+3	; 0x03
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <DIO_u8SetPortDirection+0x70>
				case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
 2e4:	81 e3       	ldi	r24, 0x31	; 49
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <DIO_u8SetPortDirection+0x70>
				default: Local_u8ErrorState=1; break;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	89 83       	std	Y+1, r24	; 0x01
 2f4:	00 00       	nop

				}

	return Local_u8ErrorState;
 2f6:	89 81       	ldd	r24, Y+1	; 0x01


}
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <DIO_u8SetPinValue>:
			/**********************************************/
u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <DIO_u8SetPinValue+0x6>
 30a:	00 d0       	rcall	.+0      	; 0x30c <DIO_u8SetPinValue+0x8>
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	8a 83       	std	Y+2, r24	; 0x02
 312:	6b 83       	std	Y+3, r22	; 0x03
 314:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
 316:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
 318:	8b 81       	ldd	r24, Y+3	; 0x03
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	08 f0       	brcs	.+2      	; 0x320 <DIO_u8SetPinValue+0x1c>
 31e:	f1 c0       	rjmp	.+482    	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
 320:	8c 81       	ldd	r24, Y+4	; 0x04
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	09 f0       	breq	.+2      	; 0x328 <DIO_u8SetPinValue+0x24>
 326:	71 c0       	rjmp	.+226    	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
		{
		switch(Copy_u8Port)
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	88 2f       	mov	r24, r24
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	84 30       	cpi	r24, 0x04	; 4
 330:	91 05       	cpc	r25, r1
 332:	09 f4       	brne	.+2      	; 0x336 <DIO_u8SetPinValue+0x32>
 334:	52 c0       	rjmp	.+164    	; 0x3da <DIO_u8SetPinValue+0xd6>
 336:	85 30       	cpi	r24, 0x05	; 5
 338:	91 05       	cpc	r25, r1
 33a:	0c f0       	brlt	.+2      	; 0x33e <DIO_u8SetPinValue+0x3a>
 33c:	64 c0       	rjmp	.+200    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	91 05       	cpc	r25, r1
 342:	a9 f1       	breq	.+106    	; 0x3ae <DIO_u8SetPinValue+0xaa>
 344:	84 30       	cpi	r24, 0x04	; 4
 346:	91 05       	cpc	r25, r1
 348:	0c f0       	brlt	.+2      	; 0x34c <DIO_u8SetPinValue+0x48>
 34a:	5d c0       	rjmp	.+186    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	19 f0       	breq	.+6      	; 0x356 <DIO_u8SetPinValue+0x52>
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	b9 f0       	breq	.+46     	; 0x382 <DIO_u8SetPinValue+0x7e>
 354:	58 c0       	rjmp	.+176    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 356:	8b e3       	ldi	r24, 0x3B	; 59
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8SetPinValue+0x6c>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	2a 95       	dec	r18
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8SetPinValue+0x68>
 374:	24 2f       	mov	r18, r20
 376:	28 2b       	or	r18, r24
 378:	8b e3       	ldi	r24, 0x3B	; 59
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
 380:	c2 c0       	rjmp	.+388    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 382:	88 e3       	ldi	r24, 0x38	; 56
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	48 2f       	mov	r20, r24
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	28 2f       	mov	r18, r24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_u8SetPinValue+0x98>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	2a 95       	dec	r18
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_u8SetPinValue+0x94>
 3a0:	24 2f       	mov	r18, r20
 3a2:	28 2b       	or	r18, r24
 3a4:	88 e3       	ldi	r24, 0x38	; 56
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	fc 01       	movw	r30, r24
 3aa:	20 83       	st	Z, r18
 3ac:	ac c0       	rjmp	.+344    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 3ae:	85 e3       	ldi	r24, 0x35	; 53
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	fc 01       	movw	r30, r24
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_u8SetPinValue+0xc4>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	2a 95       	dec	r18
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_u8SetPinValue+0xc0>
 3cc:	24 2f       	mov	r18, r20
 3ce:	28 2b       	or	r18, r24
 3d0:	85 e3       	ldi	r24, 0x35	; 53
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18
 3d8:	96 c0       	rjmp	.+300    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 3da:	82 e3       	ldi	r24, 0x32	; 50
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	48 2f       	mov	r20, r24
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_u8SetPinValue+0xf0>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	2a 95       	dec	r18
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_u8SetPinValue+0xec>
 3f8:	24 2f       	mov	r18, r20
 3fa:	28 2b       	or	r18, r24
 3fc:	82 e3       	ldi	r24, 0x32	; 50
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18
 404:	80 c0       	rjmp	.+256    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			default :Local_u8ErrorState=0;;break;
 406:	19 82       	std	Y+1, r1	; 0x01
 408:	7e c0       	rjmp	.+252    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 40a:	8c 81       	ldd	r24, Y+4	; 0x04
 40c:	88 23       	and	r24, r24
 40e:	09 f0       	breq	.+2      	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 410:	75 c0       	rjmp	.+234    	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
		{
			switch(Copy_u8Port)
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	84 30       	cpi	r24, 0x04	; 4
 41a:	91 05       	cpc	r25, r1
 41c:	09 f4       	brne	.+2      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 41e:	55 c0       	rjmp	.+170    	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
 420:	85 30       	cpi	r24, 0x05	; 5
 422:	91 05       	cpc	r25, r1
 424:	0c f0       	brlt	.+2      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
 426:	68 c0       	rjmp	.+208    	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
 428:	83 30       	cpi	r24, 0x03	; 3
 42a:	91 05       	cpc	r25, r1
 42c:	b9 f1       	breq	.+110    	; 0x49c <__FUSE_REGION_LENGTH__+0x9c>
 42e:	84 30       	cpi	r24, 0x04	; 4
 430:	91 05       	cpc	r25, r1
 432:	0c f0       	brlt	.+2      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 434:	61 c0       	rjmp	.+194    	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
 436:	00 97       	sbiw	r24, 0x00	; 0
 438:	19 f0       	breq	.+6      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	c1 f0       	breq	.+48     	; 0x46e <__FUSE_REGION_LENGTH__+0x6e>
 43e:	5c c0       	rjmp	.+184    	; 0x4f8 <__FUSE_REGION_LENGTH__+0xf8>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 440:	8b e3       	ldi	r24, 0x3B	; 59
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	48 2f       	mov	r20, r24
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	28 2f       	mov	r18, r24
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	2a 95       	dec	r18
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
 45e:	80 95       	com	r24
 460:	24 2f       	mov	r18, r20
 462:	28 23       	and	r18, r24
 464:	8b e3       	ldi	r24, 0x3B	; 59
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18
 46c:	4c c0       	rjmp	.+152    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 46e:	88 e3       	ldi	r24, 0x38	; 56
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	fc 01       	movw	r30, r24
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	28 2f       	mov	r18, r24
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	2a 95       	dec	r18
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__FUSE_REGION_LENGTH__+0x84>
 48c:	80 95       	com	r24
 48e:	24 2f       	mov	r18, r20
 490:	28 23       	and	r18, r24
 492:	88 e3       	ldi	r24, 0x38	; 56
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
 49a:	35 c0       	rjmp	.+106    	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 49c:	85 e3       	ldi	r24, 0x35	; 53
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	fc 01       	movw	r30, r24
 4a2:	80 81       	ld	r24, Z
 4a4:	48 2f       	mov	r20, r24
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <__FUSE_REGION_LENGTH__+0xb6>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	2a 95       	dec	r18
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
 4ba:	80 95       	com	r24
 4bc:	24 2f       	mov	r18, r20
 4be:	28 23       	and	r18, r24
 4c0:	85 e3       	ldi	r24, 0x35	; 53
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
 4c8:	1e c0       	rjmp	.+60     	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 4ca:	82 e3       	ldi	r24, 0x32	; 50
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	fc 01       	movw	r30, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	28 2f       	mov	r18, r24
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__FUSE_REGION_LENGTH__+0xe4>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__FUSE_REGION_LENGTH__+0xe0>
 4e8:	80 95       	com	r24
 4ea:	24 2f       	mov	r18, r20
 4ec:	28 23       	and	r18, r24
 4ee:	82 e3       	ldi	r24, 0x32	; 50
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
 4f6:	07 c0       	rjmp	.+14     	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
			default :Local_u8ErrorState=0;;break;
 4f8:	19 82       	std	Y+1, r1	; 0x01
 4fa:	05 c0       	rjmp	.+10     	; 0x506 <__FUSE_REGION_LENGTH__+0x106>


		}
		else
		{
		Local_u8ErrorState=1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	02 c0       	rjmp	.+4      	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
		}


}
else{
	 Local_u8ErrorState=1;
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 506:	89 81       	ldd	r24, Y+1	; 0x01

}
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <DIO_u8SetPortValue>:
					/***************************************/
u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 516:	cf 93       	push	r28
 518:	df 93       	push	r29
 51a:	00 d0       	rcall	.+0      	; 0x51c <DIO_u8SetPortValue+0x6>
 51c:	0f 92       	push	r0
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	8a 83       	std	Y+2, r24	; 0x02
 524:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 526:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	88 2f       	mov	r24, r24
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	84 30       	cpi	r24, 0x04	; 4
 530:	91 05       	cpc	r25, r1
 532:	01 f1       	breq	.+64     	; 0x574 <DIO_u8SetPortValue+0x5e>
 534:	85 30       	cpi	r24, 0x05	; 5
 536:	91 05       	cpc	r25, r1
 538:	1c f5       	brge	.+70     	; 0x580 <DIO_u8SetPortValue+0x6a>
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	91 05       	cpc	r25, r1
 53e:	a1 f0       	breq	.+40     	; 0x568 <DIO_u8SetPortValue+0x52>
 540:	84 30       	cpi	r24, 0x04	; 4
 542:	91 05       	cpc	r25, r1
 544:	ec f4       	brge	.+58     	; 0x580 <DIO_u8SetPortValue+0x6a>
 546:	00 97       	sbiw	r24, 0x00	; 0
 548:	19 f0       	breq	.+6      	; 0x550 <DIO_u8SetPortValue+0x3a>
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	39 f0       	breq	.+14     	; 0x55c <DIO_u8SetPortValue+0x46>
 54e:	18 c0       	rjmp	.+48     	; 0x580 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 550:	8b e3       	ldi	r24, 0x3B	; 59
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	2b 81       	ldd	r18, Y+3	; 0x03
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
 55a:	15 c0       	rjmp	.+42     	; 0x586 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 55c:	88 e3       	ldi	r24, 0x38	; 56
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	2b 81       	ldd	r18, Y+3	; 0x03
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18
 566:	0f c0       	rjmp	.+30     	; 0x586 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 568:	85 e3       	ldi	r24, 0x35	; 53
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	2b 81       	ldd	r18, Y+3	; 0x03
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18
 572:	09 c0       	rjmp	.+18     	; 0x586 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 574:	82 e3       	ldi	r24, 0x32	; 50
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	2b 81       	ldd	r18, Y+3	; 0x03
 57a:	fc 01       	movw	r30, r24
 57c:	20 83       	st	Z, r18
 57e:	03 c0       	rjmp	.+6      	; 0x586 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	89 83       	std	Y+1, r24	; 0x01
 584:	00 00       	nop
				}


	return Local_u8ErrorState;
 586:	89 81       	ldd	r24, Y+1	; 0x01

}
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	08 95       	ret

00000594 <DIO_u8GetPinValue>:

				/******************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	00 d0       	rcall	.+0      	; 0x59a <DIO_u8GetPinValue+0x6>
 59a:	00 d0       	rcall	.+0      	; 0x59c <DIO_u8GetPinValue+0x8>
 59c:	0f 92       	push	r0
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	8a 83       	std	Y+2, r24	; 0x02
 5a4:	6b 83       	std	Y+3, r22	; 0x03
 5a6:	5d 83       	std	Y+5, r21	; 0x05
 5a8:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 5aa:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 5ac:	8c 81       	ldd	r24, Y+4	; 0x04
 5ae:	9d 81       	ldd	r25, Y+5	; 0x05
 5b0:	89 2b       	or	r24, r25
 5b2:	09 f4       	brne	.+2      	; 0x5b6 <DIO_u8GetPinValue+0x22>
 5b4:	73 c0       	rjmp	.+230    	; 0x69c <DIO_u8GetPinValue+0x108>
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	88 30       	cpi	r24, 0x08	; 8
 5ba:	08 f0       	brcs	.+2      	; 0x5be <DIO_u8GetPinValue+0x2a>
 5bc:	6f c0       	rjmp	.+222    	; 0x69c <DIO_u8GetPinValue+0x108>
				{
					switch(Copy_u8Port)
 5be:	8a 81       	ldd	r24, Y+2	; 0x02
 5c0:	88 2f       	mov	r24, r24
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	84 30       	cpi	r24, 0x04	; 4
 5c6:	91 05       	cpc	r25, r1
 5c8:	09 f4       	brne	.+2      	; 0x5cc <DIO_u8GetPinValue+0x38>
 5ca:	4f c0       	rjmp	.+158    	; 0x66a <DIO_u8GetPinValue+0xd6>
 5cc:	85 30       	cpi	r24, 0x05	; 5
 5ce:	91 05       	cpc	r25, r1
 5d0:	0c f0       	brlt	.+2      	; 0x5d4 <DIO_u8GetPinValue+0x40>
 5d2:	60 c0       	rjmp	.+192    	; 0x694 <DIO_u8GetPinValue+0x100>
 5d4:	83 30       	cpi	r24, 0x03	; 3
 5d6:	91 05       	cpc	r25, r1
 5d8:	99 f1       	breq	.+102    	; 0x640 <DIO_u8GetPinValue+0xac>
 5da:	84 30       	cpi	r24, 0x04	; 4
 5dc:	91 05       	cpc	r25, r1
 5de:	0c f0       	brlt	.+2      	; 0x5e2 <DIO_u8GetPinValue+0x4e>
 5e0:	59 c0       	rjmp	.+178    	; 0x694 <DIO_u8GetPinValue+0x100>
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	19 f0       	breq	.+6      	; 0x5ec <DIO_u8GetPinValue+0x58>
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	b1 f0       	breq	.+44     	; 0x616 <DIO_u8GetPinValue+0x82>
 5ea:	54 c0       	rjmp	.+168    	; 0x694 <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 5ec:	89 e3       	ldi	r24, 0x39	; 57
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	fc 01       	movw	r30, r24
 5f2:	80 81       	ld	r24, Z
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	2b 81       	ldd	r18, Y+3	; 0x03
 5fa:	22 2f       	mov	r18, r18
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_u8GetPinValue+0x70>
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	2a 95       	dec	r18
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_u8GetPinValue+0x6c>
 608:	28 2f       	mov	r18, r24
 60a:	21 70       	andi	r18, 0x01	; 1
 60c:	8c 81       	ldd	r24, Y+4	; 0x04
 60e:	9d 81       	ldd	r25, Y+5	; 0x05
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
 614:	42 c0       	rjmp	.+132    	; 0x69a <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 616:	86 e3       	ldi	r24, 0x36	; 54
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	fc 01       	movw	r30, r24
 61c:	80 81       	ld	r24, Z
 61e:	88 2f       	mov	r24, r24
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	2b 81       	ldd	r18, Y+3	; 0x03
 624:	22 2f       	mov	r18, r18
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_u8GetPinValue+0x9a>
 62a:	95 95       	asr	r25
 62c:	87 95       	ror	r24
 62e:	2a 95       	dec	r18
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_u8GetPinValue+0x96>
 632:	28 2f       	mov	r18, r24
 634:	21 70       	andi	r18, 0x01	; 1
 636:	8c 81       	ldd	r24, Y+4	; 0x04
 638:	9d 81       	ldd	r25, Y+5	; 0x05
 63a:	fc 01       	movw	r30, r24
 63c:	20 83       	st	Z, r18
 63e:	2d c0       	rjmp	.+90     	; 0x69a <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 640:	83 e3       	ldi	r24, 0x33	; 51
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	fc 01       	movw	r30, r24
 646:	80 81       	ld	r24, Z
 648:	88 2f       	mov	r24, r24
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	2b 81       	ldd	r18, Y+3	; 0x03
 64e:	22 2f       	mov	r18, r18
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <DIO_u8GetPinValue+0xc4>
 654:	95 95       	asr	r25
 656:	87 95       	ror	r24
 658:	2a 95       	dec	r18
 65a:	e2 f7       	brpl	.-8      	; 0x654 <DIO_u8GetPinValue+0xc0>
 65c:	28 2f       	mov	r18, r24
 65e:	21 70       	andi	r18, 0x01	; 1
 660:	8c 81       	ldd	r24, Y+4	; 0x04
 662:	9d 81       	ldd	r25, Y+5	; 0x05
 664:	fc 01       	movw	r30, r24
 666:	20 83       	st	Z, r18
 668:	18 c0       	rjmp	.+48     	; 0x69a <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 66a:	80 e3       	ldi	r24, 0x30	; 48
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	fc 01       	movw	r30, r24
 670:	80 81       	ld	r24, Z
 672:	88 2f       	mov	r24, r24
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	2b 81       	ldd	r18, Y+3	; 0x03
 678:	22 2f       	mov	r18, r18
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8GetPinValue+0xee>
 67e:	95 95       	asr	r25
 680:	87 95       	ror	r24
 682:	2a 95       	dec	r18
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8GetPinValue+0xea>
 686:	28 2f       	mov	r18, r24
 688:	21 70       	andi	r18, 0x01	; 1
 68a:	8c 81       	ldd	r24, Y+4	; 0x04
 68c:	9d 81       	ldd	r25, Y+5	; 0x05
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
 692:	03 c0       	rjmp	.+6      	; 0x69a <DIO_u8GetPinValue+0x106>
					     default : Local_u8ErrorState=1; break;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_u8GetPinValue+0x10c>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 6a0:	89 81       	ldd	r24, Y+1	; 0x01


}
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <LED_u8Turn_On>:
#include "LED_interface.h"
#include "LED_interface.h"


LED_u8Turn_On(LED_t*Copy_u8Ptr)
{
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <LED_u8Turn_On+0x6>
 6b8:	0f 92       	push	r0
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	9b 83       	std	Y+3, r25	; 0x03
 6c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 6c2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Ptr->connType==LED_u8Source)
 6c4:	8a 81       	ldd	r24, Y+2	; 0x02
 6c6:	9b 81       	ldd	r25, Y+3	; 0x03
 6c8:	fc 01       	movw	r30, r24
 6ca:	82 81       	ldd	r24, Z+2	; 0x02
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	59 f4       	brne	.+22     	; 0x6e6 <LED_u8Turn_On+0x34>
	{
		DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
 6d0:	41 e0       	ldi	r20, 0x01	; 1
 6d2:	65 e0       	ldi	r22, 0x05	; 5
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	65 e0       	ldi	r22, 0x05	; 5
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	0e 94 82 01 	call	0x304	; 0x304 <DIO_u8SetPinValue>
 6e4:	0a c0       	rjmp	.+20     	; 0x6fa <LED_u8Turn_On+0x48>
	}
	else
	{
		DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	65 e0       	ldi	r22, 0x05	; 5
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
 6f0:	40 e0       	ldi	r20, 0x00	; 0
 6f2:	65 e0       	ldi	r22, 0x05	; 5
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	0e 94 82 01 	call	0x304	; 0x304 <DIO_u8SetPinValue>
	}
	return Local_u8ErrorState=1;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
}
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	0f 90       	pop	r0
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <LED_u8Turn_Off>:
/*********************************************************/
LED_u8Turn_Off(LED_t*Copy_u8Ptr)
{
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	00 d0       	rcall	.+0      	; 0x714 <LED_u8Turn_Off+0x6>
 714:	0f 92       	push	r0
 716:	cd b7       	in	r28, 0x3d	; 61
 718:	de b7       	in	r29, 0x3e	; 62
 71a:	9b 83       	std	Y+3, r25	; 0x03
 71c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=0;
 71e:	19 82       	std	Y+1, r1	; 0x01

		if(Copy_u8Ptr->connType==LED_u8Source)
 720:	8a 81       	ldd	r24, Y+2	; 0x02
 722:	9b 81       	ldd	r25, Y+3	; 0x03
 724:	fc 01       	movw	r30, r24
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	59 f4       	brne	.+22     	; 0x742 <LED_u8Turn_Off+0x34>
		{
			DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
 72c:	41 e0       	ldi	r20, 0x01	; 1
 72e:	65 e0       	ldi	r22, 0x05	; 5
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	65 e0       	ldi	r22, 0x05	; 5
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	0e 94 82 01 	call	0x304	; 0x304 <DIO_u8SetPinValue>
 740:	0a c0       	rjmp	.+20     	; 0x756 <LED_u8Turn_Off+0x48>
		}
		else
		{
			DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
 742:	41 e0       	ldi	r20, 0x01	; 1
 744:	65 e0       	ldi	r22, 0x05	; 5
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinDirection>
			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	65 e0       	ldi	r22, 0x05	; 5
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	0e 94 82 01 	call	0x304	; 0x304 <DIO_u8SetPinValue>
		}
}
 756:	00 00       	nop
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	0f 90       	pop	r0
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <main>:
#include "LED_interface.h"
#include"DIO_interface.h"


void main(void)
{
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	ce 58       	subi	r28, 0x8E	; 142
 76e:	d1 09       	sbc	r29, r1
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	de bf       	out	0x3e, r29	; 62
 776:	0f be       	out	0x3f, r0	; 63
 778:	cd bf       	out	0x3d, r28	; 61
	/*LED_t Led1={DIO_u8PORTA,DIO_u8PIN5,LED_u8Sink};
	LED_t Led2={DIO_u8PORTB,DIO_u8PIN3,LED_u8Sink};*/
	LED_t Led3={DIO_u8PORTC,DIO_u8PIN4,LED_u8Source};
 77a:	83 e0       	ldi	r24, 0x03	; 3
 77c:	89 af       	std	Y+57, r24	; 0x39
 77e:	84 e0       	ldi	r24, 0x04	; 4
 780:	8a af       	std	Y+58, r24	; 0x3a
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	8b af       	std	Y+59, r24	; 0x3b
	LED_t Led4={DIO_u8PORTD,DIO_u8PIN7,LED_u8Sink};
 786:	84 e0       	ldi	r24, 0x04	; 4
 788:	8c af       	std	Y+60, r24	; 0x3c
 78a:	87 e0       	ldi	r24, 0x07	; 7
 78c:	8d af       	std	Y+61, r24	; 0x3d
 78e:	1e ae       	std	Y+62, r1	; 0x3e
				LED_u8Turn_On(&Led2);
				_delay_ms(50);
				LED_u8Turn_Off(&Led2);
				_delay_ms(50);*/

				LED_u8Turn_On(&Led3);
 790:	ce 01       	movw	r24, r28
 792:	c9 96       	adiw	r24, 0x39	; 57
 794:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LED_u8Turn_On>
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	a8 e4       	ldi	r26, 0x48	; 72
 79e:	b2 e4       	ldi	r27, 0x42	; 66
 7a0:	8b a7       	std	Y+43, r24	; 0x2b
 7a2:	9c a7       	std	Y+44, r25	; 0x2c
 7a4:	ad a7       	std	Y+45, r26	; 0x2d
 7a6:	be a7       	std	Y+46, r27	; 0x2e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	4a e7       	ldi	r20, 0x7A	; 122
 7ae:	55 e4       	ldi	r21, 0x45	; 69
 7b0:	6b a5       	ldd	r22, Y+43	; 0x2b
 7b2:	7c a5       	ldd	r23, Y+44	; 0x2c
 7b4:	8d a5       	ldd	r24, Y+45	; 0x2d
 7b6:	9e a5       	ldd	r25, Y+46	; 0x2e
 7b8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 7bc:	63 96       	adiw	r28, 0x13	; 19
 7be:	6c af       	std	Y+60, r22	; 0x3c
 7c0:	7d af       	std	Y+61, r23	; 0x3d
 7c2:	8e af       	std	Y+62, r24	; 0x3e
 7c4:	9f af       	std	Y+63, r25	; 0x3f
 7c6:	63 97       	sbiw	r28, 0x13	; 19
 7c8:	63 96       	adiw	r28, 0x13	; 19
 7ca:	8c ad       	ldd	r24, Y+60	; 0x3c
 7cc:	9d ad       	ldd	r25, Y+61	; 0x3d
 7ce:	ae ad       	ldd	r26, Y+62	; 0x3e
 7d0:	bf ad       	ldd	r27, Y+63	; 0x3f
 7d2:	63 97       	sbiw	r28, 0x13	; 19
 7d4:	8f a7       	std	Y+47, r24	; 0x2f
 7d6:	98 ab       	std	Y+48, r25	; 0x30
 7d8:	a9 ab       	std	Y+49, r26	; 0x31
 7da:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	40 e8       	ldi	r20, 0x80	; 128
 7e2:	5f e3       	ldi	r21, 0x3F	; 63
 7e4:	6f a5       	ldd	r22, Y+47	; 0x2f
 7e6:	78 a9       	ldd	r23, Y+48	; 0x30
 7e8:	89 a9       	ldd	r24, Y+49	; 0x31
 7ea:	9a a9       	ldd	r25, Y+50	; 0x32
 7ec:	0e 94 75 06 	call	0xcea	; 0xcea <__cmpsf2>
 7f0:	88 23       	and	r24, r24
 7f2:	2c f4       	brge	.+10     	; 0x7fe <main+0x9a>
		__ticks = 1;
 7f4:	81 e0       	ldi	r24, 0x01	; 1
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	9c ab       	std	Y+52, r25	; 0x34
 7fa:	8b ab       	std	Y+51, r24	; 0x33
 7fc:	65 c0       	rjmp	.+202    	; 0x8c8 <__stack+0x69>
	else if (__tmp > 65535)
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	3f ef       	ldi	r19, 0xFF	; 255
 802:	4f e7       	ldi	r20, 0x7F	; 127
 804:	57 e4       	ldi	r21, 0x47	; 71
 806:	6f a5       	ldd	r22, Y+47	; 0x2f
 808:	78 a9       	ldd	r23, Y+48	; 0x30
 80a:	89 a9       	ldd	r24, Y+49	; 0x31
 80c:	9a a9       	ldd	r25, Y+50	; 0x32
 80e:	0e 94 f6 06 	call	0xdec	; 0xdec <__gesf2>
 812:	18 16       	cp	r1, r24
 814:	0c f0       	brlt	.+2      	; 0x818 <main+0xb4>
 816:	46 c0       	rjmp	.+140    	; 0x8a4 <__stack+0x45>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 818:	20 e0       	ldi	r18, 0x00	; 0
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	40 e2       	ldi	r20, 0x20	; 32
 81e:	51 e4       	ldi	r21, 0x41	; 65
 820:	6b a5       	ldd	r22, Y+43	; 0x2b
 822:	7c a5       	ldd	r23, Y+44	; 0x2c
 824:	8d a5       	ldd	r24, Y+45	; 0x2d
 826:	9e a5       	ldd	r25, Y+46	; 0x2e
 828:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 82c:	67 96       	adiw	r28, 0x17	; 23
 82e:	6c af       	std	Y+60, r22	; 0x3c
 830:	7d af       	std	Y+61, r23	; 0x3d
 832:	8e af       	std	Y+62, r24	; 0x3e
 834:	9f af       	std	Y+63, r25	; 0x3f
 836:	67 97       	sbiw	r28, 0x17	; 23
 838:	67 96       	adiw	r28, 0x17	; 23
 83a:	8c ad       	ldd	r24, Y+60	; 0x3c
 83c:	9d ad       	ldd	r25, Y+61	; 0x3d
 83e:	ae ad       	ldd	r26, Y+62	; 0x3e
 840:	bf ad       	ldd	r27, Y+63	; 0x3f
 842:	67 97       	sbiw	r28, 0x17	; 23
 844:	2f 96       	adiw	r28, 0x0f	; 15
 846:	8c af       	std	Y+60, r24	; 0x3c
 848:	9d af       	std	Y+61, r25	; 0x3d
 84a:	ae af       	std	Y+62, r26	; 0x3e
 84c:	bf af       	std	Y+63, r27	; 0x3f
 84e:	2f 97       	sbiw	r28, 0x0f	; 15
 850:	2f 96       	adiw	r28, 0x0f	; 15
 852:	6c ad       	ldd	r22, Y+60	; 0x3c
 854:	7d ad       	ldd	r23, Y+61	; 0x3d
 856:	8e ad       	ldd	r24, Y+62	; 0x3e
 858:	9f ad       	ldd	r25, Y+63	; 0x3f
 85a:	2f 97       	sbiw	r28, 0x0f	; 15
 85c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 860:	6b 96       	adiw	r28, 0x1b	; 27
 862:	6c af       	std	Y+60, r22	; 0x3c
 864:	7d af       	std	Y+61, r23	; 0x3d
 866:	8e af       	std	Y+62, r24	; 0x3e
 868:	9f af       	std	Y+63, r25	; 0x3f
 86a:	6b 97       	sbiw	r28, 0x1b	; 27
 86c:	69 96       	adiw	r28, 0x19	; 25
 86e:	ae ad       	ldd	r26, Y+62	; 0x3e
 870:	bf ad       	ldd	r27, Y+63	; 0x3f
 872:	69 97       	sbiw	r28, 0x19	; 25
 874:	bc ab       	std	Y+52, r27	; 0x34
 876:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
 878:	10 c0       	rjmp	.+32     	; 0x89a <__stack+0x3b>
 87a:	80 e9       	ldi	r24, 0x90	; 144
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	9e ab       	std	Y+54, r25	; 0x36
 880:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 882:	8d a9       	ldd	r24, Y+53	; 0x35
 884:	9e a9       	ldd	r25, Y+54	; 0x36
 886:	01 97       	sbiw	r24, 0x01	; 1
 888:	f1 f7       	brne	.-4      	; 0x886 <__stack+0x27>
 88a:	9e ab       	std	Y+54, r25	; 0x36
 88c:	8d ab       	std	Y+53, r24	; 0x35
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 88e:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 890:	8b a9       	ldd	r24, Y+51	; 0x33
 892:	9c a9       	ldd	r25, Y+52	; 0x34
 894:	01 97       	sbiw	r24, 0x01	; 1
 896:	9c ab       	std	Y+52, r25	; 0x34
 898:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 89a:	8b a9       	ldd	r24, Y+51	; 0x33
 89c:	9c a9       	ldd	r25, Y+52	; 0x34
 89e:	89 2b       	or	r24, r25
 8a0:	61 f7       	brne	.-40     	; 0x87a <__stack+0x1b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 8a2:	1d c0       	rjmp	.+58     	; 0x8de <__stack+0x7f>
	}
	else
		__ticks = (uint16_t)__tmp;
 8a4:	6f a5       	ldd	r22, Y+47	; 0x2f
 8a6:	78 a9       	ldd	r23, Y+48	; 0x30
 8a8:	89 a9       	ldd	r24, Y+49	; 0x31
 8aa:	9a a9       	ldd	r25, Y+50	; 0x32
 8ac:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 8b0:	6f 96       	adiw	r28, 0x1f	; 31
 8b2:	6c af       	std	Y+60, r22	; 0x3c
 8b4:	7d af       	std	Y+61, r23	; 0x3d
 8b6:	8e af       	std	Y+62, r24	; 0x3e
 8b8:	9f af       	std	Y+63, r25	; 0x3f
 8ba:	6f 97       	sbiw	r28, 0x1f	; 31
 8bc:	6d 96       	adiw	r28, 0x1d	; 29
 8be:	8e ad       	ldd	r24, Y+62	; 0x3e
 8c0:	9f ad       	ldd	r25, Y+63	; 0x3f
 8c2:	6d 97       	sbiw	r28, 0x1d	; 29
 8c4:	9c ab       	std	Y+52, r25	; 0x34
 8c6:	8b ab       	std	Y+51, r24	; 0x33
 8c8:	8b a9       	ldd	r24, Y+51	; 0x33
 8ca:	9c a9       	ldd	r25, Y+52	; 0x34
 8cc:	98 af       	std	Y+56, r25	; 0x38
 8ce:	8f ab       	std	Y+55, r24	; 0x37
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8d0:	8f a9       	ldd	r24, Y+55	; 0x37
 8d2:	98 ad       	ldd	r25, Y+56	; 0x38
 8d4:	01 97       	sbiw	r24, 0x01	; 1
 8d6:	f1 f7       	brne	.-4      	; 0x8d4 <__stack+0x75>
 8d8:	98 af       	std	Y+56, r25	; 0x38
 8da:	8f ab       	std	Y+55, r24	; 0x37
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 8dc:	00 00       	nop
				_delay_ms(50);
				LED_u8Turn_Off(&Led3);
 8de:	ce 01       	movw	r24, r28
 8e0:	c9 96       	adiw	r24, 0x39	; 57
 8e2:	0e 94 87 03 	call	0x70e	; 0x70e <LED_u8Turn_Off>
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	a8 e4       	ldi	r26, 0x48	; 72
 8ec:	b2 e4       	ldi	r27, 0x42	; 66
 8ee:	8d 8f       	std	Y+29, r24	; 0x1d
 8f0:	9e 8f       	std	Y+30, r25	; 0x1e
 8f2:	af 8f       	std	Y+31, r26	; 0x1f
 8f4:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	30 e0       	ldi	r19, 0x00	; 0
 8fa:	4a e7       	ldi	r20, 0x7A	; 122
 8fc:	55 e4       	ldi	r21, 0x45	; 69
 8fe:	6d 8d       	ldd	r22, Y+29	; 0x1d
 900:	7e 8d       	ldd	r23, Y+30	; 0x1e
 902:	8f 8d       	ldd	r24, Y+31	; 0x1f
 904:	98 a1       	ldd	r25, Y+32	; 0x20
 906:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 90a:	a3 96       	adiw	r28, 0x23	; 35
 90c:	6c af       	std	Y+60, r22	; 0x3c
 90e:	7d af       	std	Y+61, r23	; 0x3d
 910:	8e af       	std	Y+62, r24	; 0x3e
 912:	9f af       	std	Y+63, r25	; 0x3f
 914:	a3 97       	sbiw	r28, 0x23	; 35
 916:	a3 96       	adiw	r28, 0x23	; 35
 918:	8c ad       	ldd	r24, Y+60	; 0x3c
 91a:	9d ad       	ldd	r25, Y+61	; 0x3d
 91c:	ae ad       	ldd	r26, Y+62	; 0x3e
 91e:	bf ad       	ldd	r27, Y+63	; 0x3f
 920:	a3 97       	sbiw	r28, 0x23	; 35
 922:	89 a3       	std	Y+33, r24	; 0x21
 924:	9a a3       	std	Y+34, r25	; 0x22
 926:	ab a3       	std	Y+35, r26	; 0x23
 928:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 92a:	20 e0       	ldi	r18, 0x00	; 0
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	40 e8       	ldi	r20, 0x80	; 128
 930:	5f e3       	ldi	r21, 0x3F	; 63
 932:	69 a1       	ldd	r22, Y+33	; 0x21
 934:	7a a1       	ldd	r23, Y+34	; 0x22
 936:	8b a1       	ldd	r24, Y+35	; 0x23
 938:	9c a1       	ldd	r25, Y+36	; 0x24
 93a:	0e 94 75 06 	call	0xcea	; 0xcea <__cmpsf2>
 93e:	88 23       	and	r24, r24
 940:	2c f4       	brge	.+10     	; 0x94c <__stack+0xed>
		__ticks = 1;
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	9e a3       	std	Y+38, r25	; 0x26
 948:	8d a3       	std	Y+37, r24	; 0x25
 94a:	65 c0       	rjmp	.+202    	; 0xa16 <__stack+0x1b7>
	else if (__tmp > 65535)
 94c:	20 e0       	ldi	r18, 0x00	; 0
 94e:	3f ef       	ldi	r19, 0xFF	; 255
 950:	4f e7       	ldi	r20, 0x7F	; 127
 952:	57 e4       	ldi	r21, 0x47	; 71
 954:	69 a1       	ldd	r22, Y+33	; 0x21
 956:	7a a1       	ldd	r23, Y+34	; 0x22
 958:	8b a1       	ldd	r24, Y+35	; 0x23
 95a:	9c a1       	ldd	r25, Y+36	; 0x24
 95c:	0e 94 f6 06 	call	0xdec	; 0xdec <__gesf2>
 960:	18 16       	cp	r1, r24
 962:	0c f0       	brlt	.+2      	; 0x966 <__stack+0x107>
 964:	46 c0       	rjmp	.+140    	; 0x9f2 <__stack+0x193>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 966:	20 e0       	ldi	r18, 0x00	; 0
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	40 e2       	ldi	r20, 0x20	; 32
 96c:	51 e4       	ldi	r21, 0x41	; 65
 96e:	6d 8d       	ldd	r22, Y+29	; 0x1d
 970:	7e 8d       	ldd	r23, Y+30	; 0x1e
 972:	8f 8d       	ldd	r24, Y+31	; 0x1f
 974:	98 a1       	ldd	r25, Y+32	; 0x20
 976:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 97a:	a7 96       	adiw	r28, 0x27	; 39
 97c:	6c af       	std	Y+60, r22	; 0x3c
 97e:	7d af       	std	Y+61, r23	; 0x3d
 980:	8e af       	std	Y+62, r24	; 0x3e
 982:	9f af       	std	Y+63, r25	; 0x3f
 984:	a7 97       	sbiw	r28, 0x27	; 39
 986:	a7 96       	adiw	r28, 0x27	; 39
 988:	8c ad       	ldd	r24, Y+60	; 0x3c
 98a:	9d ad       	ldd	r25, Y+61	; 0x3d
 98c:	ae ad       	ldd	r26, Y+62	; 0x3e
 98e:	bf ad       	ldd	r27, Y+63	; 0x3f
 990:	a7 97       	sbiw	r28, 0x27	; 39
 992:	2b 96       	adiw	r28, 0x0b	; 11
 994:	8c af       	std	Y+60, r24	; 0x3c
 996:	9d af       	std	Y+61, r25	; 0x3d
 998:	ae af       	std	Y+62, r26	; 0x3e
 99a:	bf af       	std	Y+63, r27	; 0x3f
 99c:	2b 97       	sbiw	r28, 0x0b	; 11
 99e:	2b 96       	adiw	r28, 0x0b	; 11
 9a0:	6c ad       	ldd	r22, Y+60	; 0x3c
 9a2:	7d ad       	ldd	r23, Y+61	; 0x3d
 9a4:	8e ad       	ldd	r24, Y+62	; 0x3e
 9a6:	9f ad       	ldd	r25, Y+63	; 0x3f
 9a8:	2b 97       	sbiw	r28, 0x0b	; 11
 9aa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 9ae:	ab 96       	adiw	r28, 0x2b	; 43
 9b0:	6c af       	std	Y+60, r22	; 0x3c
 9b2:	7d af       	std	Y+61, r23	; 0x3d
 9b4:	8e af       	std	Y+62, r24	; 0x3e
 9b6:	9f af       	std	Y+63, r25	; 0x3f
 9b8:	ab 97       	sbiw	r28, 0x2b	; 43
 9ba:	a9 96       	adiw	r28, 0x29	; 41
 9bc:	ae ad       	ldd	r26, Y+62	; 0x3e
 9be:	bf ad       	ldd	r27, Y+63	; 0x3f
 9c0:	a9 97       	sbiw	r28, 0x29	; 41
 9c2:	be a3       	std	Y+38, r27	; 0x26
 9c4:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
 9c6:	10 c0       	rjmp	.+32     	; 0x9e8 <__stack+0x189>
 9c8:	80 e9       	ldi	r24, 0x90	; 144
 9ca:	91 e0       	ldi	r25, 0x01	; 1
 9cc:	98 a7       	std	Y+40, r25	; 0x28
 9ce:	8f a3       	std	Y+39, r24	; 0x27
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 9d0:	8f a1       	ldd	r24, Y+39	; 0x27
 9d2:	98 a5       	ldd	r25, Y+40	; 0x28
 9d4:	01 97       	sbiw	r24, 0x01	; 1
 9d6:	f1 f7       	brne	.-4      	; 0x9d4 <__stack+0x175>
 9d8:	98 a7       	std	Y+40, r25	; 0x28
 9da:	8f a3       	std	Y+39, r24	; 0x27
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 9dc:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 9de:	8d a1       	ldd	r24, Y+37	; 0x25
 9e0:	9e a1       	ldd	r25, Y+38	; 0x26
 9e2:	01 97       	sbiw	r24, 0x01	; 1
 9e4:	9e a3       	std	Y+38, r25	; 0x26
 9e6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 9e8:	8d a1       	ldd	r24, Y+37	; 0x25
 9ea:	9e a1       	ldd	r25, Y+38	; 0x26
 9ec:	89 2b       	or	r24, r25
 9ee:	61 f7       	brne	.-40     	; 0x9c8 <__stack+0x169>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 9f0:	1d c0       	rjmp	.+58     	; 0xa2c <__stack+0x1cd>
	}
	else
		__ticks = (uint16_t)__tmp;
 9f2:	69 a1       	ldd	r22, Y+33	; 0x21
 9f4:	7a a1       	ldd	r23, Y+34	; 0x22
 9f6:	8b a1       	ldd	r24, Y+35	; 0x23
 9f8:	9c a1       	ldd	r25, Y+36	; 0x24
 9fa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 9fe:	af 96       	adiw	r28, 0x2f	; 47
 a00:	6c af       	std	Y+60, r22	; 0x3c
 a02:	7d af       	std	Y+61, r23	; 0x3d
 a04:	8e af       	std	Y+62, r24	; 0x3e
 a06:	9f af       	std	Y+63, r25	; 0x3f
 a08:	af 97       	sbiw	r28, 0x2f	; 47
 a0a:	ad 96       	adiw	r28, 0x2d	; 45
 a0c:	8e ad       	ldd	r24, Y+62	; 0x3e
 a0e:	9f ad       	ldd	r25, Y+63	; 0x3f
 a10:	ad 97       	sbiw	r28, 0x2d	; 45
 a12:	9e a3       	std	Y+38, r25	; 0x26
 a14:	8d a3       	std	Y+37, r24	; 0x25
 a16:	8d a1       	ldd	r24, Y+37	; 0x25
 a18:	9e a1       	ldd	r25, Y+38	; 0x26
 a1a:	9a a7       	std	Y+42, r25	; 0x2a
 a1c:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a1e:	89 a5       	ldd	r24, Y+41	; 0x29
 a20:	9a a5       	ldd	r25, Y+42	; 0x2a
 a22:	01 97       	sbiw	r24, 0x01	; 1
 a24:	f1 f7       	brne	.-4      	; 0xa22 <__stack+0x1c3>
 a26:	9a a7       	std	Y+42, r25	; 0x2a
 a28:	89 a7       	std	Y+41, r24	; 0x29
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 a2a:	00 00       	nop
				_delay_ms(50);

				LED_u8Turn_On(&Led4);
 a2c:	ce 01       	movw	r24, r28
 a2e:	cc 96       	adiw	r24, 0x3c	; 60
 a30:	0e 94 59 03 	call	0x6b2	; 0x6b2 <LED_u8Turn_On>
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	a8 e4       	ldi	r26, 0x48	; 72
 a3a:	b2 e4       	ldi	r27, 0x42	; 66
 a3c:	8f 87       	std	Y+15, r24	; 0x0f
 a3e:	98 8b       	std	Y+16, r25	; 0x10
 a40:	a9 8b       	std	Y+17, r26	; 0x11
 a42:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 a44:	20 e0       	ldi	r18, 0x00	; 0
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	4a e7       	ldi	r20, 0x7A	; 122
 a4a:	55 e4       	ldi	r21, 0x45	; 69
 a4c:	6f 85       	ldd	r22, Y+15	; 0x0f
 a4e:	78 89       	ldd	r23, Y+16	; 0x10
 a50:	89 89       	ldd	r24, Y+17	; 0x11
 a52:	9a 89       	ldd	r25, Y+18	; 0x12
 a54:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 a58:	e3 96       	adiw	r28, 0x33	; 51
 a5a:	6c af       	std	Y+60, r22	; 0x3c
 a5c:	7d af       	std	Y+61, r23	; 0x3d
 a5e:	8e af       	std	Y+62, r24	; 0x3e
 a60:	9f af       	std	Y+63, r25	; 0x3f
 a62:	e3 97       	sbiw	r28, 0x33	; 51
 a64:	e3 96       	adiw	r28, 0x33	; 51
 a66:	8c ad       	ldd	r24, Y+60	; 0x3c
 a68:	9d ad       	ldd	r25, Y+61	; 0x3d
 a6a:	ae ad       	ldd	r26, Y+62	; 0x3e
 a6c:	bf ad       	ldd	r27, Y+63	; 0x3f
 a6e:	e3 97       	sbiw	r28, 0x33	; 51
 a70:	8b 8b       	std	Y+19, r24	; 0x13
 a72:	9c 8b       	std	Y+20, r25	; 0x14
 a74:	ad 8b       	std	Y+21, r26	; 0x15
 a76:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 a78:	20 e0       	ldi	r18, 0x00	; 0
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	40 e8       	ldi	r20, 0x80	; 128
 a7e:	5f e3       	ldi	r21, 0x3F	; 63
 a80:	6b 89       	ldd	r22, Y+19	; 0x13
 a82:	7c 89       	ldd	r23, Y+20	; 0x14
 a84:	8d 89       	ldd	r24, Y+21	; 0x15
 a86:	9e 89       	ldd	r25, Y+22	; 0x16
 a88:	0e 94 75 06 	call	0xcea	; 0xcea <__cmpsf2>
 a8c:	88 23       	and	r24, r24
 a8e:	2c f4       	brge	.+10     	; 0xa9a <__stack+0x23b>
		__ticks = 1;
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	98 8f       	std	Y+24, r25	; 0x18
 a96:	8f 8b       	std	Y+23, r24	; 0x17
 a98:	65 c0       	rjmp	.+202    	; 0xb64 <__stack+0x305>
	else if (__tmp > 65535)
 a9a:	20 e0       	ldi	r18, 0x00	; 0
 a9c:	3f ef       	ldi	r19, 0xFF	; 255
 a9e:	4f e7       	ldi	r20, 0x7F	; 127
 aa0:	57 e4       	ldi	r21, 0x47	; 71
 aa2:	6b 89       	ldd	r22, Y+19	; 0x13
 aa4:	7c 89       	ldd	r23, Y+20	; 0x14
 aa6:	8d 89       	ldd	r24, Y+21	; 0x15
 aa8:	9e 89       	ldd	r25, Y+22	; 0x16
 aaa:	0e 94 f6 06 	call	0xdec	; 0xdec <__gesf2>
 aae:	18 16       	cp	r1, r24
 ab0:	0c f0       	brlt	.+2      	; 0xab4 <__stack+0x255>
 ab2:	46 c0       	rjmp	.+140    	; 0xb40 <__stack+0x2e1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 ab4:	20 e0       	ldi	r18, 0x00	; 0
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	40 e2       	ldi	r20, 0x20	; 32
 aba:	51 e4       	ldi	r21, 0x41	; 65
 abc:	6f 85       	ldd	r22, Y+15	; 0x0f
 abe:	78 89       	ldd	r23, Y+16	; 0x10
 ac0:	89 89       	ldd	r24, Y+17	; 0x11
 ac2:	9a 89       	ldd	r25, Y+18	; 0x12
 ac4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 ac8:	e7 96       	adiw	r28, 0x37	; 55
 aca:	6c af       	std	Y+60, r22	; 0x3c
 acc:	7d af       	std	Y+61, r23	; 0x3d
 ace:	8e af       	std	Y+62, r24	; 0x3e
 ad0:	9f af       	std	Y+63, r25	; 0x3f
 ad2:	e7 97       	sbiw	r28, 0x37	; 55
 ad4:	e7 96       	adiw	r28, 0x37	; 55
 ad6:	8c ad       	ldd	r24, Y+60	; 0x3c
 ad8:	9d ad       	ldd	r25, Y+61	; 0x3d
 ada:	ae ad       	ldd	r26, Y+62	; 0x3e
 adc:	bf ad       	ldd	r27, Y+63	; 0x3f
 ade:	e7 97       	sbiw	r28, 0x37	; 55
 ae0:	27 96       	adiw	r28, 0x07	; 7
 ae2:	8c af       	std	Y+60, r24	; 0x3c
 ae4:	9d af       	std	Y+61, r25	; 0x3d
 ae6:	ae af       	std	Y+62, r26	; 0x3e
 ae8:	bf af       	std	Y+63, r27	; 0x3f
 aea:	27 97       	sbiw	r28, 0x07	; 7
 aec:	27 96       	adiw	r28, 0x07	; 7
 aee:	6c ad       	ldd	r22, Y+60	; 0x3c
 af0:	7d ad       	ldd	r23, Y+61	; 0x3d
 af2:	8e ad       	ldd	r24, Y+62	; 0x3e
 af4:	9f ad       	ldd	r25, Y+63	; 0x3f
 af6:	27 97       	sbiw	r28, 0x07	; 7
 af8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 afc:	eb 96       	adiw	r28, 0x3b	; 59
 afe:	6c af       	std	Y+60, r22	; 0x3c
 b00:	7d af       	std	Y+61, r23	; 0x3d
 b02:	8e af       	std	Y+62, r24	; 0x3e
 b04:	9f af       	std	Y+63, r25	; 0x3f
 b06:	eb 97       	sbiw	r28, 0x3b	; 59
 b08:	e9 96       	adiw	r28, 0x39	; 57
 b0a:	ae ad       	ldd	r26, Y+62	; 0x3e
 b0c:	bf ad       	ldd	r27, Y+63	; 0x3f
 b0e:	e9 97       	sbiw	r28, 0x39	; 57
 b10:	b8 8f       	std	Y+24, r27	; 0x18
 b12:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
 b14:	10 c0       	rjmp	.+32     	; 0xb36 <__stack+0x2d7>
 b16:	80 e9       	ldi	r24, 0x90	; 144
 b18:	91 e0       	ldi	r25, 0x01	; 1
 b1a:	9a 8f       	std	Y+26, r25	; 0x1a
 b1c:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 b1e:	89 8d       	ldd	r24, Y+25	; 0x19
 b20:	9a 8d       	ldd	r25, Y+26	; 0x1a
 b22:	01 97       	sbiw	r24, 0x01	; 1
 b24:	f1 f7       	brne	.-4      	; 0xb22 <__stack+0x2c3>
 b26:	9a 8f       	std	Y+26, r25	; 0x1a
 b28:	89 8f       	std	Y+25, r24	; 0x19
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 b2a:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b2c:	8f 89       	ldd	r24, Y+23	; 0x17
 b2e:	98 8d       	ldd	r25, Y+24	; 0x18
 b30:	01 97       	sbiw	r24, 0x01	; 1
 b32:	98 8f       	std	Y+24, r25	; 0x18
 b34:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b36:	8f 89       	ldd	r24, Y+23	; 0x17
 b38:	98 8d       	ldd	r25, Y+24	; 0x18
 b3a:	89 2b       	or	r24, r25
 b3c:	61 f7       	brne	.-40     	; 0xb16 <__stack+0x2b7>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 b3e:	1d c0       	rjmp	.+58     	; 0xb7a <__stack+0x31b>
	}
	else
		__ticks = (uint16_t)__tmp;
 b40:	6b 89       	ldd	r22, Y+19	; 0x13
 b42:	7c 89       	ldd	r23, Y+20	; 0x14
 b44:	8d 89       	ldd	r24, Y+21	; 0x15
 b46:	9e 89       	ldd	r25, Y+22	; 0x16
 b48:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 b4c:	ef 96       	adiw	r28, 0x3f	; 63
 b4e:	6c af       	std	Y+60, r22	; 0x3c
 b50:	7d af       	std	Y+61, r23	; 0x3d
 b52:	8e af       	std	Y+62, r24	; 0x3e
 b54:	9f af       	std	Y+63, r25	; 0x3f
 b56:	ef 97       	sbiw	r28, 0x3f	; 63
 b58:	ed 96       	adiw	r28, 0x3d	; 61
 b5a:	8e ad       	ldd	r24, Y+62	; 0x3e
 b5c:	9f ad       	ldd	r25, Y+63	; 0x3f
 b5e:	ed 97       	sbiw	r28, 0x3d	; 61
 b60:	98 8f       	std	Y+24, r25	; 0x18
 b62:	8f 8b       	std	Y+23, r24	; 0x17
 b64:	8f 89       	ldd	r24, Y+23	; 0x17
 b66:	98 8d       	ldd	r25, Y+24	; 0x18
 b68:	9c 8f       	std	Y+28, r25	; 0x1c
 b6a:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 b70:	01 97       	sbiw	r24, 0x01	; 1
 b72:	f1 f7       	brne	.-4      	; 0xb70 <__stack+0x311>
 b74:	9c 8f       	std	Y+28, r25	; 0x1c
 b76:	8b 8f       	std	Y+27, r24	; 0x1b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 b78:	00 00       	nop
				_delay_ms(50);
				LED_u8Turn_Off(&Led4);
 b7a:	ce 01       	movw	r24, r28
 b7c:	cc 96       	adiw	r24, 0x3c	; 60
 b7e:	0e 94 87 03 	call	0x70e	; 0x70e <LED_u8Turn_Off>
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	a8 e4       	ldi	r26, 0x48	; 72
 b88:	b2 e4       	ldi	r27, 0x42	; 66
 b8a:	89 83       	std	Y+1, r24	; 0x01
 b8c:	9a 83       	std	Y+2, r25	; 0x02
 b8e:	ab 83       	std	Y+3, r26	; 0x03
 b90:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 b92:	20 e0       	ldi	r18, 0x00	; 0
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	4a e7       	ldi	r20, 0x7A	; 122
 b98:	55 e4       	ldi	r21, 0x45	; 69
 b9a:	69 81       	ldd	r22, Y+1	; 0x01
 b9c:	7a 81       	ldd	r23, Y+2	; 0x02
 b9e:	8b 81       	ldd	r24, Y+3	; 0x03
 ba0:	9c 81       	ldd	r25, Y+4	; 0x04
 ba2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 ba6:	c1 58       	subi	r28, 0x81	; 129
 ba8:	df 4f       	sbci	r29, 0xFF	; 255
 baa:	68 83       	st	Y, r22
 bac:	79 83       	std	Y+1, r23	; 0x01
 bae:	8a 83       	std	Y+2, r24	; 0x02
 bb0:	9b 83       	std	Y+3, r25	; 0x03
 bb2:	cf 57       	subi	r28, 0x7F	; 127
 bb4:	d0 40       	sbci	r29, 0x00	; 0
 bb6:	c1 58       	subi	r28, 0x81	; 129
 bb8:	df 4f       	sbci	r29, 0xFF	; 255
 bba:	88 81       	ld	r24, Y
 bbc:	99 81       	ldd	r25, Y+1	; 0x01
 bbe:	aa 81       	ldd	r26, Y+2	; 0x02
 bc0:	bb 81       	ldd	r27, Y+3	; 0x03
 bc2:	cf 57       	subi	r28, 0x7F	; 127
 bc4:	d0 40       	sbci	r29, 0x00	; 0
 bc6:	8d 83       	std	Y+5, r24	; 0x05
 bc8:	9e 83       	std	Y+6, r25	; 0x06
 bca:	af 83       	std	Y+7, r26	; 0x07
 bcc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 bce:	20 e0       	ldi	r18, 0x00	; 0
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	40 e8       	ldi	r20, 0x80	; 128
 bd4:	5f e3       	ldi	r21, 0x3F	; 63
 bd6:	6d 81       	ldd	r22, Y+5	; 0x05
 bd8:	7e 81       	ldd	r23, Y+6	; 0x06
 bda:	8f 81       	ldd	r24, Y+7	; 0x07
 bdc:	98 85       	ldd	r25, Y+8	; 0x08
 bde:	0e 94 75 06 	call	0xcea	; 0xcea <__cmpsf2>
 be2:	88 23       	and	r24, r24
 be4:	2c f4       	brge	.+10     	; 0xbf0 <__stack+0x391>
		__ticks = 1;
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	9a 87       	std	Y+10, r25	; 0x0a
 bec:	89 87       	std	Y+9, r24	; 0x09
 bee:	71 c0       	rjmp	.+226    	; 0xcd2 <__stack+0x473>
	else if (__tmp > 65535)
 bf0:	20 e0       	ldi	r18, 0x00	; 0
 bf2:	3f ef       	ldi	r19, 0xFF	; 255
 bf4:	4f e7       	ldi	r20, 0x7F	; 127
 bf6:	57 e4       	ldi	r21, 0x47	; 71
 bf8:	6d 81       	ldd	r22, Y+5	; 0x05
 bfa:	7e 81       	ldd	r23, Y+6	; 0x06
 bfc:	8f 81       	ldd	r24, Y+7	; 0x07
 bfe:	98 85       	ldd	r25, Y+8	; 0x08
 c00:	0e 94 f6 06 	call	0xdec	; 0xdec <__gesf2>
 c04:	18 16       	cp	r1, r24
 c06:	0c f0       	brlt	.+2      	; 0xc0a <__stack+0x3ab>
 c08:	4e c0       	rjmp	.+156    	; 0xca6 <__stack+0x447>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 c0a:	20 e0       	ldi	r18, 0x00	; 0
 c0c:	30 e0       	ldi	r19, 0x00	; 0
 c0e:	40 e2       	ldi	r20, 0x20	; 32
 c10:	51 e4       	ldi	r21, 0x41	; 65
 c12:	69 81       	ldd	r22, Y+1	; 0x01
 c14:	7a 81       	ldd	r23, Y+2	; 0x02
 c16:	8b 81       	ldd	r24, Y+3	; 0x03
 c18:	9c 81       	ldd	r25, Y+4	; 0x04
 c1a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__mulsf3>
 c1e:	cd 57       	subi	r28, 0x7D	; 125
 c20:	df 4f       	sbci	r29, 0xFF	; 255
 c22:	68 83       	st	Y, r22
 c24:	79 83       	std	Y+1, r23	; 0x01
 c26:	8a 83       	std	Y+2, r24	; 0x02
 c28:	9b 83       	std	Y+3, r25	; 0x03
 c2a:	c3 58       	subi	r28, 0x83	; 131
 c2c:	d0 40       	sbci	r29, 0x00	; 0
 c2e:	cd 57       	subi	r28, 0x7D	; 125
 c30:	df 4f       	sbci	r29, 0xFF	; 255
 c32:	88 81       	ld	r24, Y
 c34:	99 81       	ldd	r25, Y+1	; 0x01
 c36:	aa 81       	ldd	r26, Y+2	; 0x02
 c38:	bb 81       	ldd	r27, Y+3	; 0x03
 c3a:	c3 58       	subi	r28, 0x83	; 131
 c3c:	d0 40       	sbci	r29, 0x00	; 0
 c3e:	23 96       	adiw	r28, 0x03	; 3
 c40:	8c af       	std	Y+60, r24	; 0x3c
 c42:	9d af       	std	Y+61, r25	; 0x3d
 c44:	ae af       	std	Y+62, r26	; 0x3e
 c46:	bf af       	std	Y+63, r27	; 0x3f
 c48:	23 97       	sbiw	r28, 0x03	; 3
 c4a:	23 96       	adiw	r28, 0x03	; 3
 c4c:	6c ad       	ldd	r22, Y+60	; 0x3c
 c4e:	7d ad       	ldd	r23, Y+61	; 0x3d
 c50:	8e ad       	ldd	r24, Y+62	; 0x3e
 c52:	9f ad       	ldd	r25, Y+63	; 0x3f
 c54:	23 97       	sbiw	r28, 0x03	; 3
 c56:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 c5a:	c9 57       	subi	r28, 0x79	; 121
 c5c:	df 4f       	sbci	r29, 0xFF	; 255
 c5e:	68 83       	st	Y, r22
 c60:	79 83       	std	Y+1, r23	; 0x01
 c62:	8a 83       	std	Y+2, r24	; 0x02
 c64:	9b 83       	std	Y+3, r25	; 0x03
 c66:	c7 58       	subi	r28, 0x87	; 135
 c68:	d0 40       	sbci	r29, 0x00	; 0
 c6a:	c9 57       	subi	r28, 0x79	; 121
 c6c:	df 4f       	sbci	r29, 0xFF	; 255
 c6e:	a8 81       	ld	r26, Y
 c70:	b9 81       	ldd	r27, Y+1	; 0x01
 c72:	c7 58       	subi	r28, 0x87	; 135
 c74:	d0 40       	sbci	r29, 0x00	; 0
 c76:	ba 87       	std	Y+10, r27	; 0x0a
 c78:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 c7a:	10 c0       	rjmp	.+32     	; 0xc9c <__stack+0x43d>
 c7c:	80 e9       	ldi	r24, 0x90	; 144
 c7e:	91 e0       	ldi	r25, 0x01	; 1
 c80:	9c 87       	std	Y+12, r25	; 0x0c
 c82:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 c84:	8b 85       	ldd	r24, Y+11	; 0x0b
 c86:	9c 85       	ldd	r25, Y+12	; 0x0c
 c88:	01 97       	sbiw	r24, 0x01	; 1
 c8a:	f1 f7       	brne	.-4      	; 0xc88 <__stack+0x429>
 c8c:	9c 87       	std	Y+12, r25	; 0x0c
 c8e:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 c90:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 c92:	89 85       	ldd	r24, Y+9	; 0x09
 c94:	9a 85       	ldd	r25, Y+10	; 0x0a
 c96:	01 97       	sbiw	r24, 0x01	; 1
 c98:	9a 87       	std	Y+10, r25	; 0x0a
 c9a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 c9c:	89 85       	ldd	r24, Y+9	; 0x09
 c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
 ca0:	89 2b       	or	r24, r25
 ca2:	61 f7       	brne	.-40     	; 0xc7c <__stack+0x41d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 ca4:	21 c0       	rjmp	.+66     	; 0xce8 <__stack+0x489>
	}
	else
		__ticks = (uint16_t)__tmp;
 ca6:	6d 81       	ldd	r22, Y+5	; 0x05
 ca8:	7e 81       	ldd	r23, Y+6	; 0x06
 caa:	8f 81       	ldd	r24, Y+7	; 0x07
 cac:	98 85       	ldd	r25, Y+8	; 0x08
 cae:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__fixunssfsi>
 cb2:	c5 57       	subi	r28, 0x75	; 117
 cb4:	df 4f       	sbci	r29, 0xFF	; 255
 cb6:	68 83       	st	Y, r22
 cb8:	79 83       	std	Y+1, r23	; 0x01
 cba:	8a 83       	std	Y+2, r24	; 0x02
 cbc:	9b 83       	std	Y+3, r25	; 0x03
 cbe:	cb 58       	subi	r28, 0x8B	; 139
 cc0:	d0 40       	sbci	r29, 0x00	; 0
 cc2:	c5 57       	subi	r28, 0x75	; 117
 cc4:	df 4f       	sbci	r29, 0xFF	; 255
 cc6:	88 81       	ld	r24, Y
 cc8:	99 81       	ldd	r25, Y+1	; 0x01
 cca:	cb 58       	subi	r28, 0x8B	; 139
 ccc:	d0 40       	sbci	r29, 0x00	; 0
 cce:	9a 87       	std	Y+10, r25	; 0x0a
 cd0:	89 87       	std	Y+9, r24	; 0x09
 cd2:	89 85       	ldd	r24, Y+9	; 0x09
 cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
 cd6:	9e 87       	std	Y+14, r25	; 0x0e
 cd8:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 cda:	8d 85       	ldd	r24, Y+13	; 0x0d
 cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
 cde:	01 97       	sbiw	r24, 0x01	; 1
 ce0:	f1 f7       	brne	.-4      	; 0xcde <__stack+0x47f>
 ce2:	9e 87       	std	Y+14, r25	; 0x0e
 ce4:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 ce6:	00 00       	nop
				LED_u8Turn_On(&Led2);
				_delay_ms(50);
				LED_u8Turn_Off(&Led2);
				_delay_ms(50);*/

				LED_u8Turn_On(&Led3);
 ce8:	53 cd       	rjmp	.-1370   	; 0x790 <main+0x2c>

00000cea <__cmpsf2>:
 cea:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_cmp>
 cee:	08 f4       	brcc	.+2      	; 0xcf2 <__cmpsf2+0x8>
 cf0:	81 e0       	ldi	r24, 0x01	; 1
 cf2:	08 95       	ret

00000cf4 <__fixunssfsi>:
 cf4:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__fp_splitA>
 cf8:	88 f0       	brcs	.+34     	; 0xd1c <__fixunssfsi+0x28>
 cfa:	9f 57       	subi	r25, 0x7F	; 127
 cfc:	98 f0       	brcs	.+38     	; 0xd24 <__fixunssfsi+0x30>
 cfe:	b9 2f       	mov	r27, r25
 d00:	99 27       	eor	r25, r25
 d02:	b7 51       	subi	r27, 0x17	; 23
 d04:	b0 f0       	brcs	.+44     	; 0xd32 <__fixunssfsi+0x3e>
 d06:	e1 f0       	breq	.+56     	; 0xd40 <__fixunssfsi+0x4c>
 d08:	66 0f       	add	r22, r22
 d0a:	77 1f       	adc	r23, r23
 d0c:	88 1f       	adc	r24, r24
 d0e:	99 1f       	adc	r25, r25
 d10:	1a f0       	brmi	.+6      	; 0xd18 <__fixunssfsi+0x24>
 d12:	ba 95       	dec	r27
 d14:	c9 f7       	brne	.-14     	; 0xd08 <__fixunssfsi+0x14>
 d16:	14 c0       	rjmp	.+40     	; 0xd40 <__fixunssfsi+0x4c>
 d18:	b1 30       	cpi	r27, 0x01	; 1
 d1a:	91 f0       	breq	.+36     	; 0xd40 <__fixunssfsi+0x4c>
 d1c:	0e 94 ef 06 	call	0xdde	; 0xdde <__fp_zero>
 d20:	b1 e0       	ldi	r27, 0x01	; 1
 d22:	08 95       	ret
 d24:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__fp_zero>
 d28:	67 2f       	mov	r22, r23
 d2a:	78 2f       	mov	r23, r24
 d2c:	88 27       	eor	r24, r24
 d2e:	b8 5f       	subi	r27, 0xF8	; 248
 d30:	39 f0       	breq	.+14     	; 0xd40 <__fixunssfsi+0x4c>
 d32:	b9 3f       	cpi	r27, 0xF9	; 249
 d34:	cc f3       	brlt	.-14     	; 0xd28 <__fixunssfsi+0x34>
 d36:	86 95       	lsr	r24
 d38:	77 95       	ror	r23
 d3a:	67 95       	ror	r22
 d3c:	b3 95       	inc	r27
 d3e:	d9 f7       	brne	.-10     	; 0xd36 <__fixunssfsi+0x42>
 d40:	3e f4       	brtc	.+14     	; 0xd50 <__fixunssfsi+0x5c>
 d42:	90 95       	com	r25
 d44:	80 95       	com	r24
 d46:	70 95       	com	r23
 d48:	61 95       	neg	r22
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	8f 4f       	sbci	r24, 0xFF	; 255
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	08 95       	ret

00000d52 <__fp_cmp>:
 d52:	99 0f       	add	r25, r25
 d54:	00 08       	sbc	r0, r0
 d56:	55 0f       	add	r21, r21
 d58:	aa 0b       	sbc	r26, r26
 d5a:	e0 e8       	ldi	r30, 0x80	; 128
 d5c:	fe ef       	ldi	r31, 0xFE	; 254
 d5e:	16 16       	cp	r1, r22
 d60:	17 06       	cpc	r1, r23
 d62:	e8 07       	cpc	r30, r24
 d64:	f9 07       	cpc	r31, r25
 d66:	c0 f0       	brcs	.+48     	; 0xd98 <__fp_cmp+0x46>
 d68:	12 16       	cp	r1, r18
 d6a:	13 06       	cpc	r1, r19
 d6c:	e4 07       	cpc	r30, r20
 d6e:	f5 07       	cpc	r31, r21
 d70:	98 f0       	brcs	.+38     	; 0xd98 <__fp_cmp+0x46>
 d72:	62 1b       	sub	r22, r18
 d74:	73 0b       	sbc	r23, r19
 d76:	84 0b       	sbc	r24, r20
 d78:	95 0b       	sbc	r25, r21
 d7a:	39 f4       	brne	.+14     	; 0xd8a <__fp_cmp+0x38>
 d7c:	0a 26       	eor	r0, r26
 d7e:	61 f0       	breq	.+24     	; 0xd98 <__fp_cmp+0x46>
 d80:	23 2b       	or	r18, r19
 d82:	24 2b       	or	r18, r20
 d84:	25 2b       	or	r18, r21
 d86:	21 f4       	brne	.+8      	; 0xd90 <__fp_cmp+0x3e>
 d88:	08 95       	ret
 d8a:	0a 26       	eor	r0, r26
 d8c:	09 f4       	brne	.+2      	; 0xd90 <__fp_cmp+0x3e>
 d8e:	a1 40       	sbci	r26, 0x01	; 1
 d90:	a6 95       	lsr	r26
 d92:	8f ef       	ldi	r24, 0xFF	; 255
 d94:	81 1d       	adc	r24, r1
 d96:	81 1d       	adc	r24, r1
 d98:	08 95       	ret

00000d9a <__fp_split3>:
 d9a:	57 fd       	sbrc	r21, 7
 d9c:	90 58       	subi	r25, 0x80	; 128
 d9e:	44 0f       	add	r20, r20
 da0:	55 1f       	adc	r21, r21
 da2:	59 f0       	breq	.+22     	; 0xdba <__fp_splitA+0x10>
 da4:	5f 3f       	cpi	r21, 0xFF	; 255
 da6:	71 f0       	breq	.+28     	; 0xdc4 <__fp_splitA+0x1a>
 da8:	47 95       	ror	r20

00000daa <__fp_splitA>:
 daa:	88 0f       	add	r24, r24
 dac:	97 fb       	bst	r25, 7
 dae:	99 1f       	adc	r25, r25
 db0:	61 f0       	breq	.+24     	; 0xdca <__fp_splitA+0x20>
 db2:	9f 3f       	cpi	r25, 0xFF	; 255
 db4:	79 f0       	breq	.+30     	; 0xdd4 <__fp_splitA+0x2a>
 db6:	87 95       	ror	r24
 db8:	08 95       	ret
 dba:	12 16       	cp	r1, r18
 dbc:	13 06       	cpc	r1, r19
 dbe:	14 06       	cpc	r1, r20
 dc0:	55 1f       	adc	r21, r21
 dc2:	f2 cf       	rjmp	.-28     	; 0xda8 <__fp_split3+0xe>
 dc4:	46 95       	lsr	r20
 dc6:	f1 df       	rcall	.-30     	; 0xdaa <__fp_splitA>
 dc8:	08 c0       	rjmp	.+16     	; 0xdda <__fp_splitA+0x30>
 dca:	16 16       	cp	r1, r22
 dcc:	17 06       	cpc	r1, r23
 dce:	18 06       	cpc	r1, r24
 dd0:	99 1f       	adc	r25, r25
 dd2:	f1 cf       	rjmp	.-30     	; 0xdb6 <__fp_splitA+0xc>
 dd4:	86 95       	lsr	r24
 dd6:	71 05       	cpc	r23, r1
 dd8:	61 05       	cpc	r22, r1
 dda:	08 94       	sec
 ddc:	08 95       	ret

00000dde <__fp_zero>:
 dde:	e8 94       	clt

00000de0 <__fp_szero>:
 de0:	bb 27       	eor	r27, r27
 de2:	66 27       	eor	r22, r22
 de4:	77 27       	eor	r23, r23
 de6:	cb 01       	movw	r24, r22
 de8:	97 f9       	bld	r25, 7
 dea:	08 95       	ret

00000dec <__gesf2>:
 dec:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_cmp>
 df0:	08 f4       	brcc	.+2      	; 0xdf4 <__gesf2+0x8>
 df2:	8f ef       	ldi	r24, 0xFF	; 255
 df4:	08 95       	ret

00000df6 <__mulsf3>:
 df6:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__mulsf3x>
 dfa:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_round>
 dfe:	0e 94 71 07 	call	0xee2	; 0xee2 <__fp_pscA>
 e02:	38 f0       	brcs	.+14     	; 0xe12 <__mulsf3+0x1c>
 e04:	0e 94 78 07 	call	0xef0	; 0xef0 <__fp_pscB>
 e08:	20 f0       	brcs	.+8      	; 0xe12 <__mulsf3+0x1c>
 e0a:	95 23       	and	r25, r21
 e0c:	11 f0       	breq	.+4      	; 0xe12 <__mulsf3+0x1c>
 e0e:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
 e12:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_nan>
 e16:	11 24       	eor	r1, r1
 e18:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_szero>

00000e1c <__mulsf3x>:
 e1c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <__fp_split3>
 e20:	70 f3       	brcs	.-36     	; 0xdfe <__mulsf3+0x8>

00000e22 <__mulsf3_pse>:
 e22:	95 9f       	mul	r25, r21
 e24:	c1 f3       	breq	.-16     	; 0xe16 <__mulsf3+0x20>
 e26:	95 0f       	add	r25, r21
 e28:	50 e0       	ldi	r21, 0x00	; 0
 e2a:	55 1f       	adc	r21, r21
 e2c:	62 9f       	mul	r22, r18
 e2e:	f0 01       	movw	r30, r0
 e30:	72 9f       	mul	r23, r18
 e32:	bb 27       	eor	r27, r27
 e34:	f0 0d       	add	r31, r0
 e36:	b1 1d       	adc	r27, r1
 e38:	63 9f       	mul	r22, r19
 e3a:	aa 27       	eor	r26, r26
 e3c:	f0 0d       	add	r31, r0
 e3e:	b1 1d       	adc	r27, r1
 e40:	aa 1f       	adc	r26, r26
 e42:	64 9f       	mul	r22, r20
 e44:	66 27       	eor	r22, r22
 e46:	b0 0d       	add	r27, r0
 e48:	a1 1d       	adc	r26, r1
 e4a:	66 1f       	adc	r22, r22
 e4c:	82 9f       	mul	r24, r18
 e4e:	22 27       	eor	r18, r18
 e50:	b0 0d       	add	r27, r0
 e52:	a1 1d       	adc	r26, r1
 e54:	62 1f       	adc	r22, r18
 e56:	73 9f       	mul	r23, r19
 e58:	b0 0d       	add	r27, r0
 e5a:	a1 1d       	adc	r26, r1
 e5c:	62 1f       	adc	r22, r18
 e5e:	83 9f       	mul	r24, r19
 e60:	a0 0d       	add	r26, r0
 e62:	61 1d       	adc	r22, r1
 e64:	22 1f       	adc	r18, r18
 e66:	74 9f       	mul	r23, r20
 e68:	33 27       	eor	r19, r19
 e6a:	a0 0d       	add	r26, r0
 e6c:	61 1d       	adc	r22, r1
 e6e:	23 1f       	adc	r18, r19
 e70:	84 9f       	mul	r24, r20
 e72:	60 0d       	add	r22, r0
 e74:	21 1d       	adc	r18, r1
 e76:	82 2f       	mov	r24, r18
 e78:	76 2f       	mov	r23, r22
 e7a:	6a 2f       	mov	r22, r26
 e7c:	11 24       	eor	r1, r1
 e7e:	9f 57       	subi	r25, 0x7F	; 127
 e80:	50 40       	sbci	r21, 0x00	; 0
 e82:	9a f0       	brmi	.+38     	; 0xeaa <__mulsf3_pse+0x88>
 e84:	f1 f0       	breq	.+60     	; 0xec2 <__mulsf3_pse+0xa0>
 e86:	88 23       	and	r24, r24
 e88:	4a f0       	brmi	.+18     	; 0xe9c <__mulsf3_pse+0x7a>
 e8a:	ee 0f       	add	r30, r30
 e8c:	ff 1f       	adc	r31, r31
 e8e:	bb 1f       	adc	r27, r27
 e90:	66 1f       	adc	r22, r22
 e92:	77 1f       	adc	r23, r23
 e94:	88 1f       	adc	r24, r24
 e96:	91 50       	subi	r25, 0x01	; 1
 e98:	50 40       	sbci	r21, 0x00	; 0
 e9a:	a9 f7       	brne	.-22     	; 0xe86 <__mulsf3_pse+0x64>
 e9c:	9e 3f       	cpi	r25, 0xFE	; 254
 e9e:	51 05       	cpc	r21, r1
 ea0:	80 f0       	brcs	.+32     	; 0xec2 <__mulsf3_pse+0xa0>
 ea2:	0c 94 68 07 	jmp	0xed0	; 0xed0 <__fp_inf>
 ea6:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__fp_szero>
 eaa:	5f 3f       	cpi	r21, 0xFF	; 255
 eac:	e4 f3       	brlt	.-8      	; 0xea6 <__mulsf3_pse+0x84>
 eae:	98 3e       	cpi	r25, 0xE8	; 232
 eb0:	d4 f3       	brlt	.-12     	; 0xea6 <__mulsf3_pse+0x84>
 eb2:	86 95       	lsr	r24
 eb4:	77 95       	ror	r23
 eb6:	67 95       	ror	r22
 eb8:	b7 95       	ror	r27
 eba:	f7 95       	ror	r31
 ebc:	e7 95       	ror	r30
 ebe:	9f 5f       	subi	r25, 0xFF	; 255
 ec0:	c1 f7       	brne	.-16     	; 0xeb2 <__mulsf3_pse+0x90>
 ec2:	fe 2b       	or	r31, r30
 ec4:	88 0f       	add	r24, r24
 ec6:	91 1d       	adc	r25, r1
 ec8:	96 95       	lsr	r25
 eca:	87 95       	ror	r24
 ecc:	97 f9       	bld	r25, 7
 ece:	08 95       	ret

00000ed0 <__fp_inf>:
 ed0:	97 f9       	bld	r25, 7
 ed2:	9f 67       	ori	r25, 0x7F	; 127
 ed4:	80 e8       	ldi	r24, 0x80	; 128
 ed6:	70 e0       	ldi	r23, 0x00	; 0
 ed8:	60 e0       	ldi	r22, 0x00	; 0
 eda:	08 95       	ret

00000edc <__fp_nan>:
 edc:	9f ef       	ldi	r25, 0xFF	; 255
 ede:	80 ec       	ldi	r24, 0xC0	; 192
 ee0:	08 95       	ret

00000ee2 <__fp_pscA>:
 ee2:	00 24       	eor	r0, r0
 ee4:	0a 94       	dec	r0
 ee6:	16 16       	cp	r1, r22
 ee8:	17 06       	cpc	r1, r23
 eea:	18 06       	cpc	r1, r24
 eec:	09 06       	cpc	r0, r25
 eee:	08 95       	ret

00000ef0 <__fp_pscB>:
 ef0:	00 24       	eor	r0, r0
 ef2:	0a 94       	dec	r0
 ef4:	12 16       	cp	r1, r18
 ef6:	13 06       	cpc	r1, r19
 ef8:	14 06       	cpc	r1, r20
 efa:	05 06       	cpc	r0, r21
 efc:	08 95       	ret

00000efe <__fp_round>:
 efe:	09 2e       	mov	r0, r25
 f00:	03 94       	inc	r0
 f02:	00 0c       	add	r0, r0
 f04:	11 f4       	brne	.+4      	; 0xf0a <__fp_round+0xc>
 f06:	88 23       	and	r24, r24
 f08:	52 f0       	brmi	.+20     	; 0xf1e <__fp_round+0x20>
 f0a:	bb 0f       	add	r27, r27
 f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fp_round+0x20>
 f0e:	bf 2b       	or	r27, r31
 f10:	11 f4       	brne	.+4      	; 0xf16 <__fp_round+0x18>
 f12:	60 ff       	sbrs	r22, 0
 f14:	04 c0       	rjmp	.+8      	; 0xf1e <__fp_round+0x20>
 f16:	6f 5f       	subi	r22, 0xFF	; 255
 f18:	7f 4f       	sbci	r23, 0xFF	; 255
 f1a:	8f 4f       	sbci	r24, 0xFF	; 255
 f1c:	9f 4f       	sbci	r25, 0xFF	; 255
 f1e:	08 95       	ret

00000f20 <_exit>:
 f20:	f8 94       	cli

00000f22 <__stop_program>:
 f22:	ff cf       	rjmp	.-2      	; 0xf22 <__stop_program>
