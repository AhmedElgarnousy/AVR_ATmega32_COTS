
SWC_KPD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000e10  00000e84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001da0  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001148  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003d84  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00003dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000532  00000000  00000000  00003e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004cb  00000000  00000000  0000434a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000115  00000000  00000000  00004815  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  0000492a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d5 05 	call	0xbaa	; 0xbaa <main>
  7a:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CLCD_voidSendCommand>:
#include"CLCD_config.h"
#include"CLCD_interface.h"
#include"CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	a3 97       	sbiw	r28, 0x23	; 35
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
  96:	8f 87       	std	Y+15, r24	; 0x0f
		/*set RS pin to LOW for command*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>

		/*set RW pin to HIGH for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>

		/*set command  to Data pins*/
		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
  ac:	6f 85       	ldd	r22, Y+15	; 0x0f
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_u8SetPortValue>

		/*set E pin to HIGH for Enable*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b0 e4       	ldi	r27, 0x40	; 64
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	9a 83       	std	Y+2, r25	; 0x02
  ca:	ab 83       	std	Y+3, r26	; 0x03
  cc:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	4a e7       	ldi	r20, 0x7A	; 122
  d4:	55 e4       	ldi	r21, 0x45	; 69
  d6:	69 81       	ldd	r22, Y+1	; 0x01
  d8:	7a 81       	ldd	r23, Y+2	; 0x02
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	9c 81       	ldd	r25, Y+4	; 0x04
  de:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
  e2:	6c 8b       	std	Y+20, r22	; 0x14
  e4:	7d 8b       	std	Y+21, r23	; 0x15
  e6:	8e 8b       	std	Y+22, r24	; 0x16
  e8:	9f 8b       	std	Y+23, r25	; 0x17
  ea:	8c 89       	ldd	r24, Y+20	; 0x14
  ec:	9d 89       	ldd	r25, Y+21	; 0x15
  ee:	ae 89       	ldd	r26, Y+22	; 0x16
  f0:	bf 89       	ldd	r27, Y+23	; 0x17
  f2:	8d 83       	std	Y+5, r24	; 0x05
  f4:	9e 83       	std	Y+6, r25	; 0x06
  f6:	af 83       	std	Y+7, r26	; 0x07
  f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 e8       	ldi	r20, 0x80	; 128
 100:	5f e3       	ldi	r21, 0x3F	; 63
 102:	6d 81       	ldd	r22, Y+5	; 0x05
 104:	7e 81       	ldd	r23, Y+6	; 0x06
 106:	8f 81       	ldd	r24, Y+7	; 0x07
 108:	98 85       	ldd	r25, Y+8	; 0x08
 10a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__cmpsf2>
 10e:	88 23       	and	r24, r24
 110:	2c f4       	brge	.+10     	; 0x11c <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9a 87       	std	Y+10, r25	; 0x0a
 118:	89 87       	std	Y+9, r24	; 0x09
 11a:	54 c0       	rjmp	.+168    	; 0x1c4 <CLCD_voidSendCommand+0x142>
	else if (__tmp > 65535)
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	3f ef       	ldi	r19, 0xFF	; 255
 120:	4f e7       	ldi	r20, 0x7F	; 127
 122:	57 e4       	ldi	r21, 0x47	; 71
 124:	6d 81       	ldd	r22, Y+5	; 0x05
 126:	7e 81       	ldd	r23, Y+6	; 0x06
 128:	8f 81       	ldd	r24, Y+7	; 0x07
 12a:	98 85       	ldd	r25, Y+8	; 0x08
 12c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__gesf2>
 130:	18 16       	cp	r1, r24
 132:	d4 f5       	brge	.+116    	; 0x1a8 <CLCD_voidSendCommand+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 e2       	ldi	r20, 0x20	; 32
 13a:	51 e4       	ldi	r21, 0x41	; 65
 13c:	69 81       	ldd	r22, Y+1	; 0x01
 13e:	7a 81       	ldd	r23, Y+2	; 0x02
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	9c 81       	ldd	r25, Y+4	; 0x04
 144:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
 148:	68 8f       	std	Y+24, r22	; 0x18
 14a:	79 8f       	std	Y+25, r23	; 0x19
 14c:	8a 8f       	std	Y+26, r24	; 0x1a
 14e:	9b 8f       	std	Y+27, r25	; 0x1b
 150:	88 8d       	ldd	r24, Y+24	; 0x18
 152:	99 8d       	ldd	r25, Y+25	; 0x19
 154:	aa 8d       	ldd	r26, Y+26	; 0x1a
 156:	bb 8d       	ldd	r27, Y+27	; 0x1b
 158:	88 8b       	std	Y+16, r24	; 0x10
 15a:	99 8b       	std	Y+17, r25	; 0x11
 15c:	aa 8b       	std	Y+18, r26	; 0x12
 15e:	bb 8b       	std	Y+19, r27	; 0x13
 160:	68 89       	ldd	r22, Y+16	; 0x10
 162:	79 89       	ldd	r23, Y+17	; 0x11
 164:	8a 89       	ldd	r24, Y+18	; 0x12
 166:	9b 89       	ldd	r25, Y+19	; 0x13
 168:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fixunssfsi>
 16c:	6c 8f       	std	Y+28, r22	; 0x1c
 16e:	7d 8f       	std	Y+29, r23	; 0x1d
 170:	8e 8f       	std	Y+30, r24	; 0x1e
 172:	9f 8f       	std	Y+31, r25	; 0x1f
 174:	ac 8d       	ldd	r26, Y+28	; 0x1c
 176:	bd 8d       	ldd	r27, Y+29	; 0x1d
 178:	ba 87       	std	Y+10, r27	; 0x0a
 17a:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 17c:	10 c0       	rjmp	.+32     	; 0x19e <CLCD_voidSendCommand+0x11c>
 17e:	80 e9       	ldi	r24, 0x90	; 144
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	9c 87       	std	Y+12, r25	; 0x0c
 184:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 186:	8b 85       	ldd	r24, Y+11	; 0x0b
 188:	9c 85       	ldd	r25, Y+12	; 0x0c
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <CLCD_voidSendCommand+0x108>
 18e:	9c 87       	std	Y+12, r25	; 0x0c
 190:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 192:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 194:	89 85       	ldd	r24, Y+9	; 0x09
 196:	9a 85       	ldd	r25, Y+10	; 0x0a
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	9a 87       	std	Y+10, r25	; 0x0a
 19c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	89 85       	ldd	r24, Y+9	; 0x09
 1a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a2:	89 2b       	or	r24, r25
 1a4:	61 f7       	brne	.-40     	; 0x17e <CLCD_voidSendCommand+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 1a6:	19 c0       	rjmp	.+50     	; 0x1da <CLCD_voidSendCommand+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
 1a8:	6d 81       	ldd	r22, Y+5	; 0x05
 1aa:	7e 81       	ldd	r23, Y+6	; 0x06
 1ac:	8f 81       	ldd	r24, Y+7	; 0x07
 1ae:	98 85       	ldd	r25, Y+8	; 0x08
 1b0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fixunssfsi>
 1b4:	68 a3       	std	Y+32, r22	; 0x20
 1b6:	79 a3       	std	Y+33, r23	; 0x21
 1b8:	8a a3       	std	Y+34, r24	; 0x22
 1ba:	9b a3       	std	Y+35, r25	; 0x23
 1bc:	88 a1       	ldd	r24, Y+32	; 0x20
 1be:	99 a1       	ldd	r25, Y+33	; 0x21
 1c0:	9a 87       	std	Y+10, r25	; 0x0a
 1c2:	89 87       	std	Y+9, r24	; 0x09
 1c4:	89 85       	ldd	r24, Y+9	; 0x09
 1c6:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c8:	9e 87       	std	Y+14, r25	; 0x0e
 1ca:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1cc:	8d 85       	ldd	r24, Y+13	; 0x0d
 1ce:	9e 85       	ldd	r25, Y+14	; 0x0e
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <CLCD_voidSendCommand+0x14e>
 1d4:	9e 87       	std	Y+14, r25	; 0x0e
 1d6:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 1d8:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>
}
 1e4:	00 00       	nop
 1e6:	a3 96       	adiw	r28, 0x23	; 35
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	a3 97       	sbiw	r28, 0x23	; 35
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to LOW for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>

	/*set RW pin to HIGH for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	83 e0       	ldi	r24, 0x03	; 3
 21e:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>

	/*set COMMAND  to Data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
 222:	6f 85       	ldd	r22, Y+15	; 0x0f
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 6e 04 	call	0x8dc	; 0x8dc <DIO_u8SetPortValue>

	/*set E pin to HIGH for Enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	a0 e0       	ldi	r26, 0x00	; 0
 23a:	b0 e4       	ldi	r27, 0x40	; 64
 23c:	89 83       	std	Y+1, r24	; 0x01
 23e:	9a 83       	std	Y+2, r25	; 0x02
 240:	ab 83       	std	Y+3, r26	; 0x03
 242:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	4a e7       	ldi	r20, 0x7A	; 122
 24a:	55 e4       	ldi	r21, 0x45	; 69
 24c:	69 81       	ldd	r22, Y+1	; 0x01
 24e:	7a 81       	ldd	r23, Y+2	; 0x02
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	9c 81       	ldd	r25, Y+4	; 0x04
 254:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
 258:	6c 8b       	std	Y+20, r22	; 0x14
 25a:	7d 8b       	std	Y+21, r23	; 0x15
 25c:	8e 8b       	std	Y+22, r24	; 0x16
 25e:	9f 8b       	std	Y+23, r25	; 0x17
 260:	8c 89       	ldd	r24, Y+20	; 0x14
 262:	9d 89       	ldd	r25, Y+21	; 0x15
 264:	ae 89       	ldd	r26, Y+22	; 0x16
 266:	bf 89       	ldd	r27, Y+23	; 0x17
 268:	8d 83       	std	Y+5, r24	; 0x05
 26a:	9e 83       	std	Y+6, r25	; 0x06
 26c:	af 83       	std	Y+7, r26	; 0x07
 26e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e8       	ldi	r20, 0x80	; 128
 276:	5f e3       	ldi	r21, 0x3F	; 63
 278:	6d 81       	ldd	r22, Y+5	; 0x05
 27a:	7e 81       	ldd	r23, Y+6	; 0x06
 27c:	8f 81       	ldd	r24, Y+7	; 0x07
 27e:	98 85       	ldd	r25, Y+8	; 0x08
 280:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__cmpsf2>
 284:	88 23       	and	r24, r24
 286:	2c f4       	brge	.+10     	; 0x292 <CLCD_voidSendData+0x9a>
		__ticks = 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	9a 87       	std	Y+10, r25	; 0x0a
 28e:	89 87       	std	Y+9, r24	; 0x09
 290:	54 c0       	rjmp	.+168    	; 0x33a <CLCD_voidSendData+0x142>
	else if (__tmp > 65535)
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	3f ef       	ldi	r19, 0xFF	; 255
 296:	4f e7       	ldi	r20, 0x7F	; 127
 298:	57 e4       	ldi	r21, 0x47	; 71
 29a:	6d 81       	ldd	r22, Y+5	; 0x05
 29c:	7e 81       	ldd	r23, Y+6	; 0x06
 29e:	8f 81       	ldd	r24, Y+7	; 0x07
 2a0:	98 85       	ldd	r25, Y+8	; 0x08
 2a2:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__gesf2>
 2a6:	18 16       	cp	r1, r24
 2a8:	d4 f5       	brge	.+116    	; 0x31e <CLCD_voidSendData+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e2       	ldi	r20, 0x20	; 32
 2b0:	51 e4       	ldi	r21, 0x41	; 65
 2b2:	69 81       	ldd	r22, Y+1	; 0x01
 2b4:	7a 81       	ldd	r23, Y+2	; 0x02
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ba:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
 2be:	68 8f       	std	Y+24, r22	; 0x18
 2c0:	79 8f       	std	Y+25, r23	; 0x19
 2c2:	8a 8f       	std	Y+26, r24	; 0x1a
 2c4:	9b 8f       	std	Y+27, r25	; 0x1b
 2c6:	88 8d       	ldd	r24, Y+24	; 0x18
 2c8:	99 8d       	ldd	r25, Y+25	; 0x19
 2ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
 2cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
 2ce:	88 8b       	std	Y+16, r24	; 0x10
 2d0:	99 8b       	std	Y+17, r25	; 0x11
 2d2:	aa 8b       	std	Y+18, r26	; 0x12
 2d4:	bb 8b       	std	Y+19, r27	; 0x13
 2d6:	68 89       	ldd	r22, Y+16	; 0x10
 2d8:	79 89       	ldd	r23, Y+17	; 0x11
 2da:	8a 89       	ldd	r24, Y+18	; 0x12
 2dc:	9b 89       	ldd	r25, Y+19	; 0x13
 2de:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fixunssfsi>
 2e2:	6c 8f       	std	Y+28, r22	; 0x1c
 2e4:	7d 8f       	std	Y+29, r23	; 0x1d
 2e6:	8e 8f       	std	Y+30, r24	; 0x1e
 2e8:	9f 8f       	std	Y+31, r25	; 0x1f
 2ea:	ac 8d       	ldd	r26, Y+28	; 0x1c
 2ec:	bd 8d       	ldd	r27, Y+29	; 0x1d
 2ee:	ba 87       	std	Y+10, r27	; 0x0a
 2f0:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 2f2:	10 c0       	rjmp	.+32     	; 0x314 <CLCD_voidSendData+0x11c>
 2f4:	80 e9       	ldi	r24, 0x90	; 144
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	9c 87       	std	Y+12, r25	; 0x0c
 2fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2fc:	8b 85       	ldd	r24, Y+11	; 0x0b
 2fe:	9c 85       	ldd	r25, Y+12	; 0x0c
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <CLCD_voidSendData+0x108>
 304:	9c 87       	std	Y+12, r25	; 0x0c
 306:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 308:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 30a:	89 85       	ldd	r24, Y+9	; 0x09
 30c:	9a 85       	ldd	r25, Y+10	; 0x0a
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	9a 87       	std	Y+10, r25	; 0x0a
 312:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 314:	89 85       	ldd	r24, Y+9	; 0x09
 316:	9a 85       	ldd	r25, Y+10	; 0x0a
 318:	89 2b       	or	r24, r25
 31a:	61 f7       	brne	.-40     	; 0x2f4 <CLCD_voidSendData+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 31c:	19 c0       	rjmp	.+50     	; 0x350 <CLCD_voidSendData+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
 31e:	6d 81       	ldd	r22, Y+5	; 0x05
 320:	7e 81       	ldd	r23, Y+6	; 0x06
 322:	8f 81       	ldd	r24, Y+7	; 0x07
 324:	98 85       	ldd	r25, Y+8	; 0x08
 326:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fixunssfsi>
 32a:	68 a3       	std	Y+32, r22	; 0x20
 32c:	79 a3       	std	Y+33, r23	; 0x21
 32e:	8a a3       	std	Y+34, r24	; 0x22
 330:	9b a3       	std	Y+35, r25	; 0x23
 332:	88 a1       	ldd	r24, Y+32	; 0x20
 334:	99 a1       	ldd	r25, Y+33	; 0x21
 336:	9a 87       	std	Y+10, r25	; 0x0a
 338:	89 87       	std	Y+9, r24	; 0x09
 33a:	89 85       	ldd	r24, Y+9	; 0x09
 33c:	9a 85       	ldd	r25, Y+10	; 0x0a
 33e:	9e 87       	std	Y+14, r25	; 0x0e
 340:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 342:	8d 85       	ldd	r24, Y+13	; 0x0d
 344:	9e 85       	ldd	r25, Y+14	; 0x0e
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <CLCD_voidSendData+0x14e>
 34a:	9e 87       	std	Y+14, r25	; 0x0e
 34c:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 34e:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	62 e0       	ldi	r22, 0x02	; 2
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>

}
 35a:	00 00       	nop
 35c:	a3 96       	adiw	r28, 0x23	; 35
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <CLCD_voidInit>:
void CLCD_voidInit(void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	a2 97       	sbiw	r28, 0x22	; 34
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	a0 e2       	ldi	r26, 0x20	; 32
 388:	b2 e4       	ldi	r27, 0x42	; 66
 38a:	89 83       	std	Y+1, r24	; 0x01
 38c:	9a 83       	std	Y+2, r25	; 0x02
 38e:	ab 83       	std	Y+3, r26	; 0x03
 390:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	4a e7       	ldi	r20, 0x7A	; 122
 398:	55 e4       	ldi	r21, 0x45	; 69
 39a:	69 81       	ldd	r22, Y+1	; 0x01
 39c:	7a 81       	ldd	r23, Y+2	; 0x02
 39e:	8b 81       	ldd	r24, Y+3	; 0x03
 3a0:	9c 81       	ldd	r25, Y+4	; 0x04
 3a2:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
 3a6:	6b 8b       	std	Y+19, r22	; 0x13
 3a8:	7c 8b       	std	Y+20, r23	; 0x14
 3aa:	8d 8b       	std	Y+21, r24	; 0x15
 3ac:	9e 8b       	std	Y+22, r25	; 0x16
 3ae:	8b 89       	ldd	r24, Y+19	; 0x13
 3b0:	9c 89       	ldd	r25, Y+20	; 0x14
 3b2:	ad 89       	ldd	r26, Y+21	; 0x15
 3b4:	be 89       	ldd	r27, Y+22	; 0x16
 3b6:	8d 83       	std	Y+5, r24	; 0x05
 3b8:	9e 83       	std	Y+6, r25	; 0x06
 3ba:	af 83       	std	Y+7, r26	; 0x07
 3bc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	40 e8       	ldi	r20, 0x80	; 128
 3c4:	5f e3       	ldi	r21, 0x3F	; 63
 3c6:	6d 81       	ldd	r22, Y+5	; 0x05
 3c8:	7e 81       	ldd	r23, Y+6	; 0x06
 3ca:	8f 81       	ldd	r24, Y+7	; 0x07
 3cc:	98 85       	ldd	r25, Y+8	; 0x08
 3ce:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__cmpsf2>
 3d2:	88 23       	and	r24, r24
 3d4:	2c f4       	brge	.+10     	; 0x3e0 <CLCD_voidInit+0x72>
		__ticks = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	9a 87       	std	Y+10, r25	; 0x0a
 3dc:	89 87       	std	Y+9, r24	; 0x09
 3de:	54 c0       	rjmp	.+168    	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
	else if (__tmp > 65535)
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	3f ef       	ldi	r19, 0xFF	; 255
 3e4:	4f e7       	ldi	r20, 0x7F	; 127
 3e6:	57 e4       	ldi	r21, 0x47	; 71
 3e8:	6d 81       	ldd	r22, Y+5	; 0x05
 3ea:	7e 81       	ldd	r23, Y+6	; 0x06
 3ec:	8f 81       	ldd	r24, Y+7	; 0x07
 3ee:	98 85       	ldd	r25, Y+8	; 0x08
 3f0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <__gesf2>
 3f4:	18 16       	cp	r1, r24
 3f6:	d4 f5       	brge	.+116    	; 0x46c <__FUSE_REGION_LENGTH__+0x6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 e2       	ldi	r20, 0x20	; 32
 3fe:	51 e4       	ldi	r21, 0x41	; 65
 400:	69 81       	ldd	r22, Y+1	; 0x01
 402:	7a 81       	ldd	r23, Y+2	; 0x02
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	9c 81       	ldd	r25, Y+4	; 0x04
 408:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsf3>
 40c:	6f 8b       	std	Y+23, r22	; 0x17
 40e:	78 8f       	std	Y+24, r23	; 0x18
 410:	89 8f       	std	Y+25, r24	; 0x19
 412:	9a 8f       	std	Y+26, r25	; 0x1a
 414:	8f 89       	ldd	r24, Y+23	; 0x17
 416:	98 8d       	ldd	r25, Y+24	; 0x18
 418:	a9 8d       	ldd	r26, Y+25	; 0x19
 41a:	ba 8d       	ldd	r27, Y+26	; 0x1a
 41c:	8f 87       	std	Y+15, r24	; 0x0f
 41e:	98 8b       	std	Y+16, r25	; 0x10
 420:	a9 8b       	std	Y+17, r26	; 0x11
 422:	ba 8b       	std	Y+18, r27	; 0x12
 424:	6f 85       	ldd	r22, Y+15	; 0x0f
 426:	78 89       	ldd	r23, Y+16	; 0x10
 428:	89 89       	ldd	r24, Y+17	; 0x11
 42a:	9a 89       	ldd	r25, Y+18	; 0x12
 42c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fixunssfsi>
 430:	6b 8f       	std	Y+27, r22	; 0x1b
 432:	7c 8f       	std	Y+28, r23	; 0x1c
 434:	8d 8f       	std	Y+29, r24	; 0x1d
 436:	9e 8f       	std	Y+30, r25	; 0x1e
 438:	ab 8d       	ldd	r26, Y+27	; 0x1b
 43a:	bc 8d       	ldd	r27, Y+28	; 0x1c
 43c:	ba 87       	std	Y+10, r27	; 0x0a
 43e:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 440:	10 c0       	rjmp	.+32     	; 0x462 <__FUSE_REGION_LENGTH__+0x62>
 442:	80 e9       	ldi	r24, 0x90	; 144
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	9c 87       	std	Y+12, r25	; 0x0c
 448:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 44a:	8b 85       	ldd	r24, Y+11	; 0x0b
 44c:	9c 85       	ldd	r25, Y+12	; 0x0c
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
 452:	9c 87       	std	Y+12, r25	; 0x0c
 454:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 456:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 458:	89 85       	ldd	r24, Y+9	; 0x09
 45a:	9a 85       	ldd	r25, Y+10	; 0x0a
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	9a 87       	std	Y+10, r25	; 0x0a
 460:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 462:	89 85       	ldd	r24, Y+9	; 0x09
 464:	9a 85       	ldd	r25, Y+10	; 0x0a
 466:	89 2b       	or	r24, r25
 468:	61 f7       	brne	.-40     	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 46a:	19 c0       	rjmp	.+50     	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
	}
	else
		__ticks = (uint16_t)__tmp;
 46c:	6d 81       	ldd	r22, Y+5	; 0x05
 46e:	7e 81       	ldd	r23, Y+6	; 0x06
 470:	8f 81       	ldd	r24, Y+7	; 0x07
 472:	98 85       	ldd	r25, Y+8	; 0x08
 474:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <__fixunssfsi>
 478:	6f 8f       	std	Y+31, r22	; 0x1f
 47a:	78 a3       	std	Y+32, r23	; 0x20
 47c:	89 a3       	std	Y+33, r24	; 0x21
 47e:	9a a3       	std	Y+34, r25	; 0x22
 480:	8f 8d       	ldd	r24, Y+31	; 0x1f
 482:	98 a1       	ldd	r25, Y+32	; 0x20
 484:	9a 87       	std	Y+10, r25	; 0x0a
 486:	89 87       	std	Y+9, r24	; 0x09
 488:	89 85       	ldd	r24, Y+9	; 0x09
 48a:	9a 85       	ldd	r25, Y+10	; 0x0a
 48c:	9e 87       	std	Y+14, r25	; 0x0e
 48e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 490:	8d 85       	ldd	r24, Y+13	; 0x0d
 492:	9e 85       	ldd	r25, Y+14	; 0x0e
 494:	01 97       	sbiw	r24, 0x01	; 1
 496:	f1 f7       	brne	.-4      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 498:	9e 87       	std	Y+14, r25	; 0x0e
 49a:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 49c:	00 00       	nop
	/*wait for more than 30ms*/
	_delay_ms(40);

	/*function set command: 2 lines"1", 5*8 Font Size"0"*/
	CLCD_voidSendCommand(0b00111000);
 49e:	88 e3       	ldi	r24, 0x38	; 56
 4a0:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

	/*Display ON/OFF control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
 4a4:	8c e0       	ldi	r24, 0x0C	; 12
 4a6:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

 	/*Display clear*/
	CLCD_voidSendCommand(0b00000001);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

	/*entry mode set
	*/

}
 4b0:	00 00       	nop
 4b2:	a2 96       	adiw	r28, 0x22	; 34
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <CLCD_voidSendString>:

void CLCD_voidSendString(const char*Copy_pcString )
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <CLCD_voidSendString+0x6>
 4ca:	0f 92       	push	r0
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	9b 83       	std	Y+3, r25	; 0x03
 4d2:	8a 83       	std	Y+2, r24	; 0x02
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
 4d4:	19 82       	std	Y+1, r1	; 0x01
	while(Copy_pcString[Local_u8Counter]!='\0')
 4d6:	0e c0       	rjmp	.+28     	; 0x4f4 <CLCD_voidSendString+0x30>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	2a 81       	ldd	r18, Y+2	; 0x02
 4e0:	3b 81       	ldd	r19, Y+3	; 0x03
 4e2:	82 0f       	add	r24, r18
 4e4:	93 1f       	adc	r25, r19
 4e6:	fc 01       	movw	r30, r24
 4e8:	80 81       	ld	r24, Z
 4ea:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
	Local_u8Counter++;
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
 4f0:	8f 5f       	subi	r24, 0xFF	; 255
 4f2:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char*Copy_pcString )
{
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	88 2f       	mov	r24, r24
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	2a 81       	ldd	r18, Y+2	; 0x02
 4fc:	3b 81       	ldd	r19, Y+3	; 0x03
 4fe:	82 0f       	add	r24, r18
 500:	93 1f       	adc	r25, r19
 502:	fc 01       	movw	r30, r24
 504:	80 81       	ld	r24, Z
 506:	88 23       	and	r24, r24
 508:	39 f7       	brne	.-50     	; 0x4d8 <CLCD_voidSendString+0x14>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
	Local_u8Counter++;
	}

}
 50a:	00 00       	nop
 50c:	00 00       	nop
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	0f 90       	pop	r0
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	00 d0       	rcall	.+0      	; 0x520 <CLCD_voidGoToXY+0x6>
 520:	00 d0       	rcall	.+0      	; 0x522 <CLCD_voidGoToXY+0x8>
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	8b 83       	std	Y+3, r24	; 0x03
 528:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=0;
 52a:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	88 23       	and	r24, r24
 530:	19 f4       	brne	.+6      	; 0x538 <CLCD_voidGoToXY+0x1e>
	{
		/*Location is at first line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos;
 532:	8c 81       	ldd	r24, Y+4	; 0x04
 534:	89 83       	std	Y+1, r24	; 0x01
 536:	06 c0       	rjmp	.+12     	; 0x544 <CLCD_voidGoToXY+0x2a>
	}
	else if(Copy_u8XPos==1)
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	19 f4       	brne	.+6      	; 0x544 <CLCD_voidGoToXY+0x2a>
	{
		/*Location is at Second line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos+0x40;
 53e:	8c 81       	ldd	r24, Y+4	; 0x04
 540:	80 5c       	subi	r24, 0xC0	; 192
 542:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	80 58       	subi	r24, 0x80	; 128
 548:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
}
 54c:	00 00       	nop
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8*Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	00 d0       	rcall	.+0      	; 0x562 <CLCD_voidWriteSpecialCharacter+0x6>
 562:	00 d0       	rcall	.+0      	; 0x564 <CLCD_voidWriteSpecialCharacter+0x8>
 564:	00 d0       	rcall	.+0      	; 0x566 <CLCD_voidWriteSpecialCharacter+0xa>
 566:	0f 92       	push	r0
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	9c 83       	std	Y+4, r25	; 0x04
 56e:	8b 83       	std	Y+3, r24	; 0x03
 570:	6d 83       	std	Y+5, r22	; 0x05
 572:	4e 83       	std	Y+6, r20	; 0x06
 574:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
 576:	1a 82       	std	Y+2, r1	; 0x02
	/*calculate the CGRAM Address whose each block is 8 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
 578:	8d 81       	ldd	r24, Y+5	; 0x05
 57a:	88 0f       	add	r24, r24
 57c:	88 0f       	add	r24, r24
 57e:	88 0f       	add	r24, r24
 580:	8a 83       	std	Y+2, r24	; 0x02
	/*send SGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
 582:	8a 81       	ldd	r24, Y+2	; 0x02
 584:	80 5c       	subi	r24, 0xC0	; 192
 586:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
 58a:	19 82       	std	Y+1, r1	; 0x01
 58c:	0e c0       	rjmp	.+28     	; 0x5aa <CLCD_voidWriteSpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
 58e:	89 81       	ldd	r24, Y+1	; 0x01
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	2b 81       	ldd	r18, Y+3	; 0x03
 596:	3c 81       	ldd	r19, Y+4	; 0x04
 598:	82 0f       	add	r24, r18
 59a:	93 1f       	adc	r25, r19
 59c:	fc 01       	movw	r30, r24
 59e:	80 81       	ld	r24, Z
 5a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*send SGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	8f 5f       	subi	r24, 0xFF	; 255
 5a8:	89 83       	std	Y+1, r24	; 0x01
 5aa:	89 81       	ldd	r24, Y+1	; 0x01
 5ac:	88 30       	cpi	r24, 0x08	; 8
 5ae:	78 f3       	brcs	.-34     	; 0x58e <CLCD_voidWriteSpecialCharacter+0x32>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go back to the DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
 5b0:	6f 81       	ldd	r22, Y+7	; 0x07
 5b2:	8e 81       	ldd	r24, Y+6	; 0x06
 5b4:	0e 94 8d 02 	call	0x51a	; 0x51a <CLCD_voidGoToXY>

	/*Display the pattern written in the CG RAM
	 * DDRAM treat with the CGRAM with location(block) number from 0 to 7*/
	CLCD_voidSendCommand(Copy_u8PatternNumber);
 5b8:	8d 81       	ldd	r24, Y+5	; 0x05
 5ba:	0e 94 41 00 	call	0x82	; 0x82 <CLCD_voidSendCommand>
}
 5be:	00 00       	nop
 5c0:	27 96       	adiw	r28, 0x07	; 7
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	08 95       	ret

000005d2 <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	00 d0       	rcall	.+0      	; 0x5d8 <CLCD_voidWriteNumber+0x6>
 5d8:	00 d0       	rcall	.+0      	; 0x5da <CLCD_voidWriteNumber+0x8>
 5da:	0f 92       	push	r0
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	6a 83       	std	Y+2, r22	; 0x02
 5e2:	7b 83       	std	Y+3, r23	; 0x03
 5e4:	8c 83       	std	Y+4, r24	; 0x04
 5e6:	9d 83       	std	Y+5, r25	; 0x05
	u8 i=3;
 5e8:	83 e0       	ldi	r24, 0x03	; 3
 5ea:	89 83       	std	Y+1, r24	; 0x01
	//for(i=3;i>=0;i--)//DIG1
	//{
		if(GET_BIT(Copy_u32Number,i) && GET_BIT(Copy_u32Number,i-1) || GET_BIT(Copy_u32Number,i)&&GET_BIT(Copy_u32Number,i-2))
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	9b 81       	ldd	r25, Y+3	; 0x03
 5f6:	ac 81       	ldd	r26, Y+4	; 0x04
 5f8:	bd 81       	ldd	r27, Y+5	; 0x05
 5fa:	04 c0       	rjmp	.+8      	; 0x604 <CLCD_voidWriteNumber+0x32>
 5fc:	b6 95       	lsr	r27
 5fe:	a7 95       	ror	r26
 600:	97 95       	ror	r25
 602:	87 95       	ror	r24
 604:	2a 95       	dec	r18
 606:	d2 f7       	brpl	.-12     	; 0x5fc <CLCD_voidWriteNumber+0x2a>
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	99 27       	eor	r25, r25
 60c:	aa 27       	eor	r26, r26
 60e:	bb 27       	eor	r27, r27
 610:	89 2b       	or	r24, r25
 612:	8a 2b       	or	r24, r26
 614:	8b 2b       	or	r24, r27
 616:	c9 f0       	breq	.+50     	; 0x64a <CLCD_voidWriteNumber+0x78>
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	88 2f       	mov	r24, r24
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	9c 01       	movw	r18, r24
 620:	21 50       	subi	r18, 0x01	; 1
 622:	31 09       	sbc	r19, r1
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	9b 81       	ldd	r25, Y+3	; 0x03
 628:	ac 81       	ldd	r26, Y+4	; 0x04
 62a:	bd 81       	ldd	r27, Y+5	; 0x05
 62c:	04 c0       	rjmp	.+8      	; 0x636 <CLCD_voidWriteNumber+0x64>
 62e:	b6 95       	lsr	r27
 630:	a7 95       	ror	r26
 632:	97 95       	ror	r25
 634:	87 95       	ror	r24
 636:	2a 95       	dec	r18
 638:	d2 f7       	brpl	.-12     	; 0x62e <CLCD_voidWriteNumber+0x5c>
 63a:	81 70       	andi	r24, 0x01	; 1
 63c:	99 27       	eor	r25, r25
 63e:	aa 27       	eor	r26, r26
 640:	bb 27       	eor	r27, r27
 642:	89 2b       	or	r24, r25
 644:	8a 2b       	or	r24, r26
 646:	8b 2b       	or	r24, r27
 648:	79 f5       	brne	.+94     	; 0x6a8 <CLCD_voidWriteNumber+0xd6>
 64a:	89 81       	ldd	r24, Y+1	; 0x01
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	9b 81       	ldd	r25, Y+3	; 0x03
 654:	ac 81       	ldd	r26, Y+4	; 0x04
 656:	bd 81       	ldd	r27, Y+5	; 0x05
 658:	04 c0       	rjmp	.+8      	; 0x662 <CLCD_voidWriteNumber+0x90>
 65a:	b6 95       	lsr	r27
 65c:	a7 95       	ror	r26
 65e:	97 95       	ror	r25
 660:	87 95       	ror	r24
 662:	2a 95       	dec	r18
 664:	d2 f7       	brpl	.-12     	; 0x65a <CLCD_voidWriteNumber+0x88>
 666:	81 70       	andi	r24, 0x01	; 1
 668:	99 27       	eor	r25, r25
 66a:	aa 27       	eor	r26, r26
 66c:	bb 27       	eor	r27, r27
 66e:	89 2b       	or	r24, r25
 670:	8a 2b       	or	r24, r26
 672:	8b 2b       	or	r24, r27
 674:	e9 f0       	breq	.+58     	; 0x6b0 <CLCD_voidWriteNumber+0xde>
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	88 2f       	mov	r24, r24
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	9c 01       	movw	r18, r24
 67e:	22 50       	subi	r18, 0x02	; 2
 680:	31 09       	sbc	r19, r1
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	9b 81       	ldd	r25, Y+3	; 0x03
 686:	ac 81       	ldd	r26, Y+4	; 0x04
 688:	bd 81       	ldd	r27, Y+5	; 0x05
 68a:	04 c0       	rjmp	.+8      	; 0x694 <CLCD_voidWriteNumber+0xc2>
 68c:	b6 95       	lsr	r27
 68e:	a7 95       	ror	r26
 690:	97 95       	ror	r25
 692:	87 95       	ror	r24
 694:	2a 95       	dec	r18
 696:	d2 f7       	brpl	.-12     	; 0x68c <CLCD_voidWriteNumber+0xba>
 698:	81 70       	andi	r24, 0x01	; 1
 69a:	99 27       	eor	r25, r25
 69c:	aa 27       	eor	r26, r26
 69e:	bb 27       	eor	r27, r27
 6a0:	89 2b       	or	r24, r25
 6a2:	8a 2b       	or	r24, r26
 6a4:	8b 2b       	or	r24, r27
 6a6:	21 f0       	breq	.+8      	; 0x6b0 <CLCD_voidWriteNumber+0xde>
		{
				CLCD_voidSendData('1');
 6a8:	81 e3       	ldi	r24, 0x31	; 49
 6aa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
 6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <CLCD_voidWriteNumber+0xe6>
		}
		else
		{
			CLCD_voidSendData('0');
 6b0:	80 e3       	ldi	r24, 0x30	; 48
 6b2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>

		}

	//}
}
 6b6:	00 00       	nop
 6b8:	00 00       	nop
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <DIO_u8SetPinValue+0x6>
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <DIO_u8SetPinValue+0x8>
 6d2:	cd b7       	in	r28, 0x3d	; 61
 6d4:	de b7       	in	r29, 0x3e	; 62
 6d6:	8a 83       	std	Y+2, r24	; 0x02
 6d8:	6b 83       	std	Y+3, r22	; 0x03
 6da:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
 6dc:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
 6de:	8b 81       	ldd	r24, Y+3	; 0x03
 6e0:	88 30       	cpi	r24, 0x08	; 8
 6e2:	08 f0       	brcs	.+2      	; 0x6e6 <DIO_u8SetPinValue+0x1c>
 6e4:	f1 c0       	rjmp	.+482    	; 0x8c8 <__stack+0x69>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
 6e6:	8c 81       	ldd	r24, Y+4	; 0x04
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	09 f0       	breq	.+2      	; 0x6ee <DIO_u8SetPinValue+0x24>
 6ec:	71 c0       	rjmp	.+226    	; 0x7d0 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	88 2f       	mov	r24, r24
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	84 30       	cpi	r24, 0x04	; 4
 6f6:	91 05       	cpc	r25, r1
 6f8:	09 f4       	brne	.+2      	; 0x6fc <DIO_u8SetPinValue+0x32>
 6fa:	52 c0       	rjmp	.+164    	; 0x7a0 <DIO_u8SetPinValue+0xd6>
 6fc:	85 30       	cpi	r24, 0x05	; 5
 6fe:	91 05       	cpc	r25, r1
 700:	0c f0       	brlt	.+2      	; 0x704 <DIO_u8SetPinValue+0x3a>
 702:	64 c0       	rjmp	.+200    	; 0x7cc <DIO_u8SetPinValue+0x102>
 704:	83 30       	cpi	r24, 0x03	; 3
 706:	91 05       	cpc	r25, r1
 708:	a9 f1       	breq	.+106    	; 0x774 <DIO_u8SetPinValue+0xaa>
 70a:	84 30       	cpi	r24, 0x04	; 4
 70c:	91 05       	cpc	r25, r1
 70e:	0c f0       	brlt	.+2      	; 0x712 <DIO_u8SetPinValue+0x48>
 710:	5d c0       	rjmp	.+186    	; 0x7cc <DIO_u8SetPinValue+0x102>
 712:	00 97       	sbiw	r24, 0x00	; 0
 714:	19 f0       	breq	.+6      	; 0x71c <DIO_u8SetPinValue+0x52>
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	b9 f0       	breq	.+46     	; 0x748 <DIO_u8SetPinValue+0x7e>
 71a:	58 c0       	rjmp	.+176    	; 0x7cc <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 71c:	8b e3       	ldi	r24, 0x3B	; 59
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	fc 01       	movw	r30, r24
 722:	80 81       	ld	r24, Z
 724:	48 2f       	mov	r20, r24
 726:	8b 81       	ldd	r24, Y+3	; 0x03
 728:	28 2f       	mov	r18, r24
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_u8SetPinValue+0x6c>
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	2a 95       	dec	r18
 738:	e2 f7       	brpl	.-8      	; 0x732 <DIO_u8SetPinValue+0x68>
 73a:	24 2f       	mov	r18, r20
 73c:	28 2b       	or	r18, r24
 73e:	8b e3       	ldi	r24, 0x3B	; 59
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
 746:	c2 c0       	rjmp	.+388    	; 0x8cc <__stack+0x6d>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 748:	88 e3       	ldi	r24, 0x38	; 56
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	fc 01       	movw	r30, r24
 74e:	80 81       	ld	r24, Z
 750:	48 2f       	mov	r20, r24
 752:	8b 81       	ldd	r24, Y+3	; 0x03
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_u8SetPinValue+0x98>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	2a 95       	dec	r18
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_u8SetPinValue+0x94>
 766:	24 2f       	mov	r18, r20
 768:	28 2b       	or	r18, r24
 76a:	88 e3       	ldi	r24, 0x38	; 56
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	fc 01       	movw	r30, r24
 770:	20 83       	st	Z, r18
 772:	ac c0       	rjmp	.+344    	; 0x8cc <__stack+0x6d>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 774:	85 e3       	ldi	r24, 0x35	; 53
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	fc 01       	movw	r30, r24
 77a:	80 81       	ld	r24, Z
 77c:	48 2f       	mov	r20, r24
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	28 2f       	mov	r18, r24
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_u8SetPinValue+0xc4>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	2a 95       	dec	r18
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_u8SetPinValue+0xc0>
 792:	24 2f       	mov	r18, r20
 794:	28 2b       	or	r18, r24
 796:	85 e3       	ldi	r24, 0x35	; 53
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	fc 01       	movw	r30, r24
 79c:	20 83       	st	Z, r18
 79e:	96 c0       	rjmp	.+300    	; 0x8cc <__stack+0x6d>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 7a0:	82 e3       	ldi	r24, 0x32	; 50
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	fc 01       	movw	r30, r24
 7a6:	80 81       	ld	r24, Z
 7a8:	48 2f       	mov	r20, r24
 7aa:	8b 81       	ldd	r24, Y+3	; 0x03
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <DIO_u8SetPinValue+0xf0>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	2a 95       	dec	r18
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <DIO_u8SetPinValue+0xec>
 7be:	24 2f       	mov	r18, r20
 7c0:	28 2b       	or	r18, r24
 7c2:	82 e3       	ldi	r24, 0x32	; 50
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	fc 01       	movw	r30, r24
 7c8:	20 83       	st	Z, r18
 7ca:	80 c0       	rjmp	.+256    	; 0x8cc <__stack+0x6d>
			default :Local_u8ErrorState=0;;break;
 7cc:	19 82       	std	Y+1, r1	; 0x01
 7ce:	7e c0       	rjmp	.+252    	; 0x8cc <__stack+0x6d>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 7d0:	8c 81       	ldd	r24, Y+4	; 0x04
 7d2:	88 23       	and	r24, r24
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <DIO_u8SetPinValue+0x10e>
 7d6:	75 c0       	rjmp	.+234    	; 0x8c2 <__stack+0x63>
		{
			switch(Copy_u8Port)
 7d8:	8a 81       	ldd	r24, Y+2	; 0x02
 7da:	88 2f       	mov	r24, r24
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	84 30       	cpi	r24, 0x04	; 4
 7e0:	91 05       	cpc	r25, r1
 7e2:	09 f4       	brne	.+2      	; 0x7e6 <DIO_u8SetPinValue+0x11c>
 7e4:	55 c0       	rjmp	.+170    	; 0x890 <__stack+0x31>
 7e6:	85 30       	cpi	r24, 0x05	; 5
 7e8:	91 05       	cpc	r25, r1
 7ea:	0c f0       	brlt	.+2      	; 0x7ee <DIO_u8SetPinValue+0x124>
 7ec:	68 c0       	rjmp	.+208    	; 0x8be <__stack+0x5f>
 7ee:	83 30       	cpi	r24, 0x03	; 3
 7f0:	91 05       	cpc	r25, r1
 7f2:	b9 f1       	breq	.+110    	; 0x862 <__stack+0x3>
 7f4:	84 30       	cpi	r24, 0x04	; 4
 7f6:	91 05       	cpc	r25, r1
 7f8:	0c f0       	brlt	.+2      	; 0x7fc <DIO_u8SetPinValue+0x132>
 7fa:	61 c0       	rjmp	.+194    	; 0x8be <__stack+0x5f>
 7fc:	00 97       	sbiw	r24, 0x00	; 0
 7fe:	19 f0       	breq	.+6      	; 0x806 <DIO_u8SetPinValue+0x13c>
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	c1 f0       	breq	.+48     	; 0x834 <DIO_u8SetPinValue+0x16a>
 804:	5c c0       	rjmp	.+184    	; 0x8be <__stack+0x5f>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 806:	8b e3       	ldi	r24, 0x3B	; 59
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	fc 01       	movw	r30, r24
 80c:	80 81       	ld	r24, Z
 80e:	48 2f       	mov	r20, r24
 810:	8b 81       	ldd	r24, Y+3	; 0x03
 812:	28 2f       	mov	r18, r24
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <DIO_u8SetPinValue+0x156>
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	2a 95       	dec	r18
 822:	e2 f7       	brpl	.-8      	; 0x81c <DIO_u8SetPinValue+0x152>
 824:	80 95       	com	r24
 826:	24 2f       	mov	r18, r20
 828:	28 23       	and	r18, r24
 82a:	8b e3       	ldi	r24, 0x3B	; 59
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
 832:	4c c0       	rjmp	.+152    	; 0x8cc <__stack+0x6d>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 834:	88 e3       	ldi	r24, 0x38	; 56
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	fc 01       	movw	r30, r24
 83a:	80 81       	ld	r24, Z
 83c:	48 2f       	mov	r20, r24
 83e:	8b 81       	ldd	r24, Y+3	; 0x03
 840:	28 2f       	mov	r18, r24
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <DIO_u8SetPinValue+0x184>
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	2a 95       	dec	r18
 850:	e2 f7       	brpl	.-8      	; 0x84a <DIO_u8SetPinValue+0x180>
 852:	80 95       	com	r24
 854:	24 2f       	mov	r18, r20
 856:	28 23       	and	r18, r24
 858:	88 e3       	ldi	r24, 0x38	; 56
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	fc 01       	movw	r30, r24
 85e:	20 83       	st	Z, r18
 860:	35 c0       	rjmp	.+106    	; 0x8cc <__stack+0x6d>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 862:	85 e3       	ldi	r24, 0x35	; 53
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	fc 01       	movw	r30, r24
 868:	80 81       	ld	r24, Z
 86a:	48 2f       	mov	r20, r24
 86c:	8b 81       	ldd	r24, Y+3	; 0x03
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	2a 95       	dec	r18
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	80 95       	com	r24
 882:	24 2f       	mov	r18, r20
 884:	28 23       	and	r18, r24
 886:	85 e3       	ldi	r24, 0x35	; 53
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	fc 01       	movw	r30, r24
 88c:	20 83       	st	Z, r18
 88e:	1e c0       	rjmp	.+60     	; 0x8cc <__stack+0x6d>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 890:	82 e3       	ldi	r24, 0x32	; 50
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	fc 01       	movw	r30, r24
 896:	80 81       	ld	r24, Z
 898:	48 2f       	mov	r20, r24
 89a:	8b 81       	ldd	r24, Y+3	; 0x03
 89c:	28 2f       	mov	r18, r24
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	2a 95       	dec	r18
 8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
 8ae:	80 95       	com	r24
 8b0:	24 2f       	mov	r18, r20
 8b2:	28 23       	and	r18, r24
 8b4:	82 e3       	ldi	r24, 0x32	; 50
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	fc 01       	movw	r30, r24
 8ba:	20 83       	st	Z, r18
 8bc:	07 c0       	rjmp	.+14     	; 0x8cc <__stack+0x6d>
			default :Local_u8ErrorState=0;;break;
 8be:	19 82       	std	Y+1, r1	; 0x01
 8c0:	05 c0       	rjmp	.+10     	; 0x8cc <__stack+0x6d>


		}
		else
		{
		Local_u8ErrorState=1;
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	89 83       	std	Y+1, r24	; 0x01
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
		}


}
else{
	 Local_u8ErrorState=1;
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 8cc:	89 81       	ldd	r24, Y+1	; 0x01

}
 8ce:	0f 90       	pop	r0
 8d0:	0f 90       	pop	r0
 8d2:	0f 90       	pop	r0
 8d4:	0f 90       	pop	r0
 8d6:	df 91       	pop	r29
 8d8:	cf 91       	pop	r28
 8da:	08 95       	ret

000008dc <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	00 d0       	rcall	.+0      	; 0x8e2 <DIO_u8SetPortValue+0x6>
 8e2:	0f 92       	push	r0
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
 8e8:	8a 83       	std	Y+2, r24	; 0x02
 8ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 8ec:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	88 2f       	mov	r24, r24
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	84 30       	cpi	r24, 0x04	; 4
 8f6:	91 05       	cpc	r25, r1
 8f8:	01 f1       	breq	.+64     	; 0x93a <DIO_u8SetPortValue+0x5e>
 8fa:	85 30       	cpi	r24, 0x05	; 5
 8fc:	91 05       	cpc	r25, r1
 8fe:	1c f5       	brge	.+70     	; 0x946 <DIO_u8SetPortValue+0x6a>
 900:	83 30       	cpi	r24, 0x03	; 3
 902:	91 05       	cpc	r25, r1
 904:	a1 f0       	breq	.+40     	; 0x92e <DIO_u8SetPortValue+0x52>
 906:	84 30       	cpi	r24, 0x04	; 4
 908:	91 05       	cpc	r25, r1
 90a:	ec f4       	brge	.+58     	; 0x946 <DIO_u8SetPortValue+0x6a>
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	19 f0       	breq	.+6      	; 0x916 <DIO_u8SetPortValue+0x3a>
 910:	01 97       	sbiw	r24, 0x01	; 1
 912:	39 f0       	breq	.+14     	; 0x922 <DIO_u8SetPortValue+0x46>
 914:	18 c0       	rjmp	.+48     	; 0x946 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 916:	8b e3       	ldi	r24, 0x3B	; 59
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	2b 81       	ldd	r18, Y+3	; 0x03
 91c:	fc 01       	movw	r30, r24
 91e:	20 83       	st	Z, r18
 920:	15 c0       	rjmp	.+42     	; 0x94c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 922:	88 e3       	ldi	r24, 0x38	; 56
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	2b 81       	ldd	r18, Y+3	; 0x03
 928:	fc 01       	movw	r30, r24
 92a:	20 83       	st	Z, r18
 92c:	0f c0       	rjmp	.+30     	; 0x94c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 92e:	85 e3       	ldi	r24, 0x35	; 53
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	2b 81       	ldd	r18, Y+3	; 0x03
 934:	fc 01       	movw	r30, r24
 936:	20 83       	st	Z, r18
 938:	09 c0       	rjmp	.+18     	; 0x94c <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 93a:	82 e3       	ldi	r24, 0x32	; 50
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	2b 81       	ldd	r18, Y+3	; 0x03
 940:	fc 01       	movw	r30, r24
 942:	20 83       	st	Z, r18
 944:	03 c0       	rjmp	.+6      	; 0x94c <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 946:	81 e0       	ldi	r24, 0x01	; 1
 948:	89 83       	std	Y+1, r24	; 0x01
 94a:	00 00       	nop
				}


	return Local_u8ErrorState;
 94c:	89 81       	ldd	r24, Y+1	; 0x01

}
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	0f 90       	pop	r0
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	08 95       	ret

0000095a <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
 95e:	00 d0       	rcall	.+0      	; 0x960 <DIO_u8GetPinValue+0x6>
 960:	00 d0       	rcall	.+0      	; 0x962 <DIO_u8GetPinValue+0x8>
 962:	0f 92       	push	r0
 964:	cd b7       	in	r28, 0x3d	; 61
 966:	de b7       	in	r29, 0x3e	; 62
 968:	8a 83       	std	Y+2, r24	; 0x02
 96a:	6b 83       	std	Y+3, r22	; 0x03
 96c:	5d 83       	std	Y+5, r21	; 0x05
 96e:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 970:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 972:	8c 81       	ldd	r24, Y+4	; 0x04
 974:	9d 81       	ldd	r25, Y+5	; 0x05
 976:	89 2b       	or	r24, r25
 978:	09 f4       	brne	.+2      	; 0x97c <DIO_u8GetPinValue+0x22>
 97a:	73 c0       	rjmp	.+230    	; 0xa62 <DIO_u8GetPinValue+0x108>
 97c:	8b 81       	ldd	r24, Y+3	; 0x03
 97e:	88 30       	cpi	r24, 0x08	; 8
 980:	08 f0       	brcs	.+2      	; 0x984 <DIO_u8GetPinValue+0x2a>
 982:	6f c0       	rjmp	.+222    	; 0xa62 <DIO_u8GetPinValue+0x108>
				{
					switch(Copy_u8Port)
 984:	8a 81       	ldd	r24, Y+2	; 0x02
 986:	88 2f       	mov	r24, r24
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	84 30       	cpi	r24, 0x04	; 4
 98c:	91 05       	cpc	r25, r1
 98e:	09 f4       	brne	.+2      	; 0x992 <DIO_u8GetPinValue+0x38>
 990:	4f c0       	rjmp	.+158    	; 0xa30 <DIO_u8GetPinValue+0xd6>
 992:	85 30       	cpi	r24, 0x05	; 5
 994:	91 05       	cpc	r25, r1
 996:	0c f0       	brlt	.+2      	; 0x99a <DIO_u8GetPinValue+0x40>
 998:	60 c0       	rjmp	.+192    	; 0xa5a <DIO_u8GetPinValue+0x100>
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	91 05       	cpc	r25, r1
 99e:	99 f1       	breq	.+102    	; 0xa06 <DIO_u8GetPinValue+0xac>
 9a0:	84 30       	cpi	r24, 0x04	; 4
 9a2:	91 05       	cpc	r25, r1
 9a4:	0c f0       	brlt	.+2      	; 0x9a8 <DIO_u8GetPinValue+0x4e>
 9a6:	59 c0       	rjmp	.+178    	; 0xa5a <DIO_u8GetPinValue+0x100>
 9a8:	00 97       	sbiw	r24, 0x00	; 0
 9aa:	19 f0       	breq	.+6      	; 0x9b2 <DIO_u8GetPinValue+0x58>
 9ac:	01 97       	sbiw	r24, 0x01	; 1
 9ae:	b1 f0       	breq	.+44     	; 0x9dc <DIO_u8GetPinValue+0x82>
 9b0:	54 c0       	rjmp	.+168    	; 0xa5a <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 9b2:	89 e3       	ldi	r24, 0x39	; 57
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	fc 01       	movw	r30, r24
 9b8:	80 81       	ld	r24, Z
 9ba:	88 2f       	mov	r24, r24
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	2b 81       	ldd	r18, Y+3	; 0x03
 9c0:	22 2f       	mov	r18, r18
 9c2:	30 e0       	ldi	r19, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_u8GetPinValue+0x70>
 9c6:	95 95       	asr	r25
 9c8:	87 95       	ror	r24
 9ca:	2a 95       	dec	r18
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_u8GetPinValue+0x6c>
 9ce:	28 2f       	mov	r18, r24
 9d0:	21 70       	andi	r18, 0x01	; 1
 9d2:	8c 81       	ldd	r24, Y+4	; 0x04
 9d4:	9d 81       	ldd	r25, Y+5	; 0x05
 9d6:	fc 01       	movw	r30, r24
 9d8:	20 83       	st	Z, r18
 9da:	42 c0       	rjmp	.+132    	; 0xa60 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 9dc:	86 e3       	ldi	r24, 0x36	; 54
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	fc 01       	movw	r30, r24
 9e2:	80 81       	ld	r24, Z
 9e4:	88 2f       	mov	r24, r24
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	2b 81       	ldd	r18, Y+3	; 0x03
 9ea:	22 2f       	mov	r18, r18
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <DIO_u8GetPinValue+0x9a>
 9f0:	95 95       	asr	r25
 9f2:	87 95       	ror	r24
 9f4:	2a 95       	dec	r18
 9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <DIO_u8GetPinValue+0x96>
 9f8:	28 2f       	mov	r18, r24
 9fa:	21 70       	andi	r18, 0x01	; 1
 9fc:	8c 81       	ldd	r24, Y+4	; 0x04
 9fe:	9d 81       	ldd	r25, Y+5	; 0x05
 a00:	fc 01       	movw	r30, r24
 a02:	20 83       	st	Z, r18
 a04:	2d c0       	rjmp	.+90     	; 0xa60 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 a06:	83 e3       	ldi	r24, 0x33	; 51
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	fc 01       	movw	r30, r24
 a0c:	80 81       	ld	r24, Z
 a0e:	88 2f       	mov	r24, r24
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	2b 81       	ldd	r18, Y+3	; 0x03
 a14:	22 2f       	mov	r18, r18
 a16:	30 e0       	ldi	r19, 0x00	; 0
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <DIO_u8GetPinValue+0xc4>
 a1a:	95 95       	asr	r25
 a1c:	87 95       	ror	r24
 a1e:	2a 95       	dec	r18
 a20:	e2 f7       	brpl	.-8      	; 0xa1a <DIO_u8GetPinValue+0xc0>
 a22:	28 2f       	mov	r18, r24
 a24:	21 70       	andi	r18, 0x01	; 1
 a26:	8c 81       	ldd	r24, Y+4	; 0x04
 a28:	9d 81       	ldd	r25, Y+5	; 0x05
 a2a:	fc 01       	movw	r30, r24
 a2c:	20 83       	st	Z, r18
 a2e:	18 c0       	rjmp	.+48     	; 0xa60 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 a30:	80 e3       	ldi	r24, 0x30	; 48
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	fc 01       	movw	r30, r24
 a36:	80 81       	ld	r24, Z
 a38:	88 2f       	mov	r24, r24
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	2b 81       	ldd	r18, Y+3	; 0x03
 a3e:	22 2f       	mov	r18, r18
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_u8GetPinValue+0xee>
 a44:	95 95       	asr	r25
 a46:	87 95       	ror	r24
 a48:	2a 95       	dec	r18
 a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_u8GetPinValue+0xea>
 a4c:	28 2f       	mov	r18, r24
 a4e:	21 70       	andi	r18, 0x01	; 1
 a50:	8c 81       	ldd	r24, Y+4	; 0x04
 a52:	9d 81       	ldd	r25, Y+5	; 0x05
 a54:	fc 01       	movw	r30, r24
 a56:	20 83       	st	Z, r18
 a58:	03 c0       	rjmp	.+6      	; 0xa60 <DIO_u8GetPinValue+0x106>
					     default : Local_u8ErrorState=1; break;
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	89 83       	std	Y+1, r24	; 0x01
 a5e:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <DIO_u8GetPinValue+0x10c>
					     default : Local_u8ErrorState=1; break;
					}
				}
				else
				{
				Local_u8ErrorState=1;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	89 83       	std	Y+1, r24	; 0x01

				}

	return Local_u8ErrorState;
 a66:	89 81       	ldd	r24, Y+1	; 0x01
}
 a68:	0f 90       	pop	r0
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	08 95       	ret

00000a78 <KPD_u8GetPressedKey>:
#include"KPD_config.h"
#include"KPD_private.h"


u8 KPD_u8GetPressedKey(void)
{
 a78:	cf 93       	push	r28
 a7a:	df 93       	push	r29
 a7c:	00 d0       	rcall	.+0      	; 0xa7e <KPD_u8GetPressedKey+0x6>
 a7e:	00 d0       	rcall	.+0      	; 0xa80 <KPD_u8GetPressedKey+0x8>
 a80:	cd b7       	in	r28, 0x3d	; 61
 a82:	de b7       	in	r29, 0x3e	; 62
u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
 a84:	8f ef       	ldi	r24, 0xFF	; 255
 a86:	8b 83       	std	Y+3, r24	; 0x03

static u8 Local_u8KPDArr[KPD_COLUMN_NUM][KPD_ROW_NUM]=KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0;Local_u8ColumnIdx < KPD_COLUMN_NUM;Local_u8ColumnIdx++)
 a88:	19 82       	std	Y+1, r1	; 0x01
 a8a:	59 c0       	rjmp	.+178    	; 0xb3e <KPD_u8GetPressedKey+0xc6>
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
 a8c:	89 81       	ldd	r24, Y+1	; 0x01
 a8e:	88 2f       	mov	r24, r24
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	80 5a       	subi	r24, 0xA0	; 160
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	fc 01       	movw	r30, r24
 a98:	80 81       	ld	r24, Z
 a9a:	40 e0       	ldi	r20, 0x00	; 0
 a9c:	68 2f       	mov	r22, r24
 a9e:	84 e0       	ldi	r24, 0x04	; 4
 aa0:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>

	for(Local_u8RowIdx=0;Local_u8RowIdx<KPD_ROW_NUM;Local_u8RowIdx++)
 aa4:	1a 82       	std	Y+2, r1	; 0x02
 aa6:	39 c0       	rjmp	.+114    	; 0xb1a <KPD_u8GetPressedKey+0xa2>
	{
		/*Read the current row*/
		DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
 aa8:	8a 81       	ldd	r24, Y+2	; 0x02
 aaa:	88 2f       	mov	r24, r24
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	8c 59       	subi	r24, 0x9C	; 156
 ab0:	9f 4f       	sbci	r25, 0xFF	; 255
 ab2:	fc 01       	movw	r30, r24
 ab4:	20 81       	ld	r18, Z
 ab6:	ce 01       	movw	r24, r28
 ab8:	04 96       	adiw	r24, 0x04	; 4
 aba:	ac 01       	movw	r20, r24
 abc:	62 2f       	mov	r22, r18
 abe:	84 e0       	ldi	r24, 0x04	; 4
 ac0:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_u8GetPinValue>

		 /*Check switch is pressed*/
		if(DIO_u8PIN_LOW == Local_u8PinState)
 ac4:	8c 81       	ldd	r24, Y+4	; 0x04
 ac6:	88 23       	and	r24, r24
 ac8:	29 f5       	brne	.+74     	; 0xb14 <KPD_u8GetPressedKey+0x9c>
		{
			Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
 aca:	8a 81       	ldd	r24, Y+2	; 0x02
 acc:	28 2f       	mov	r18, r24
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	89 81       	ldd	r24, Y+1	; 0x01
 ad2:	88 2f       	mov	r24, r24
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	22 0f       	add	r18, r18
 ad8:	33 1f       	adc	r19, r19
 ada:	22 0f       	add	r18, r18
 adc:	33 1f       	adc	r19, r19
 ade:	82 0f       	add	r24, r18
 ae0:	93 1f       	adc	r25, r19
 ae2:	88 59       	subi	r24, 0x98	; 152
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	fc 01       	movw	r30, r24
 ae8:	80 81       	ld	r24, Z
 aea:	8b 83       	std	Y+3, r24	; 0x03
			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW==Local_u8PinState)
 aec:	0e c0       	rjmp	.+28     	; 0xb0a <KPD_u8GetPressedKey+0x92>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
 aee:	8a 81       	ldd	r24, Y+2	; 0x02
 af0:	88 2f       	mov	r24, r24
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	8c 59       	subi	r24, 0x9C	; 156
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	fc 01       	movw	r30, r24
 afa:	20 81       	ld	r18, Z
 afc:	ce 01       	movw	r24, r28
 afe:	04 96       	adiw	r24, 0x04	; 4
 b00:	ac 01       	movw	r20, r24
 b02:	62 2f       	mov	r22, r18
 b04:	84 e0       	ldi	r24, 0x04	; 4
 b06:	0e 94 ad 04 	call	0x95a	; 0x95a <DIO_u8GetPinValue>
		 /*Check switch is pressed*/
		if(DIO_u8PIN_LOW == Local_u8PinState)
		{
			Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW==Local_u8PinState)
 b0a:	8c 81       	ldd	r24, Y+4	; 0x04
 b0c:	88 23       	and	r24, r24
 b0e:	79 f3       	breq	.-34     	; 0xaee <KPD_u8GetPressedKey+0x76>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
			}
			return Local_u8PressedKey;
 b10:	8b 81       	ldd	r24, Y+3	; 0x03
 b12:	1a c0       	rjmp	.+52     	; 0xb48 <KPD_u8GetPressedKey+0xd0>
for(Local_u8ColumnIdx=0;Local_u8ColumnIdx < KPD_COLUMN_NUM;Local_u8ColumnIdx++)
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

	for(Local_u8RowIdx=0;Local_u8RowIdx<KPD_ROW_NUM;Local_u8RowIdx++)
 b14:	8a 81       	ldd	r24, Y+2	; 0x02
 b16:	8f 5f       	subi	r24, 0xFF	; 255
 b18:	8a 83       	std	Y+2, r24	; 0x02
 b1a:	8a 81       	ldd	r24, Y+2	; 0x02
 b1c:	84 30       	cpi	r24, 0x04	; 4
 b1e:	20 f2       	brcs	.-120    	; 0xaa8 <KPD_u8GetPressedKey+0x30>
			return Local_u8PressedKey;
		}
	}

	/*Deactivate the current column  */
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
 b20:	89 81       	ldd	r24, Y+1	; 0x01
 b22:	88 2f       	mov	r24, r24
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	80 5a       	subi	r24, 0xA0	; 160
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	fc 01       	movw	r30, r24
 b2c:	80 81       	ld	r24, Z
 b2e:	41 e0       	ldi	r20, 0x01	; 1
 b30:	68 2f       	mov	r22, r24
 b32:	84 e0       	ldi	r24, 0x04	; 4
 b34:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_u8SetPinValue>

static u8 Local_u8KPDArr[KPD_COLUMN_NUM][KPD_ROW_NUM]=KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0;Local_u8ColumnIdx < KPD_COLUMN_NUM;Local_u8ColumnIdx++)
 b38:	89 81       	ldd	r24, Y+1	; 0x01
 b3a:	8f 5f       	subi	r24, 0xFF	; 255
 b3c:	89 83       	std	Y+1, r24	; 0x01
 b3e:	89 81       	ldd	r24, Y+1	; 0x01
 b40:	84 30       	cpi	r24, 0x04	; 4
 b42:	08 f4       	brcc	.+2      	; 0xb46 <KPD_u8GetPressedKey+0xce>
 b44:	a3 cf       	rjmp	.-186    	; 0xa8c <KPD_u8GetPressedKey+0x14>
	/*Deactivate the current column  */
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);

}

return Local_u8PressedKey;
 b46:	8b 81       	ldd	r24, Y+3	; 0x03
}
 b48:	0f 90       	pop	r0
 b4a:	0f 90       	pop	r0
 b4c:	0f 90       	pop	r0
 b4e:	0f 90       	pop	r0
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	08 95       	ret

00000b56 <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 b56:	cf 93       	push	r28
 b58:	df 93       	push	r29
 b5a:	cd b7       	in	r28, 0x3d	; 61
 b5c:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 b5e:	8a e3       	ldi	r24, 0x3A	; 58
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	fc 01       	movw	r30, r24
 b64:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 b66:	87 e3       	ldi	r24, 0x37	; 55
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	fc 01       	movw	r30, r24
 b6c:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 b6e:	84 e3       	ldi	r24, 0x34	; 52
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	fc 01       	movw	r30, r24
 b74:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
 b76:	81 e3       	ldi	r24, 0x31	; 49
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	2f e0       	ldi	r18, 0x0F	; 15
 b7c:	fc 01       	movw	r30, r24
 b7e:	20 83       	st	Z, r18

	PORTA=PORTA_InitVal;
 b80:	8b e3       	ldi	r24, 0x3B	; 59
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	fc 01       	movw	r30, r24
 b86:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 b88:	88 e3       	ldi	r24, 0x38	; 56
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	fc 01       	movw	r30, r24
 b8e:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 b90:	85 e3       	ldi	r24, 0x35	; 53
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	fc 01       	movw	r30, r24
 b96:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 b98:	82 e3       	ldi	r24, 0x32	; 50
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	2f ef       	ldi	r18, 0xFF	; 255
 b9e:	fc 01       	movw	r30, r24
 ba0:	20 83       	st	Z, r18
}
 ba2:	00 00       	nop
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	08 95       	ret

00000baa <main>:
#include"CLCD_interface.h"
#include"KPD_interface.h"


void main(void)
{
 baa:	cf 93       	push	r28
 bac:	df 93       	push	r29
 bae:	0f 92       	push	r0
 bb0:	cd b7       	in	r28, 0x3d	; 61
 bb2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Key=0xff;
 bb4:	8f ef       	ldi	r24, 0xFF	; 255
 bb6:	89 83       	std	Y+1, r24	; 0x01
	PORT_voidInit();
 bb8:	0e 94 ab 05 	call	0xb56	; 0xb56 <PORT_voidInit>
	CLCD_voidInit();
 bbc:	0e 94 b7 01 	call	0x36e	; 0x36e <CLCD_voidInit>

	while(1)
	{
		do
		{
			Local_u8Key=KPD_u8GetPressedKey();
 bc0:	0e 94 3c 05 	call	0xa78	; 0xa78 <KPD_u8GetPressedKey>
 bc4:	89 83       	std	Y+1, r24	; 0x01
		}while(Local_u8Key==0xff);
 bc6:	89 81       	ldd	r24, Y+1	; 0x01
 bc8:	8f 3f       	cpi	r24, 0xFF	; 255
 bca:	d1 f3       	breq	.-12     	; 0xbc0 <main+0x16>

		CLCD_voidSendData(Local_u8Key+'0');
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	80 5d       	subi	r24, 0xD0	; 208
 bd0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CLCD_voidSendData>
{
	u8 Local_u8Key=0xff;
	PORT_voidInit();
	CLCD_voidInit();

	while(1)
 bd4:	f5 cf       	rjmp	.-22     	; 0xbc0 <main+0x16>

00000bd6 <__cmpsf2>:
 bd6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_cmp>
 bda:	08 f4       	brcc	.+2      	; 0xbde <__cmpsf2+0x8>
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	08 95       	ret

00000be0 <__fixunssfsi>:
 be0:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_splitA>
 be4:	88 f0       	brcs	.+34     	; 0xc08 <__fixunssfsi+0x28>
 be6:	9f 57       	subi	r25, 0x7F	; 127
 be8:	98 f0       	brcs	.+38     	; 0xc10 <__fixunssfsi+0x30>
 bea:	b9 2f       	mov	r27, r25
 bec:	99 27       	eor	r25, r25
 bee:	b7 51       	subi	r27, 0x17	; 23
 bf0:	b0 f0       	brcs	.+44     	; 0xc1e <__fixunssfsi+0x3e>
 bf2:	e1 f0       	breq	.+56     	; 0xc2c <__fixunssfsi+0x4c>
 bf4:	66 0f       	add	r22, r22
 bf6:	77 1f       	adc	r23, r23
 bf8:	88 1f       	adc	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	1a f0       	brmi	.+6      	; 0xc04 <__fixunssfsi+0x24>
 bfe:	ba 95       	dec	r27
 c00:	c9 f7       	brne	.-14     	; 0xbf4 <__fixunssfsi+0x14>
 c02:	14 c0       	rjmp	.+40     	; 0xc2c <__fixunssfsi+0x4c>
 c04:	b1 30       	cpi	r27, 0x01	; 1
 c06:	91 f0       	breq	.+36     	; 0xc2c <__fixunssfsi+0x4c>
 c08:	0e 94 65 06 	call	0xcca	; 0xcca <__fp_zero>
 c0c:	b1 e0       	ldi	r27, 0x01	; 1
 c0e:	08 95       	ret
 c10:	0c 94 65 06 	jmp	0xcca	; 0xcca <__fp_zero>
 c14:	67 2f       	mov	r22, r23
 c16:	78 2f       	mov	r23, r24
 c18:	88 27       	eor	r24, r24
 c1a:	b8 5f       	subi	r27, 0xF8	; 248
 c1c:	39 f0       	breq	.+14     	; 0xc2c <__fixunssfsi+0x4c>
 c1e:	b9 3f       	cpi	r27, 0xF9	; 249
 c20:	cc f3       	brlt	.-14     	; 0xc14 <__fixunssfsi+0x34>
 c22:	86 95       	lsr	r24
 c24:	77 95       	ror	r23
 c26:	67 95       	ror	r22
 c28:	b3 95       	inc	r27
 c2a:	d9 f7       	brne	.-10     	; 0xc22 <__fixunssfsi+0x42>
 c2c:	3e f4       	brtc	.+14     	; 0xc3c <__fixunssfsi+0x5c>
 c2e:	90 95       	com	r25
 c30:	80 95       	com	r24
 c32:	70 95       	com	r23
 c34:	61 95       	neg	r22
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	08 95       	ret

00000c3e <__fp_cmp>:
 c3e:	99 0f       	add	r25, r25
 c40:	00 08       	sbc	r0, r0
 c42:	55 0f       	add	r21, r21
 c44:	aa 0b       	sbc	r26, r26
 c46:	e0 e8       	ldi	r30, 0x80	; 128
 c48:	fe ef       	ldi	r31, 0xFE	; 254
 c4a:	16 16       	cp	r1, r22
 c4c:	17 06       	cpc	r1, r23
 c4e:	e8 07       	cpc	r30, r24
 c50:	f9 07       	cpc	r31, r25
 c52:	c0 f0       	brcs	.+48     	; 0xc84 <__fp_cmp+0x46>
 c54:	12 16       	cp	r1, r18
 c56:	13 06       	cpc	r1, r19
 c58:	e4 07       	cpc	r30, r20
 c5a:	f5 07       	cpc	r31, r21
 c5c:	98 f0       	brcs	.+38     	; 0xc84 <__fp_cmp+0x46>
 c5e:	62 1b       	sub	r22, r18
 c60:	73 0b       	sbc	r23, r19
 c62:	84 0b       	sbc	r24, r20
 c64:	95 0b       	sbc	r25, r21
 c66:	39 f4       	brne	.+14     	; 0xc76 <__fp_cmp+0x38>
 c68:	0a 26       	eor	r0, r26
 c6a:	61 f0       	breq	.+24     	; 0xc84 <__fp_cmp+0x46>
 c6c:	23 2b       	or	r18, r19
 c6e:	24 2b       	or	r18, r20
 c70:	25 2b       	or	r18, r21
 c72:	21 f4       	brne	.+8      	; 0xc7c <__fp_cmp+0x3e>
 c74:	08 95       	ret
 c76:	0a 26       	eor	r0, r26
 c78:	09 f4       	brne	.+2      	; 0xc7c <__fp_cmp+0x3e>
 c7a:	a1 40       	sbci	r26, 0x01	; 1
 c7c:	a6 95       	lsr	r26
 c7e:	8f ef       	ldi	r24, 0xFF	; 255
 c80:	81 1d       	adc	r24, r1
 c82:	81 1d       	adc	r24, r1
 c84:	08 95       	ret

00000c86 <__fp_split3>:
 c86:	57 fd       	sbrc	r21, 7
 c88:	90 58       	subi	r25, 0x80	; 128
 c8a:	44 0f       	add	r20, r20
 c8c:	55 1f       	adc	r21, r21
 c8e:	59 f0       	breq	.+22     	; 0xca6 <__fp_splitA+0x10>
 c90:	5f 3f       	cpi	r21, 0xFF	; 255
 c92:	71 f0       	breq	.+28     	; 0xcb0 <__fp_splitA+0x1a>
 c94:	47 95       	ror	r20

00000c96 <__fp_splitA>:
 c96:	88 0f       	add	r24, r24
 c98:	97 fb       	bst	r25, 7
 c9a:	99 1f       	adc	r25, r25
 c9c:	61 f0       	breq	.+24     	; 0xcb6 <__fp_splitA+0x20>
 c9e:	9f 3f       	cpi	r25, 0xFF	; 255
 ca0:	79 f0       	breq	.+30     	; 0xcc0 <__fp_splitA+0x2a>
 ca2:	87 95       	ror	r24
 ca4:	08 95       	ret
 ca6:	12 16       	cp	r1, r18
 ca8:	13 06       	cpc	r1, r19
 caa:	14 06       	cpc	r1, r20
 cac:	55 1f       	adc	r21, r21
 cae:	f2 cf       	rjmp	.-28     	; 0xc94 <__fp_split3+0xe>
 cb0:	46 95       	lsr	r20
 cb2:	f1 df       	rcall	.-30     	; 0xc96 <__fp_splitA>
 cb4:	08 c0       	rjmp	.+16     	; 0xcc6 <__fp_splitA+0x30>
 cb6:	16 16       	cp	r1, r22
 cb8:	17 06       	cpc	r1, r23
 cba:	18 06       	cpc	r1, r24
 cbc:	99 1f       	adc	r25, r25
 cbe:	f1 cf       	rjmp	.-30     	; 0xca2 <__fp_splitA+0xc>
 cc0:	86 95       	lsr	r24
 cc2:	71 05       	cpc	r23, r1
 cc4:	61 05       	cpc	r22, r1
 cc6:	08 94       	sec
 cc8:	08 95       	ret

00000cca <__fp_zero>:
 cca:	e8 94       	clt

00000ccc <__fp_szero>:
 ccc:	bb 27       	eor	r27, r27
 cce:	66 27       	eor	r22, r22
 cd0:	77 27       	eor	r23, r23
 cd2:	cb 01       	movw	r24, r22
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret

00000cd8 <__gesf2>:
 cd8:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_cmp>
 cdc:	08 f4       	brcc	.+2      	; 0xce0 <__gesf2+0x8>
 cde:	8f ef       	ldi	r24, 0xFF	; 255
 ce0:	08 95       	ret

00000ce2 <__mulsf3>:
 ce2:	0e 94 84 06 	call	0xd08	; 0xd08 <__mulsf3x>
 ce6:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__fp_round>
 cea:	0e 94 e7 06 	call	0xdce	; 0xdce <__fp_pscA>
 cee:	38 f0       	brcs	.+14     	; 0xcfe <__mulsf3+0x1c>
 cf0:	0e 94 ee 06 	call	0xddc	; 0xddc <__fp_pscB>
 cf4:	20 f0       	brcs	.+8      	; 0xcfe <__mulsf3+0x1c>
 cf6:	95 23       	and	r25, r21
 cf8:	11 f0       	breq	.+4      	; 0xcfe <__mulsf3+0x1c>
 cfa:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__fp_inf>
 cfe:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__fp_nan>
 d02:	11 24       	eor	r1, r1
 d04:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_szero>

00000d08 <__mulsf3x>:
 d08:	0e 94 43 06 	call	0xc86	; 0xc86 <__fp_split3>
 d0c:	70 f3       	brcs	.-36     	; 0xcea <__mulsf3+0x8>

00000d0e <__mulsf3_pse>:
 d0e:	95 9f       	mul	r25, r21
 d10:	c1 f3       	breq	.-16     	; 0xd02 <__mulsf3+0x20>
 d12:	95 0f       	add	r25, r21
 d14:	50 e0       	ldi	r21, 0x00	; 0
 d16:	55 1f       	adc	r21, r21
 d18:	62 9f       	mul	r22, r18
 d1a:	f0 01       	movw	r30, r0
 d1c:	72 9f       	mul	r23, r18
 d1e:	bb 27       	eor	r27, r27
 d20:	f0 0d       	add	r31, r0
 d22:	b1 1d       	adc	r27, r1
 d24:	63 9f       	mul	r22, r19
 d26:	aa 27       	eor	r26, r26
 d28:	f0 0d       	add	r31, r0
 d2a:	b1 1d       	adc	r27, r1
 d2c:	aa 1f       	adc	r26, r26
 d2e:	64 9f       	mul	r22, r20
 d30:	66 27       	eor	r22, r22
 d32:	b0 0d       	add	r27, r0
 d34:	a1 1d       	adc	r26, r1
 d36:	66 1f       	adc	r22, r22
 d38:	82 9f       	mul	r24, r18
 d3a:	22 27       	eor	r18, r18
 d3c:	b0 0d       	add	r27, r0
 d3e:	a1 1d       	adc	r26, r1
 d40:	62 1f       	adc	r22, r18
 d42:	73 9f       	mul	r23, r19
 d44:	b0 0d       	add	r27, r0
 d46:	a1 1d       	adc	r26, r1
 d48:	62 1f       	adc	r22, r18
 d4a:	83 9f       	mul	r24, r19
 d4c:	a0 0d       	add	r26, r0
 d4e:	61 1d       	adc	r22, r1
 d50:	22 1f       	adc	r18, r18
 d52:	74 9f       	mul	r23, r20
 d54:	33 27       	eor	r19, r19
 d56:	a0 0d       	add	r26, r0
 d58:	61 1d       	adc	r22, r1
 d5a:	23 1f       	adc	r18, r19
 d5c:	84 9f       	mul	r24, r20
 d5e:	60 0d       	add	r22, r0
 d60:	21 1d       	adc	r18, r1
 d62:	82 2f       	mov	r24, r18
 d64:	76 2f       	mov	r23, r22
 d66:	6a 2f       	mov	r22, r26
 d68:	11 24       	eor	r1, r1
 d6a:	9f 57       	subi	r25, 0x7F	; 127
 d6c:	50 40       	sbci	r21, 0x00	; 0
 d6e:	9a f0       	brmi	.+38     	; 0xd96 <__mulsf3_pse+0x88>
 d70:	f1 f0       	breq	.+60     	; 0xdae <__mulsf3_pse+0xa0>
 d72:	88 23       	and	r24, r24
 d74:	4a f0       	brmi	.+18     	; 0xd88 <__mulsf3_pse+0x7a>
 d76:	ee 0f       	add	r30, r30
 d78:	ff 1f       	adc	r31, r31
 d7a:	bb 1f       	adc	r27, r27
 d7c:	66 1f       	adc	r22, r22
 d7e:	77 1f       	adc	r23, r23
 d80:	88 1f       	adc	r24, r24
 d82:	91 50       	subi	r25, 0x01	; 1
 d84:	50 40       	sbci	r21, 0x00	; 0
 d86:	a9 f7       	brne	.-22     	; 0xd72 <__mulsf3_pse+0x64>
 d88:	9e 3f       	cpi	r25, 0xFE	; 254
 d8a:	51 05       	cpc	r21, r1
 d8c:	80 f0       	brcs	.+32     	; 0xdae <__mulsf3_pse+0xa0>
 d8e:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__fp_inf>
 d92:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_szero>
 d96:	5f 3f       	cpi	r21, 0xFF	; 255
 d98:	e4 f3       	brlt	.-8      	; 0xd92 <__mulsf3_pse+0x84>
 d9a:	98 3e       	cpi	r25, 0xE8	; 232
 d9c:	d4 f3       	brlt	.-12     	; 0xd92 <__mulsf3_pse+0x84>
 d9e:	86 95       	lsr	r24
 da0:	77 95       	ror	r23
 da2:	67 95       	ror	r22
 da4:	b7 95       	ror	r27
 da6:	f7 95       	ror	r31
 da8:	e7 95       	ror	r30
 daa:	9f 5f       	subi	r25, 0xFF	; 255
 dac:	c1 f7       	brne	.-16     	; 0xd9e <__mulsf3_pse+0x90>
 dae:	fe 2b       	or	r31, r30
 db0:	88 0f       	add	r24, r24
 db2:	91 1d       	adc	r25, r1
 db4:	96 95       	lsr	r25
 db6:	87 95       	ror	r24
 db8:	97 f9       	bld	r25, 7
 dba:	08 95       	ret

00000dbc <__fp_inf>:
 dbc:	97 f9       	bld	r25, 7
 dbe:	9f 67       	ori	r25, 0x7F	; 127
 dc0:	80 e8       	ldi	r24, 0x80	; 128
 dc2:	70 e0       	ldi	r23, 0x00	; 0
 dc4:	60 e0       	ldi	r22, 0x00	; 0
 dc6:	08 95       	ret

00000dc8 <__fp_nan>:
 dc8:	9f ef       	ldi	r25, 0xFF	; 255
 dca:	80 ec       	ldi	r24, 0xC0	; 192
 dcc:	08 95       	ret

00000dce <__fp_pscA>:
 dce:	00 24       	eor	r0, r0
 dd0:	0a 94       	dec	r0
 dd2:	16 16       	cp	r1, r22
 dd4:	17 06       	cpc	r1, r23
 dd6:	18 06       	cpc	r1, r24
 dd8:	09 06       	cpc	r0, r25
 dda:	08 95       	ret

00000ddc <__fp_pscB>:
 ddc:	00 24       	eor	r0, r0
 dde:	0a 94       	dec	r0
 de0:	12 16       	cp	r1, r18
 de2:	13 06       	cpc	r1, r19
 de4:	14 06       	cpc	r1, r20
 de6:	05 06       	cpc	r0, r21
 de8:	08 95       	ret

00000dea <__fp_round>:
 dea:	09 2e       	mov	r0, r25
 dec:	03 94       	inc	r0
 dee:	00 0c       	add	r0, r0
 df0:	11 f4       	brne	.+4      	; 0xdf6 <__fp_round+0xc>
 df2:	88 23       	and	r24, r24
 df4:	52 f0       	brmi	.+20     	; 0xe0a <__fp_round+0x20>
 df6:	bb 0f       	add	r27, r27
 df8:	40 f4       	brcc	.+16     	; 0xe0a <__fp_round+0x20>
 dfa:	bf 2b       	or	r27, r31
 dfc:	11 f4       	brne	.+4      	; 0xe02 <__fp_round+0x18>
 dfe:	60 ff       	sbrs	r22, 0
 e00:	04 c0       	rjmp	.+8      	; 0xe0a <__fp_round+0x20>
 e02:	6f 5f       	subi	r22, 0xFF	; 255
 e04:	7f 4f       	sbci	r23, 0xFF	; 255
 e06:	8f 4f       	sbci	r24, 0xFF	; 255
 e08:	9f 4f       	sbci	r25, 0xFF	; 255
 e0a:	08 95       	ret

00000e0c <_exit>:
 e0c:	f8 94       	cli

00000e0e <__stop_program>:
 e0e:	ff cf       	rjmp	.-2      	; 0xe0e <__stop_program>
