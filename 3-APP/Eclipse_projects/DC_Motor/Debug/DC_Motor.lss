
DC_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000146a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000146a  000014fe  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000021  00800060  00800060  000014fe  2**0
                  ALLOC
  3 .stab         00002a00  00000000  00000000  00001500  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001575  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005475  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005488  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000120  00000000  00000000  000054c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000063c  00000000  00000000  000055e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000557  00000000  00000000  00005c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000005ba  00000000  00000000  0000617b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  00006735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_4>
      14:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_5>
      18:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_6>
      1c:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_7>
      20:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_8>
      24:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_9>
      28:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__vector_10>
      2c:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_16>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a1 38       	cpi	r26, 0x81	; 129
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 96 09 	call	0x132c	; 0x132c <main>
      74:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
static u8 ADC_u8ISRSource;

u8 ADC_u8BusyState=IDLE;

void ADC_voidInit(void)
{
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_REFERENCE_VOLTAGE==AVCC

	SET_BIT(ADMUX,ADMUX_REFS0);
      84:	87 e2       	ldi	r24, 0x27	; 39
      86:	90 e0       	ldi	r25, 0x00	; 0
      88:	fc 01       	movw	r30, r24
      8a:	20 81       	ld	r18, Z
      8c:	87 e2       	ldi	r24, 0x27	; 39
      8e:	90 e0       	ldi	r25, 0x00	; 0
      90:	20 64       	ori	r18, 0x40	; 64
      92:	fc 01       	movw	r30, r24
      94:	20 83       	st	Z, r18
	CLR_BIT(ADMUX,ADMUX_REFS1);
      96:	87 e2       	ldi	r24, 0x27	; 39
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	fc 01       	movw	r30, r24
      9c:	20 81       	ld	r18, Z
      9e:	87 e2       	ldi	r24, 0x27	; 39
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	2f 77       	andi	r18, 0x7F	; 127
      a4:	fc 01       	movw	r30, r24
      a6:	20 83       	st	Z, r18
#endif

	/*set the adjust result left adjust 8bit resolution right adjust 10bit resolution*/
#if ADC_ADJUST_RESULT==LEFT_ADJUST_RESULT

	SET_BIT(ADMUX,ADMUX_ADLAR);
      a8:	87 e2       	ldi	r24, 0x27	; 39
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	fc 01       	movw	r30, r24
      ae:	20 81       	ld	r18, Z
      b0:	87 e2       	ldi	r24, 0x27	; 39
      b2:	90 e0       	ldi	r25, 0x00	; 0
      b4:	20 62       	ori	r18, 0x20	; 32
      b6:	fc 01       	movw	r30, r24
      b8:	20 83       	st	Z, r18
#else
#error "Wrong Adjust Result "
#endif

	/*Set prescaler(Bit Masking) */
	ADCSRA &=ADC_PRESCALER_MASK;/*to make the first three bits equal zeros*/
      ba:	86 e2       	ldi	r24, 0x26	; 38
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	fc 01       	movw	r30, r24
      c0:	20 81       	ld	r18, Z
      c2:	86 e2       	ldi	r24, 0x26	; 38
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	28 7f       	andi	r18, 0xF8	; 248
      c8:	fc 01       	movw	r30, r24
      ca:	20 83       	st	Z, r18
	ADCSRA |=ADC_PRESCALER_SELECT;
      cc:	86 e2       	ldi	r24, 0x26	; 38
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	fc 01       	movw	r30, r24
      d2:	20 81       	ld	r18, Z
      d4:	86 e2       	ldi	r24, 0x26	; 38
      d6:	90 e0       	ldi	r25, 0x00	; 0
      d8:	26 60       	ori	r18, 0x06	; 6
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18

	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
      de:	86 e2       	ldi	r24, 0x26	; 38
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	fc 01       	movw	r30, r24
      e4:	20 81       	ld	r18, Z
      e6:	86 e2       	ldi	r24, 0x26	; 38
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	20 68       	ori	r18, 0x80	; 128
      ec:	fc 01       	movw	r30, r24
      ee:	20 83       	st	Z, r18
}
      f0:	00 00       	nop
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16 *Copy_pu16Reading)
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	cd b7       	in	r28, 0x3d	; 61
      fe:	de b7       	in	r29, 0x3e	; 62
     100:	28 97       	sbiw	r28, 0x08	; 8
     102:	0f b6       	in	r0, 0x3f	; 63
     104:	f8 94       	cli
     106:	de bf       	out	0x3e, r29	; 62
     108:	0f be       	out	0x3f, r0	; 63
     10a:	cd bf       	out	0x3d, r28	; 61
     10c:	8e 83       	std	Y+6, r24	; 0x06
     10e:	78 87       	std	Y+8, r23	; 0x08
     110:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
     112:	19 82       	std	Y+1, r1	; 0x01
     114:	1a 82       	std	Y+2, r1	; 0x02
     116:	1b 82       	std	Y+3, r1	; 0x03
     118:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8ErrorState=OK;
     11a:	1d 82       	std	Y+5, r1	; 0x05

	if(ADC_u8BusyState==IDLE)
     11c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ADC_u8BusyState>
     120:	88 23       	and	r24, r24
     122:	09 f0       	breq	.+2      	; 0x126 <ADC_u8StartConversionSynch+0x2e>
     124:	63 c0       	rjmp	.+198    	; 0x1ec <ADC_u8StartConversionSynch+0xf4>
	{
		ADC_u8BusyState=BUSY;
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ADC_u8BusyState>

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &=ADC_MULTIPLEXER_MASK;
     12c:	87 e2       	ldi	r24, 0x27	; 39
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	fc 01       	movw	r30, r24
     132:	20 81       	ld	r18, Z
     134:	87 e2       	ldi	r24, 0x27	; 39
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	20 7e       	andi	r18, 0xE0	; 224
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18

		/*set the required channel into the MUX bits*/
		ADMUX |=Copy_u8Channel;
     13e:	87 e2       	ldi	r24, 0x27	; 39
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	30 81       	ld	r19, Z
     146:	87 e2       	ldi	r24, 0x27	; 39
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	2e 81       	ldd	r18, Y+6	; 0x06
     14c:	23 2b       	or	r18, r19
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18

		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
     152:	86 e2       	ldi	r24, 0x26	; 38
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	20 81       	ld	r18, Z
     15a:	86 e2       	ldi	r24, 0x26	; 38
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	20 64       	ori	r18, 0x40	; 64
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18

		/*Polling (busy waiting) until the conversion complete flag is set or counter reached timeout*/
		while( (GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT) )
     164:	0b c0       	rjmp	.+22     	; 0x17c <ADC_u8StartConversionSynch+0x84>
		{
			Local_u32Counter++;
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	9a 81       	ldd	r25, Y+2	; 0x02
     16a:	ab 81       	ldd	r26, Y+3	; 0x03
     16c:	bc 81       	ldd	r27, Y+4	; 0x04
     16e:	01 96       	adiw	r24, 0x01	; 1
     170:	a1 1d       	adc	r26, r1
     172:	b1 1d       	adc	r27, r1
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	9a 83       	std	Y+2, r25	; 0x02
     178:	ab 83       	std	Y+3, r26	; 0x03
     17a:	bc 83       	std	Y+4, r27	; 0x04

		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reached timeout*/
		while( (GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT) )
     17c:	86 e2       	ldi	r24, 0x26	; 38
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	fc 01       	movw	r30, r24
     182:	80 81       	ld	r24, Z
     184:	82 95       	swap	r24
     186:	8f 70       	andi	r24, 0x0F	; 15
     188:	88 2f       	mov	r24, r24
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	81 70       	andi	r24, 0x01	; 1
     18e:	99 27       	eor	r25, r25
     190:	89 2b       	or	r24, r25
     192:	49 f4       	brne	.+18     	; 0x1a6 <ADC_u8StartConversionSynch+0xae>
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	9a 81       	ldd	r25, Y+2	; 0x02
     198:	ab 81       	ldd	r26, Y+3	; 0x03
     19a:	bc 81       	ldd	r27, Y+4	; 0x04
     19c:	80 35       	cpi	r24, 0x50	; 80
     19e:	93 4c       	sbci	r25, 0xC3	; 195
     1a0:	a1 05       	cpc	r26, r1
     1a2:	b1 05       	cpc	r27, r1
     1a4:	01 f7       	brne	.-64     	; 0x166 <ADC_u8StartConversionSynch+0x6e>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	ab 81       	ldd	r26, Y+3	; 0x03
     1ac:	bc 81       	ldd	r27, Y+4	; 0x04
     1ae:	80 35       	cpi	r24, 0x50	; 80
     1b0:	93 4c       	sbci	r25, 0xC3	; 195
     1b2:	a1 05       	cpc	r26, r1
     1b4:	b1 05       	cpc	r27, r1
     1b6:	19 f4       	brne	.+6      	; 0x1be <ADC_u8StartConversionSynch+0xc6>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	8d 83       	std	Y+5, r24	; 0x05
     1bc:	1a c0       	rjmp	.+52     	; 0x1f2 <ADC_u8StartConversionSynch+0xfa>
		}
		else
		{
			/*Loop is broken because flag is raised */
			 /*clear the conversion complete flag*/
			 SET_BIT(ADCSRA,ADCSRA_ADIF);
     1be:	86 e2       	ldi	r24, 0x26	; 38
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	fc 01       	movw	r30, r24
     1c4:	20 81       	ld	r18, Z
     1c6:	86 e2       	ldi	r24, 0x26	; 38
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	20 61       	ori	r18, 0x10	; 16
     1cc:	fc 01       	movw	r30, r24
     1ce:	20 83       	st	Z, r18

			#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
					*Copy_pu16Reading=ADCH;
     1d0:	85 e2       	ldi	r24, 0x25	; 37
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	fc 01       	movw	r30, r24
     1d6:	80 81       	ld	r24, Z
     1d8:	28 2f       	mov	r18, r24
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	8f 81       	ldd	r24, Y+7	; 0x07
     1de:	98 85       	ldd	r25, Y+8	; 0x08
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18

					/*ADC finished return it to idle*/
					ADC_u8BusyState=IDLE;
     1e6:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <ADC_u8BusyState>
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <ADC_u8StartConversionSynch+0xfa>
			#endif
		}
	}
	else
	{
		ADC_u8BusyState=BUSY_FUNC;
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ADC_u8BusyState>
	}
	return Local_u8ErrorState;
     1f2:	8d 81       	ldd	r24, Y+5	; 0x05
}
     1f4:	28 96       	adiw	r28, 0x08	; 8
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	f8 94       	cli
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16* Copy_pu16Reading,void (*Copy_pvNotificationFunc)(void))
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <ADC_u8StartConversionAsynch+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <ADC_u8StartConversionAsynch+0x8>
     20e:	00 d0       	rcall	.+0      	; 0x210 <ADC_u8StartConversionAsynch+0xa>
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	8a 83       	std	Y+2, r24	; 0x02
     216:	7c 83       	std	Y+4, r23	; 0x04
     218:	6b 83       	std	Y+3, r22	; 0x03
     21a:	5e 83       	std	Y+6, r21	; 0x06
     21c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
     21e:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
     220:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ADC_u8BusyState>
     224:	88 23       	and	r24, r24
     226:	09 f0       	breq	.+2      	; 0x22a <ADC_u8StartConversionAsynch+0x24>
     228:	47 c0       	rjmp	.+142    	; 0x2b8 <ADC_u8StartConversionAsynch+0xb2>
	{

		if(Copy_pvNotificationFunc == NULL || Copy_pu16Reading == NULL)
     22a:	8d 81       	ldd	r24, Y+5	; 0x05
     22c:	9e 81       	ldd	r25, Y+6	; 0x06
     22e:	89 2b       	or	r24, r25
     230:	21 f0       	breq	.+8      	; 0x23a <ADC_u8StartConversionAsynch+0x34>
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	9c 81       	ldd	r25, Y+4	; 0x04
     236:	89 2b       	or	r24, r25
     238:	19 f4       	brne	.+6      	; 0x240 <ADC_u8StartConversionAsynch+0x3a>
		{
			Local_u8ErrorState=NULL_POINTER;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	89 83       	std	Y+1, r24	; 0x01
     23e:	3e c0       	rjmp	.+124    	; 0x2bc <ADC_u8StartConversionAsynch+0xb6>
		}
		else
		{
			/*make ADC busy in order not to work until being idle */
			ADC_u8BusyState=BUSY;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ADC_u8BusyState>

			/*Make ISR Source single channel asynchronous*/
			ADC_u8ISRSource=SINGLE_CHANNEL_ASYNCH;
     246:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <ADC_u8ISRSource>

			/*Initialize the reading variable globally*/
			ADC_pu16Reading=Copy_pu16Reading;
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	9c 81       	ldd	r25, Y+4	; 0x04
     24e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
     252:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

			/*Initialize the call back notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
     256:	8d 81       	ldd	r24, Y+5	; 0x05
     258:	9e 81       	ldd	r25, Y+6	; 0x06
     25a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ADC_pvCallBackNotificationFunc+0x1>
     25e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ADC_pvCallBackNotificationFunc>

			/*Clear the MUX bits in ADMUX register*/
				ADMUX &=ADC_MULTIPLEXER_MASK;
     262:	87 e2       	ldi	r24, 0x27	; 39
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	fc 01       	movw	r30, r24
     268:	20 81       	ld	r18, Z
     26a:	87 e2       	ldi	r24, 0x27	; 39
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	20 7e       	andi	r18, 0xE0	; 224
     270:	fc 01       	movw	r30, r24
     272:	20 83       	st	Z, r18

				/*set the required channel into the MUX bits*/
				ADMUX |=Copy_u8Channel;
     274:	87 e2       	ldi	r24, 0x27	; 39
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	fc 01       	movw	r30, r24
     27a:	30 81       	ld	r19, Z
     27c:	87 e2       	ldi	r24, 0x27	; 39
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	2a 81       	ldd	r18, Y+2	; 0x02
     282:	23 2b       	or	r18, r19
     284:	fc 01       	movw	r30, r24
     286:	20 83       	st	Z, r18

				/*start conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADSC);
     288:	86 e2       	ldi	r24, 0x26	; 38
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	fc 01       	movw	r30, r24
     28e:	20 81       	ld	r18, Z
     290:	86 e2       	ldi	r24, 0x26	; 38
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	20 64       	ori	r18, 0x40	; 64
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18

				/*ADC interrupt enable */
				SET_BIT(ADCSRA,ADCSRA_ADIE);
     29a:	86 e2       	ldi	r24, 0x26	; 38
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	fc 01       	movw	r30, r24
     2a0:	20 81       	ld	r18, Z
     2a2:	86 e2       	ldi	r24, 0x26	; 38
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	28 60       	ori	r18, 0x08	; 8
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18

				/*Set flag to indicate the ISR from where it comes*/
				SET_BIT(ADC_flag,0);
     2ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <ADC_flag>
     2b0:	81 60       	ori	r24, 0x01	; 1
     2b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <ADC_flag>
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <ADC_u8StartConversionAsynch+0xb6>
		 }
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
}
     2be:	26 96       	adiw	r28, 0x06	; 6
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	f8 94       	cli
     2c4:	de bf       	out	0x3e, r29	; 62
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	cd bf       	out	0x3d, r28	; 61
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <ADC_u8StartChainAsynch>:




u8 ADC_u8StartChainAsynch(ADC_Chain_t *Copy_psChain)
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <ADC_u8StartChainAsynch+0x6>
     2d6:	0f 92       	push	r0
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	9b 83       	std	Y+3, r25	; 0x03
     2de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     2e0:	19 82       	std	Y+1, r1	; 0x01
		/*Check NULL Pointer*/
		if(Copy_psChain == NULL)
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	9b 81       	ldd	r25, Y+3	; 0x03
     2e6:	89 2b       	or	r24, r25
     2e8:	19 f4       	brne	.+6      	; 0x2f0 <ADC_u8StartChainAsynch+0x20>
		{
			Local_u8ErrorState=NULL_POINTER;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	89 83       	std	Y+1, r24	; 0x01
     2ee:	61 c0       	rjmp	.+194    	; 0x3b2 <ADC_u8StartChainAsynch+0xe2>
		}
		else
		{
			/*Check ADC State*/
			if(ADC_u8BusyState==IDLE)
     2f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <ADC_u8BusyState>
     2f4:	88 23       	and	r24, r24
     2f6:	09 f0       	breq	.+2      	; 0x2fa <ADC_u8StartChainAsynch+0x2a>
     2f8:	5a c0       	rjmp	.+180    	; 0x3ae <ADC_u8StartChainAsynch+0xde>
			{
				/*Make ADC Busy*/
				ADC_u8BusyState=BUSY;
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <ADC_u8BusyState>

				/*Make ISR Source Chain  asynchronous*/
				 ADC_u8ISRSource=CHAIN_ASYNCH;
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ADC_u8ISRSource>

				/*Initialize chain channel array*/
				ADC_pu8ChainChannelArr=Copy_psChain->Channel;
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	9b 81       	ldd	r25, Y+3	; 0x03
     30a:	fc 01       	movw	r30, r24
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ADC_pu8ChainChannelArr+0x1>
     314:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ADC_pu8ChainChannelArr>

				/*Initialize Result  array*/
				ADC_pu16ChainResultArr=Copy_psChain->Result;
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	9b 81       	ldd	r25, Y+3	; 0x03
     31c:	fc 01       	movw	r30, r24
     31e:	82 81       	ldd	r24, Z+2	; 0x02
     320:	93 81       	ldd	r25, Z+3	; 0x03
     322:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <ADC_pu16ChainResultArr+0x1>
     326:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <ADC_pu16ChainResultArr>

				/*Initialize size  */
				ADC_u8ChainSize=Copy_psChain->size;
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	fc 01       	movw	r30, r24
     330:	84 81       	ldd	r24, Z+4	; 0x04
     332:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <ADC_u8ChainSize>

				/*Initialize chain channel array*/
				ADC_pvCallBackNotificationFunc=Copy_psChain->pvNotificationFunc;
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	9b 81       	ldd	r25, Y+3	; 0x03
     33a:	fc 01       	movw	r30, r24
     33c:	85 81       	ldd	r24, Z+5	; 0x05
     33e:	96 81       	ldd	r25, Z+6	; 0x06
     340:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ADC_pvCallBackNotificationFunc+0x1>
     344:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ADC_pvCallBackNotificationFunc>

				/*Initialize current conversion index*/
				ADC_u8ChainConversionIndex=0;
     348:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <ADC_u8ChainConversionIndex>

				/*Clear the MUX bits in ADMUX register*/
				ADMUX &=ADC_MULTIPLEXER_MASK;
     34c:	87 e2       	ldi	r24, 0x27	; 39
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	fc 01       	movw	r30, r24
     352:	20 81       	ld	r18, Z
     354:	87 e2       	ldi	r24, 0x27	; 39
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	20 7e       	andi	r18, 0xE0	; 224
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18

				/*set the required channel into the MUX bits*/
				ADMUX |=ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     35e:	87 e2       	ldi	r24, 0x27	; 39
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	fc 01       	movw	r30, r24
     364:	40 81       	ld	r20, Z
     366:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <ADC_pu8ChainChannelArr>
     36a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <ADC_pu8ChainChannelArr+0x1>
     36e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <ADC_u8ChainConversionIndex>
     372:	88 2f       	mov	r24, r24
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	82 0f       	add	r24, r18
     378:	93 1f       	adc	r25, r19
     37a:	fc 01       	movw	r30, r24
     37c:	20 81       	ld	r18, Z
     37e:	87 e2       	ldi	r24, 0x27	; 39
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	24 2b       	or	r18, r20
     384:	fc 01       	movw	r30, r24
     386:	20 83       	st	Z, r18

				//start conversion of 1st channel
				SET_BIT(ADCSRA,ADCSRA_ADSC);
     388:	86 e2       	ldi	r24, 0x26	; 38
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	fc 01       	movw	r30, r24
     38e:	20 81       	ld	r18, Z
     390:	86 e2       	ldi	r24, 0x26	; 38
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	20 64       	ori	r18, 0x40	; 64
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18

				//enable interrupt
				SET_BIT(ADCSRA,ADCSRA_ADIE);
     39a:	86 e2       	ldi	r24, 0x26	; 38
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc 01       	movw	r30, r24
     3a0:	20 81       	ld	r18, Z
     3a2:	86 e2       	ldi	r24, 0x26	; 38
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	28 60       	ori	r18, 0x08	; 8
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <ADC_u8StartChainAsynch+0xe2>

			}
			else
			{
				Local_u8ErrorState=BUSY_FUNC;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	89 83       	std	Y+1, r24	; 0x01
			}
		}


return Local_u8ErrorState;
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <__vector_16>:


void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
     3ea:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_u8ISRSource>
     3ee:	88 23       	and	r24, r24
     3f0:	f9 f4       	brne	.+62     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
	{
			/*Read ADC Result */
			#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
					*ADC_pu16Reading=ADCH;
     3f2:	85 e2       	ldi	r24, 0x25	; 37
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	20 81       	ld	r18, Z
     3fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     3fe:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
     402:	22 2f       	mov	r18, r18
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	fc 01       	movw	r30, r24
     408:	31 83       	std	Z+1, r19	; 0x01
     40a:	20 83       	st	Z, r18
			#else
			#error "Wrong Resolution Selection"
			#endif

				/*Make ADC state be IDLE because it finished*/
					ADC_u8BusyState=IDLE;
     40c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <ADC_u8BusyState>

				/*Invoke the call back notification*/
				ADC_pvCallBackNotificationFunc();
     410:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ADC_pvCallBackNotificationFunc>
     414:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ADC_pvCallBackNotificationFunc+0x1>
     418:	fc 01       	movw	r30, r24
     41a:	09 95       	icall

				/*Disable the ADC Conversion complete interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
     41c:	86 e2       	ldi	r24, 0x26	; 38
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	fc 01       	movw	r30, r24
     422:	20 81       	ld	r18, Z
     424:	86 e2       	ldi	r24, 0x26	; 38
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	27 7f       	andi	r18, 0xF7	; 247
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
				/*Start the conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADIE);
			}
	}

}
     42e:	5e c0       	rjmp	.+188    	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>

				/*Disable the ADC Conversion complete interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
	}

	else if(ADC_u8ISRSource==CHAIN_ASYNCH)
     430:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_u8ISRSource>
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	09 f0       	breq	.+2      	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
     438:	59 c0       	rjmp	.+178    	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
	{
			/*Read the current conversion*/
			#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
					ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex]=ADCH;
     43a:	85 e2       	ldi	r24, 0x25	; 37
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	40 81       	ld	r20, Z
     442:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <ADC_pu16ChainResultArr>
     446:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <ADC_pu16ChainResultArr+0x1>
     44a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <ADC_u8ChainConversionIndex>
     44e:	88 2f       	mov	r24, r24
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19
     45a:	24 2f       	mov	r18, r20
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	fc 01       	movw	r30, r24
     460:	31 83       	std	Z+1, r19	; 0x01
     462:	20 83       	st	Z, r18
			#else
			#error "Wrong Resolution Selection"
			#endif

			/*increment chain index*/
					ADC_u8ChainConversionIndex++;
     464:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <ADC_u8ChainConversionIndex>
     468:	8f 5f       	subi	r24, 0xFF	; 255
     46a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <ADC_u8ChainConversionIndex>

			/*Check the size */
			if(ADC_u8ChainConversionIndex==ADC_u8ChainSize)
     46e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <ADC_u8ChainConversionIndex>
     472:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <ADC_u8ChainSize>
     476:	98 17       	cp	r25, r24
     478:	91 f4       	brne	.+36     	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
			{
				/*ADC is now idle*/
				ADC_u8BusyState=IDLE;
     47a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <ADC_u8BusyState>

				/*invoke the call back  notification Function*/
				ADC_pvCallBackNotificationFunc();
     47e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ADC_pvCallBackNotificationFunc>
     482:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ADC_pvCallBackNotificationFunc+0x1>
     486:	fc 01       	movw	r30, r24
     488:	09 95       	icall

				/*Disable ADC conversion complete interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
     48a:	86 e2       	ldi	r24, 0x26	; 38
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	20 81       	ld	r18, Z
     492:	86 e2       	ldi	r24, 0x26	; 38
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	27 7f       	andi	r18, 0xF7	; 247
     498:	fc 01       	movw	r30, r24
     49a:	20 83       	st	Z, r18
				/*Start the conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADIE);
			}
	}

}
     49c:	27 c0       	rjmp	.+78     	; 0x4ec <__FUSE_REGION_LENGTH__+0xec>
			}
			else
			{
				/*Chain is not finished*/
				/*Set the new required channel */
				ADMUX &=ADC_MULTIPLEXER_MASK;
     49e:	87 e2       	ldi	r24, 0x27	; 39
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	fc 01       	movw	r30, r24
     4a4:	20 81       	ld	r18, Z
     4a6:	87 e2       	ldi	r24, 0x27	; 39
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	20 7e       	andi	r18, 0xE0	; 224
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 83       	st	Z, r18
				ADMUX |=ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
     4b0:	87 e2       	ldi	r24, 0x27	; 39
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	fc 01       	movw	r30, r24
     4b6:	40 81       	ld	r20, Z
     4b8:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <ADC_pu8ChainChannelArr>
     4bc:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <ADC_pu8ChainChannelArr+0x1>
     4c0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <ADC_u8ChainConversionIndex>
     4c4:	88 2f       	mov	r24, r24
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	82 0f       	add	r24, r18
     4ca:	93 1f       	adc	r25, r19
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 81       	ld	r18, Z
     4d0:	87 e2       	ldi	r24, 0x27	; 39
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	24 2b       	or	r18, r20
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18

				/*Start the conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADIE);
     4da:	86 e2       	ldi	r24, 0x26	; 38
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	20 81       	ld	r18, Z
     4e2:	86 e2       	ldi	r24, 0x26	; 38
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	28 60       	ori	r18, 0x08	; 8
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
			}
	}

}
     4ec:	00 00       	nop
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	ff 91       	pop	r31
     4f4:	ef 91       	pop	r30
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	7f 91       	pop	r23
     500:	6f 91       	pop	r22
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	0f 90       	pop	r0
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	0f 90       	pop	r0
     510:	1f 90       	pop	r1
     512:	18 95       	reti

00000514 <DCMotor_u8RotateCW>:
#include "DCMotor_config.h"
#include "DCMotor_interface.h"
#include "DCMotor_private.h"

void DCMotor_u8RotateCW()
{
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(MOTOR_PORT,M1PIN1,DIO_u8PIN_HIGH);
     51c:	41 e0       	ldi	r20, 0x01	; 1
     51e:	60 e0       	ldi	r22, 0x00	; 0
     520:	84 e0       	ldi	r24, 0x04	; 4
     522:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(MOTOR_PORT,M1PIN2,DIO_u8PIN_LOW);
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	84 e0       	ldi	r24, 0x04	; 4
     52c:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_u8SetPinValue>
	
	
}
     530:	00 00       	nop
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	08 95       	ret

00000538 <DCMotor_u8RotateCCW>:
void DCMotor_u8RotateCCW()
{
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
	
	DIO_u8SetPinValue(MOTOR_PORT,M1PIN2,DIO_u8PIN_HIGH);
     540:	41 e0       	ldi	r20, 0x01	; 1
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_u8SetPinValue>
	
	DIO_u8SetPinValue(MOTOR_PORT,M1PIN1,DIO_u8PIN_LOW);
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	84 e0       	ldi	r24, 0x04	; 4
     550:	0e 94 ae 02 	call	0x55c	; 0x55c <DIO_u8SetPinValue>
	
	
}
     554:	00 00       	nop
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	08 95       	ret

0000055c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	00 d0       	rcall	.+0      	; 0x562 <DIO_u8SetPinValue+0x6>
     562:	00 d0       	rcall	.+0      	; 0x564 <DIO_u8SetPinValue+0x8>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	8a 83       	std	Y+2, r24	; 0x02
     56a:	6b 83       	std	Y+3, r22	; 0x03
     56c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
     56e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	88 30       	cpi	r24, 0x08	; 8
     574:	08 f0       	brcs	.+2      	; 0x578 <DIO_u8SetPinValue+0x1c>
     576:	f3 c0       	rjmp	.+486    	; 0x75e <DIO_u8SetPinValue+0x202>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	09 f0       	breq	.+2      	; 0x580 <DIO_u8SetPinValue+0x24>
     57e:	72 c0       	rjmp	.+228    	; 0x664 <DIO_u8SetPinValue+0x108>
		{
		switch(Copy_u8Port)
     580:	8a 81       	ldd	r24, Y+2	; 0x02
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	91 05       	cpc	r25, r1
     58a:	09 f4       	brne	.+2      	; 0x58e <DIO_u8SetPinValue+0x32>
     58c:	52 c0       	rjmp	.+164    	; 0x632 <DIO_u8SetPinValue+0xd6>
     58e:	85 30       	cpi	r24, 0x05	; 5
     590:	91 05       	cpc	r25, r1
     592:	0c f0       	brlt	.+2      	; 0x596 <DIO_u8SetPinValue+0x3a>
     594:	64 c0       	rjmp	.+200    	; 0x65e <DIO_u8SetPinValue+0x102>
     596:	83 30       	cpi	r24, 0x03	; 3
     598:	91 05       	cpc	r25, r1
     59a:	a9 f1       	breq	.+106    	; 0x606 <DIO_u8SetPinValue+0xaa>
     59c:	84 30       	cpi	r24, 0x04	; 4
     59e:	91 05       	cpc	r25, r1
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <DIO_u8SetPinValue+0x48>
     5a2:	5d c0       	rjmp	.+186    	; 0x65e <DIO_u8SetPinValue+0x102>
     5a4:	00 97       	sbiw	r24, 0x00	; 0
     5a6:	19 f0       	breq	.+6      	; 0x5ae <DIO_u8SetPinValue+0x52>
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	b9 f0       	breq	.+46     	; 0x5da <DIO_u8SetPinValue+0x7e>
     5ac:	58 c0       	rjmp	.+176    	; 0x65e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
     5ae:	8b e3       	ldi	r24, 0x3B	; 59
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	48 2f       	mov	r20, r24
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_u8SetPinValue+0x6c>
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	2a 95       	dec	r18
     5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_u8SetPinValue+0x68>
     5cc:	24 2f       	mov	r18, r20
     5ce:	28 2b       	or	r18, r24
     5d0:	8b e3       	ldi	r24, 0x3B	; 59
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
     5d8:	c4 c0       	rjmp	.+392    	; 0x762 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
     5da:	88 e3       	ldi	r24, 0x38	; 56
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	80 81       	ld	r24, Z
     5e2:	48 2f       	mov	r20, r24
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	28 2f       	mov	r18, r24
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_u8SetPinValue+0x98>
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	2a 95       	dec	r18
     5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_u8SetPinValue+0x94>
     5f8:	24 2f       	mov	r18, r20
     5fa:	28 2b       	or	r18, r24
     5fc:	88 e3       	ldi	r24, 0x38	; 56
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
     604:	ae c0       	rjmp	.+348    	; 0x762 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
     606:	85 e3       	ldi	r24, 0x35	; 53
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	fc 01       	movw	r30, r24
     60c:	80 81       	ld	r24, Z
     60e:	48 2f       	mov	r20, r24
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	28 2f       	mov	r18, r24
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_u8SetPinValue+0xc4>
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	2a 95       	dec	r18
     622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_u8SetPinValue+0xc0>
     624:	24 2f       	mov	r18, r20
     626:	28 2b       	or	r18, r24
     628:	85 e3       	ldi	r24, 0x35	; 53
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
     630:	98 c0       	rjmp	.+304    	; 0x762 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     632:	82 e3       	ldi	r24, 0x32	; 50
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	48 2f       	mov	r20, r24
     63c:	8b 81       	ldd	r24, Y+3	; 0x03
     63e:	28 2f       	mov	r18, r24
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_u8SetPinValue+0xf0>
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	2a 95       	dec	r18
     64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_u8SetPinValue+0xec>
     650:	24 2f       	mov	r18, r20
     652:	28 2b       	or	r18, r24
     654:	82 e3       	ldi	r24, 0x32	; 50
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18
     65c:	82 c0       	rjmp	.+260    	; 0x762 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	7f c0       	rjmp	.+254    	; 0x762 <DIO_u8SetPinValue+0x206>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
     664:	8c 81       	ldd	r24, Y+4	; 0x04
     666:	88 23       	and	r24, r24
     668:	09 f0       	breq	.+2      	; 0x66c <DIO_u8SetPinValue+0x110>
     66a:	76 c0       	rjmp	.+236    	; 0x758 <DIO_u8SetPinValue+0x1fc>
		{
			switch(Copy_u8Port)
     66c:	8a 81       	ldd	r24, Y+2	; 0x02
     66e:	88 2f       	mov	r24, r24
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	84 30       	cpi	r24, 0x04	; 4
     674:	91 05       	cpc	r25, r1
     676:	09 f4       	brne	.+2      	; 0x67a <DIO_u8SetPinValue+0x11e>
     678:	55 c0       	rjmp	.+170    	; 0x724 <DIO_u8SetPinValue+0x1c8>
     67a:	85 30       	cpi	r24, 0x05	; 5
     67c:	91 05       	cpc	r25, r1
     67e:	0c f0       	brlt	.+2      	; 0x682 <DIO_u8SetPinValue+0x126>
     680:	68 c0       	rjmp	.+208    	; 0x752 <DIO_u8SetPinValue+0x1f6>
     682:	83 30       	cpi	r24, 0x03	; 3
     684:	91 05       	cpc	r25, r1
     686:	b9 f1       	breq	.+110    	; 0x6f6 <DIO_u8SetPinValue+0x19a>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	91 05       	cpc	r25, r1
     68c:	0c f0       	brlt	.+2      	; 0x690 <DIO_u8SetPinValue+0x134>
     68e:	61 c0       	rjmp	.+194    	; 0x752 <DIO_u8SetPinValue+0x1f6>
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	19 f0       	breq	.+6      	; 0x69a <DIO_u8SetPinValue+0x13e>
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	c1 f0       	breq	.+48     	; 0x6c8 <DIO_u8SetPinValue+0x16c>
     698:	5c c0       	rjmp	.+184    	; 0x752 <DIO_u8SetPinValue+0x1f6>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
     69a:	8b e3       	ldi	r24, 0x3B	; 59
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	80 81       	ld	r24, Z
     6a2:	48 2f       	mov	r20, r24
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	28 2f       	mov	r18, r24
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_u8SetPinValue+0x158>
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	2a 95       	dec	r18
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_u8SetPinValue+0x154>
     6b8:	80 95       	com	r24
     6ba:	24 2f       	mov	r18, r20
     6bc:	28 23       	and	r18, r24
     6be:	8b e3       	ldi	r24, 0x3B	; 59
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
     6c6:	4d c0       	rjmp	.+154    	; 0x762 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
     6c8:	88 e3       	ldi	r24, 0x38	; 56
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	48 2f       	mov	r20, r24
     6d2:	8b 81       	ldd	r24, Y+3	; 0x03
     6d4:	28 2f       	mov	r18, r24
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_u8SetPinValue+0x186>
     6de:	88 0f       	add	r24, r24
     6e0:	99 1f       	adc	r25, r25
     6e2:	2a 95       	dec	r18
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <DIO_u8SetPinValue+0x182>
     6e6:	80 95       	com	r24
     6e8:	24 2f       	mov	r18, r20
     6ea:	28 23       	and	r18, r24
     6ec:	88 e3       	ldi	r24, 0x38	; 56
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
     6f4:	36 c0       	rjmp	.+108    	; 0x762 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
     6f6:	85 e3       	ldi	r24, 0x35	; 53
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	fc 01       	movw	r30, r24
     6fc:	80 81       	ld	r24, Z
     6fe:	48 2f       	mov	r20, r24
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	28 2f       	mov	r18, r24
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_u8SetPinValue+0x1b4>
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	2a 95       	dec	r18
     712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_u8SetPinValue+0x1b0>
     714:	80 95       	com	r24
     716:	24 2f       	mov	r18, r20
     718:	28 23       	and	r18, r24
     71a:	85 e3       	ldi	r24, 0x35	; 53
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
     722:	1f c0       	rjmp	.+62     	; 0x762 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
     724:	82 e3       	ldi	r24, 0x32	; 50
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	48 2f       	mov	r20, r24
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	28 2f       	mov	r18, r24
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_u8SetPinValue+0x1e2>
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	2a 95       	dec	r18
     740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_u8SetPinValue+0x1de>
     742:	80 95       	com	r24
     744:	24 2f       	mov	r18, r20
     746:	28 23       	and	r18, r24
     748:	82 e3       	ldi	r24, 0x32	; 50
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
     750:	08 c0       	rjmp	.+16     	; 0x762 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	05 c0       	rjmp	.+10     	; 0x762 <DIO_u8SetPinValue+0x206>


		}
		else
		{
		Local_u8ErrorState=1;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_u8SetPinValue+0x206>
		}


}
else{
	 Local_u8ErrorState=1;
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
     762:	89 81       	ldd	r24, Y+1	; 0x01

}
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	00 d0       	rcall	.+0      	; 0x778 <DIO_u8SetPortValue+0x6>
     778:	0f 92       	push	r0
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	8a 83       	std	Y+2, r24	; 0x02
     780:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     782:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     784:	8a 81       	ldd	r24, Y+2	; 0x02
     786:	88 2f       	mov	r24, r24
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	84 30       	cpi	r24, 0x04	; 4
     78c:	91 05       	cpc	r25, r1
     78e:	01 f1       	breq	.+64     	; 0x7d0 <DIO_u8SetPortValue+0x5e>
     790:	85 30       	cpi	r24, 0x05	; 5
     792:	91 05       	cpc	r25, r1
     794:	1c f5       	brge	.+70     	; 0x7dc <DIO_u8SetPortValue+0x6a>
     796:	83 30       	cpi	r24, 0x03	; 3
     798:	91 05       	cpc	r25, r1
     79a:	a1 f0       	breq	.+40     	; 0x7c4 <DIO_u8SetPortValue+0x52>
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	91 05       	cpc	r25, r1
     7a0:	ec f4       	brge	.+58     	; 0x7dc <DIO_u8SetPortValue+0x6a>
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	19 f0       	breq	.+6      	; 0x7ac <DIO_u8SetPortValue+0x3a>
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	39 f0       	breq	.+14     	; 0x7b8 <DIO_u8SetPortValue+0x46>
     7aa:	18 c0       	rjmp	.+48     	; 0x7dc <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     7ac:	8b e3       	ldi	r24, 0x3B	; 59
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	2b 81       	ldd	r18, Y+3	; 0x03
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
     7b6:	15 c0       	rjmp	.+42     	; 0x7e2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     7b8:	88 e3       	ldi	r24, 0x38	; 56
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2b 81       	ldd	r18, Y+3	; 0x03
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
     7c2:	0f c0       	rjmp	.+30     	; 0x7e2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     7c4:	85 e3       	ldi	r24, 0x35	; 53
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	2b 81       	ldd	r18, Y+3	; 0x03
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
     7ce:	09 c0       	rjmp	.+18     	; 0x7e2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     7d0:	82 e3       	ldi	r24, 0x32	; 50
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	2b 81       	ldd	r18, Y+3	; 0x03
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	00 00       	nop
				}


	return Local_u8ErrorState;
     7e2:	89 81       	ldd	r24, Y+1	; 0x01

}
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	08 95       	ret

000007f0 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <DIO_u8GetPinValue+0x6>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <DIO_u8GetPinValue+0x8>
     7f8:	0f 92       	push	r0
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
     7fe:	8a 83       	std	Y+2, r24	; 0x02
     800:	6b 83       	std	Y+3, r22	; 0x03
     802:	5d 83       	std	Y+5, r21	; 0x05
     804:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
     806:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
     808:	8c 81       	ldd	r24, Y+4	; 0x04
     80a:	9d 81       	ldd	r25, Y+5	; 0x05
     80c:	89 2b       	or	r24, r25
     80e:	09 f4       	brne	.+2      	; 0x812 <DIO_u8GetPinValue+0x22>
     810:	73 c0       	rjmp	.+230    	; 0x8f8 <__stack+0x99>
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	88 30       	cpi	r24, 0x08	; 8
     816:	08 f0       	brcs	.+2      	; 0x81a <DIO_u8GetPinValue+0x2a>
     818:	6f c0       	rjmp	.+222    	; 0x8f8 <__stack+0x99>
				{
					switch(Copy_u8Port)
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	84 30       	cpi	r24, 0x04	; 4
     822:	91 05       	cpc	r25, r1
     824:	09 f4       	brne	.+2      	; 0x828 <DIO_u8GetPinValue+0x38>
     826:	4f c0       	rjmp	.+158    	; 0x8c6 <__stack+0x67>
     828:	85 30       	cpi	r24, 0x05	; 5
     82a:	91 05       	cpc	r25, r1
     82c:	0c f0       	brlt	.+2      	; 0x830 <DIO_u8GetPinValue+0x40>
     82e:	60 c0       	rjmp	.+192    	; 0x8f0 <__stack+0x91>
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	91 05       	cpc	r25, r1
     834:	99 f1       	breq	.+102    	; 0x89c <__stack+0x3d>
     836:	84 30       	cpi	r24, 0x04	; 4
     838:	91 05       	cpc	r25, r1
     83a:	0c f0       	brlt	.+2      	; 0x83e <DIO_u8GetPinValue+0x4e>
     83c:	59 c0       	rjmp	.+178    	; 0x8f0 <__stack+0x91>
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	19 f0       	breq	.+6      	; 0x848 <DIO_u8GetPinValue+0x58>
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	b1 f0       	breq	.+44     	; 0x872 <__stack+0x13>
     846:	54 c0       	rjmp	.+168    	; 0x8f0 <__stack+0x91>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     848:	89 e3       	ldi	r24, 0x39	; 57
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	fc 01       	movw	r30, r24
     84e:	80 81       	ld	r24, Z
     850:	88 2f       	mov	r24, r24
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	2b 81       	ldd	r18, Y+3	; 0x03
     856:	22 2f       	mov	r18, r18
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	02 c0       	rjmp	.+4      	; 0x860 <__stack+0x1>
     85c:	95 95       	asr	r25
     85e:	87 95       	ror	r24
     860:	2a 95       	dec	r18
     862:	e2 f7       	brpl	.-8      	; 0x85c <DIO_u8GetPinValue+0x6c>
     864:	28 2f       	mov	r18, r24
     866:	21 70       	andi	r18, 0x01	; 1
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	9d 81       	ldd	r25, Y+5	; 0x05
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
     870:	42 c0       	rjmp	.+132    	; 0x8f6 <__stack+0x97>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     872:	86 e3       	ldi	r24, 0x36	; 54
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	fc 01       	movw	r30, r24
     878:	80 81       	ld	r24, Z
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2b 81       	ldd	r18, Y+3	; 0x03
     880:	22 2f       	mov	r18, r18
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
     886:	95 95       	asr	r25
     888:	87 95       	ror	r24
     88a:	2a 95       	dec	r18
     88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
     88e:	28 2f       	mov	r18, r24
     890:	21 70       	andi	r18, 0x01	; 1
     892:	8c 81       	ldd	r24, Y+4	; 0x04
     894:	9d 81       	ldd	r25, Y+5	; 0x05
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	2d c0       	rjmp	.+90     	; 0x8f6 <__stack+0x97>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     89c:	83 e3       	ldi	r24, 0x33	; 51
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	fc 01       	movw	r30, r24
     8a2:	80 81       	ld	r24, Z
     8a4:	88 2f       	mov	r24, r24
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	2b 81       	ldd	r18, Y+3	; 0x03
     8aa:	22 2f       	mov	r18, r18
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
     8b0:	95 95       	asr	r25
     8b2:	87 95       	ror	r24
     8b4:	2a 95       	dec	r18
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	28 2f       	mov	r18, r24
     8ba:	21 70       	andi	r18, 0x01	; 1
     8bc:	8c 81       	ldd	r24, Y+4	; 0x04
     8be:	9d 81       	ldd	r25, Y+5	; 0x05
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
     8c4:	18 c0       	rjmp	.+48     	; 0x8f6 <__stack+0x97>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     8c6:	80 e3       	ldi	r24, 0x30	; 48
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	fc 01       	movw	r30, r24
     8cc:	80 81       	ld	r24, Z
     8ce:	88 2f       	mov	r24, r24
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	2b 81       	ldd	r18, Y+3	; 0x03
     8d4:	22 2f       	mov	r18, r18
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
     8da:	95 95       	asr	r25
     8dc:	87 95       	ror	r24
     8de:	2a 95       	dec	r18
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
     8e2:	28 2f       	mov	r18, r24
     8e4:	21 70       	andi	r18, 0x01	; 1
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	9d 81       	ldd	r25, Y+5	; 0x05
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <__stack+0x97>
					     default : Local_u8ErrorState=1; break;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
					}

				}
				else
				{
				Local_u8ErrorState=1;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
     8fc:	89 81       	ldd	r24, Y+1	; 0x01


}
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     916:	8a e3       	ldi	r24, 0x3A	; 58
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	fc 01       	movw	r30, r24
     91c:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
     91e:	87 e3       	ldi	r24, 0x37	; 55
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	29 e0       	ldi	r18, 0x09	; 9
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
	DDRC=PORTC_DIR;
     928:	84 e3       	ldi	r24, 0x34	; 52
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	27 e0       	ldi	r18, 0x07	; 7
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
     932:	81 e3       	ldi	r24, 0x31	; 49
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	23 e1       	ldi	r18, 0x13	; 19
     938:	fc 01       	movw	r30, r24
     93a:	20 83       	st	Z, r18

	PORTA=PORTA_InitVal;
     93c:	8b e3       	ldi	r24, 0x3B	; 59
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
     944:	88 e3       	ldi	r24, 0x38	; 56
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
     94c:	85 e3       	ldi	r24, 0x35	; 53
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	fc 01       	movw	r30, r24
     952:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
     954:	82 e3       	ldi	r24, 0x32	; 50
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	fc 01       	movw	r30, r24
     95a:	10 82       	st	Z, r1
}
     95c:	00 00       	nop
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	08 95       	ret

00000964 <TIMER0_voidInit>:

/*Global Array of PointerToFunc*/
static void (*TIMER_pvCallBackFunc[8])(void)={NULL};

void TIMER0_voidInit(void)
{
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TIMSK,TIMSK_OCIE0);

#elif	WAVE_GENERATION_MODE == FAST_PWM

	/*choose fastPWM Mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
     96c:	83 e5       	ldi	r24, 0x53	; 83
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	fc 01       	movw	r30, r24
     972:	20 81       	ld	r18, Z
     974:	83 e5       	ldi	r24, 0x53	; 83
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	20 64       	ori	r18, 0x40	; 64
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
	SET_BIT(TCCR0,TCCR0_WGM01);
     97e:	83 e5       	ldi	r24, 0x53	; 83
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	fc 01       	movw	r30, r24
     984:	20 81       	ld	r18, Z
     986:	83 e5       	ldi	r24, 0x53	; 83
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	28 60       	ori	r18, 0x08	; 8
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
		SET_BIT(TCCR0,TCCR0_COM00);

		#elif COMP_OUT_MODE == NON_INVERTING_MODE

		/*Choose Non_Inverting mode*/
		SET_BIT(TCCR0,TCCR0_COM01);
     990:	83 e5       	ldi	r24, 0x53	; 83
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	20 81       	ld	r18, Z
     998:	83 e5       	ldi	r24, 0x53	; 83
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	20 62       	ori	r18, 0x20	; 32
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
		CLR_BIT(TCCR0,TCCR0_COM00);
     9a2:	83 e5       	ldi	r24, 0x53	; 83
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 81       	ld	r18, Z
     9aa:	83 e5       	ldi	r24, 0x53	; 83
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	2f 7e       	andi	r18, 0xEF	; 239
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
#endif



		/*Set prescaler(Bit Masking) */
		TCCR0 &=TIMER_PRESC_MASK;
     9b4:	83 e5       	ldi	r24, 0x53	; 83
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 81       	ld	r18, Z
     9bc:	83 e5       	ldi	r24, 0x53	; 83
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	28 7f       	andi	r18, 0xF8	; 248
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
		TCCR0 |=CLK_PRESCALER;
     9c6:	83 e5       	ldi	r24, 0x53	; 83
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	fc 01       	movw	r30, r24
     9cc:	20 81       	ld	r18, Z
     9ce:	83 e5       	ldi	r24, 0x53	; 83
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	22 60       	ori	r18, 0x02	; 2
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18


}
     9d8:	00 00       	nop
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	0f 92       	push	r0
     9e6:	cd b7       	in	r28, 0x3d	; 61
     9e8:	de b7       	in	r29, 0x3e	; 62
     9ea:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Value;
     9ec:	8c e5       	ldi	r24, 0x5C	; 92
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	29 81       	ldd	r18, Y+1	; 0x01
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
}
     9f6:	00 00       	nop
     9f8:	0f 90       	pop	r0
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	00 d0       	rcall	.+0      	; 0xa06 <TIMER0_u8SetCallBack+0x6>
     a06:	0f 92       	push	r0
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	9b 83       	std	Y+3, r25	; 0x03
     a0e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     a10:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_pvCallBackFunc!=NULL)
     a12:	8a 81       	ldd	r24, Y+2	; 0x02
     a14:	9b 81       	ldd	r25, Y+3	; 0x03
     a16:	89 2b       	or	r24, r25
     a18:	39 f0       	breq	.+14     	; 0xa28 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
     a1a:	8a 81       	ldd	r24, Y+2	; 0x02
     a1c:	9b 81       	ldd	r25, Y+3	; 0x03
     a1e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <TIMER0_pvCallBackFunc+0x1>
     a22:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <TIMER0_pvCallBackFunc>
     a26:	02 c0       	rjmp	.+4      	; 0xa2c <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <TIMER1_voidInit>:


void TIMER1_voidInit()
{
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
	 * By default is normal*/



		//Waveform generation mode , Fast PWM
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
     a42:	8f e4       	ldi	r24, 0x4F	; 79
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	fc 01       	movw	r30, r24
     a48:	20 81       	ld	r18, Z
     a4a:	8f e4       	ldi	r24, 0x4F	; 79
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	2e 7f       	andi	r18, 0xFE	; 254
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18
		SET_BIT(TCCR1A,TCCR1A_WGM11);
     a54:	8f e4       	ldi	r24, 0x4F	; 79
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	fc 01       	movw	r30, r24
     a5a:	20 81       	ld	r18, Z
     a5c:	8f e4       	ldi	r24, 0x4F	; 79
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	22 60       	ori	r18, 0x02	; 2
     a62:	fc 01       	movw	r30, r24
     a64:	20 83       	st	Z, r18
		SET_BIT(TCCR1B,TCCR1B_WGM12);
     a66:	8e e4       	ldi	r24, 0x4E	; 78
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 81       	ld	r18, Z
     a6e:	8e e4       	ldi	r24, 0x4E	; 78
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	28 60       	ori	r18, 0x08	; 8
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
		SET_BIT(TCCR1B,TCCR1B_WGM13);
     a78:	8e e4       	ldi	r24, 0x4E	; 78
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 81       	ld	r18, Z
     a80:	8e e4       	ldi	r24, 0x4E	; 78
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	20 61       	ori	r18, 0x10	; 16
     a86:	fc 01       	movw	r30, r24
     a88:	20 83       	st	Z, r18

		/*Prescaler */
		TCCR1B &=TIMER_PRESC_MASK;
     a8a:	8e e4       	ldi	r24, 0x4E	; 78
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	fc 01       	movw	r30, r24
     a90:	20 81       	ld	r18, Z
     a92:	8e e4       	ldi	r24, 0x4E	; 78
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	28 7f       	andi	r18, 0xF8	; 248
     a98:	fc 01       	movw	r30, r24
     a9a:	20 83       	st	Z, r18
		TCCR1B |= DIVIDE_BY_8;
     a9c:	8e e4       	ldi	r24, 0x4E	; 78
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 81       	ld	r18, Z
     aa4:	8e e4       	ldi	r24, 0x4E	; 78
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	22 60       	ori	r18, 0x02	; 2
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
}
     aae:	00 00       	nop
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 Copy_u16Value)
{
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	00 d0       	rcall	.+0      	; 0xabc <TIMER1_voidSetTimerValue+0x6>
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Value;
     ac4:	8c e4       	ldi	r24, 0x4C	; 76
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	29 81       	ldd	r18, Y+1	; 0x01
     aca:	3a 81       	ldd	r19, Y+2	; 0x02
     acc:	fc 01       	movw	r30, r24
     ace:	31 83       	std	Z+1, r19	; 0x01
     ad0:	20 83       	st	Z, r18
}
     ad2:	00 00       	nop
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <TIMER1_u16ReadTimerValue>:

u16 TIMER1_u16ReadTimerValue()
{
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
     ae6:	8c e4       	ldi	r24, 0x4C	; 76
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	fc 01       	movw	r30, r24
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <TIMER1_voidSetICR>:



void TIMER1_voidSetICR(u16 Copy_u16TopValue)
{
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	00 d0       	rcall	.+0      	; 0xafc <TIMER1_voidSetICR+0x6>
     afc:	cd b7       	in	r28, 0x3d	; 61
     afe:	de b7       	in	r29, 0x3e	; 62
     b00:	9a 83       	std	Y+2, r25	; 0x02
     b02:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TopValue;
     b04:	86 e4       	ldi	r24, 0x46	; 70
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	29 81       	ldd	r18, Y+1	; 0x01
     b0a:	3a 81       	ldd	r19, Y+2	; 0x02
     b0c:	fc 01       	movw	r30, r24
     b0e:	31 83       	std	Z+1, r19	; 0x01
     b10:	20 83       	st	Z, r18

}
     b12:	00 00       	nop
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <TIMER1_voidSetChannelACompMatch>:
void TIMER1_voidSetChannelACompMatch(u16 Copy_u16ChannelACompMatch)
{
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	00 d0       	rcall	.+0      	; 0xb24 <TIMER1_voidSetChannelACompMatch+0x6>
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	9a 83       	std	Y+2, r25	; 0x02
     b2a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16ChannelACompMatch;
     b2c:	8a e4       	ldi	r24, 0x4A	; 74
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	29 81       	ldd	r18, Y+1	; 0x01
     b32:	3a 81       	ldd	r19, Y+2	; 0x02
     b34:	fc 01       	movw	r30, r24
     b36:	31 83       	std	Z+1, r19	; 0x01
     b38:	20 83       	st	Z, r18
}
     b3a:	00 00       	nop
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <TIMER1_voidSetChannelBCompMatch>:

void TIMER1_voidSetChannelBCompMatch(u16 Copy_u16ChannelBCompMatch)
{
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER1_voidSetChannelBCompMatch+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16ChannelBCompMatch;
     b54:	88 e4       	ldi	r24, 0x48	; 72
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	29 81       	ldd	r18, Y+1	; 0x01
     b5a:	3a 81       	ldd	r19, Y+2	; 0x02
     b5c:	fc 01       	movw	r30, r24
     b5e:	31 83       	std	Z+1, r19	; 0x01
     b60:	20 83       	st	Z, r18
}
     b62:	00 00       	nop
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <ICU_voidInit>:


void ICU_voidInit()
{
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
	/*Set trigGer source to rising edge initially */
	SET_BIT(TCCR1B,TCCR1B_ICES1);
     b76:	8e e4       	ldi	r24, 0x4E	; 78
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	fc 01       	movw	r30, r24
     b7c:	20 81       	ld	r18, Z
     b7e:	8e e4       	ldi	r24, 0x4E	; 78
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	20 64       	ori	r18, 0x40	; 64
     b84:	fc 01       	movw	r30, r24
     b86:	20 83       	st	Z, r18

	/*Enable input capture interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
     b88:	89 e5       	ldi	r24, 0x59	; 89
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 81       	ld	r18, Z
     b90:	89 e5       	ldi	r24, 0x59	; 89
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	20 62       	ori	r18, 0x20	; 32
     b96:	fc 01       	movw	r30, r24
     b98:	20 83       	st	Z, r18
}
     b9a:	00 00       	nop
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <ICU_u8SetTriggerEdge>:


u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <ICU_u8SetTriggerEdge+0x6>
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     bae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Edge==ICU_RISING_EDGE)
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	51 f4       	brne	.+20     	; 0xbca <ICU_u8SetTriggerEdge+0x28>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
     bb6:	8e e4       	ldi	r24, 0x4E	; 78
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	fc 01       	movw	r30, r24
     bbc:	20 81       	ld	r18, Z
     bbe:	8e e4       	ldi	r24, 0x4E	; 78
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	20 64       	ori	r18, 0x40	; 64
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
     bc8:	0f c0       	rjmp	.+30     	; 0xbe8 <ICU_u8SetTriggerEdge+0x46>

	}
	else if(Copy_u8Edge==ICU_FALLING_EDGE)
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	88 23       	and	r24, r24
     bce:	51 f4       	brne	.+20     	; 0xbe4 <ICU_u8SetTriggerEdge+0x42>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
     bd0:	8e e4       	ldi	r24, 0x4E	; 78
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 81       	ld	r18, Z
     bd8:	8e e4       	ldi	r24, 0x4E	; 78
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	2f 7b       	andi	r18, 0xBF	; 191
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <ICU_u8SetTriggerEdge+0x46>
	}
	else
	{
		Local_u8ErrorState=NOK;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     be8:	89 81       	ldd	r24, Y+1	; 0x01
}
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <ICU_voidDisableInterrupt>:

void ICU_voidDisableInterrupt()
{
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
     bfc:	89 e5       	ldi	r24, 0x59	; 89
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	fc 01       	movw	r30, r24
     c02:	20 81       	ld	r18, Z
     c04:	89 e5       	ldi	r24, 0x59	; 89
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	2f 7d       	andi	r18, 0xDF	; 223
     c0a:	fc 01       	movw	r30, r24
     c0c:	20 83       	st	Z, r18
}
     c0e:	00 00       	nop
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <ICU_u16ReadInputCaputure>:


u16 ICU_u16ReadInputCaputure()
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     c1e:	86 e4       	ldi	r24, 0x46	; 70
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	80 81       	ld	r24, Z
     c26:	91 81       	ldd	r25, Z+1	; 0x01
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <ICU_u8SetCallBack>:

u8 ICU_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	00 d0       	rcall	.+0      	; 0xc34 <ICU_u8SetCallBack+0x6>
     c34:	0f 92       	push	r0
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	9b 83       	std	Y+3, r25	; 0x03
     c3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     c3e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc !=NULL)
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	89 2b       	or	r24, r25
     c46:	39 f0       	breq	.+14     	; 0xc56 <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	9b 81       	ldd	r25, Y+3	; 0x03
     c4c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <ICU_pvCallBackFunc+0x1>
     c50:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ICU_pvCallBackFunc>
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <TIMER_voidEnable>:


/*::::::::::::::::::::::Assignments one function contains nearly same at MCU::::::::::::::::::::::*/

u8 TIMER_voidEnable(u8 Copy_u8InterruptSource)
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <TIMER_voidEnable+0x6>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     c74:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8InterruptSource)
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	09 2e       	mov	r0, r25
     c7e:	00 0c       	add	r0, r0
     c80:	aa 0b       	sbc	r26, r26
     c82:	bb 0b       	sbc	r27, r27
     c84:	88 30       	cpi	r24, 0x08	; 8
     c86:	91 05       	cpc	r25, r1
     c88:	a1 05       	cpc	r26, r1
     c8a:	b1 05       	cpc	r27, r1
     c8c:	08 f0       	brcs	.+2      	; 0xc90 <TIMER_voidEnable+0x28>
     c8e:	55 c0       	rjmp	.+170    	; 0xd3a <TIMER_voidEnable+0xd2>
     c90:	8b 5d       	subi	r24, 0xDB	; 219
     c92:	95 4f       	sbci	r25, 0xF5	; 245
     c94:	fc 01       	movw	r30, r24
     c96:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__tablejump2__>
	{
		case TIMER0_OVF: CLR_BIT(TIMSK,TIMSK_OCIE0); break;
     c9a:	89 e5       	ldi	r24, 0x59	; 89
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	fc 01       	movw	r30, r24
     ca0:	20 81       	ld	r18, Z
     ca2:	89 e5       	ldi	r24, 0x59	; 89
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	2d 7f       	andi	r18, 0xFD	; 253
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18
     cac:	49 c0       	rjmp	.+146    	; 0xd40 <TIMER_voidEnable+0xd8>
		case TIMER0_COMP:CLR_BIT(TIMSK,TIMSK_TOIE0); break;
     cae:	89 e5       	ldi	r24, 0x59	; 89
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	fc 01       	movw	r30, r24
     cb4:	20 81       	ld	r18, Z
     cb6:	89 e5       	ldi	r24, 0x59	; 89
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	2e 7f       	andi	r18, 0xFE	; 254
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
     cc0:	3f c0       	rjmp	.+126    	; 0xd40 <TIMER_voidEnable+0xd8>
		case TIMER1_OVF: CLR_BIT(TIMSK,TIMSK_TOIE1); break;
     cc2:	89 e5       	ldi	r24, 0x59	; 89
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	20 81       	ld	r18, Z
     cca:	89 e5       	ldi	r24, 0x59	; 89
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	2b 7f       	andi	r18, 0xFB	; 251
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
     cd4:	35 c0       	rjmp	.+106    	; 0xd40 <TIMER_voidEnable+0xd8>
		case TIMER1_COMPA:CLR_BIT(TIMSK,TIMSK_OCIE1A); break;
     cd6:	89 e5       	ldi	r24, 0x59	; 89
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	fc 01       	movw	r30, r24
     cdc:	20 81       	ld	r18, Z
     cde:	89 e5       	ldi	r24, 0x59	; 89
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	2f 7e       	andi	r18, 0xEF	; 239
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 83       	st	Z, r18
     ce8:	2b c0       	rjmp	.+86     	; 0xd40 <TIMER_voidEnable+0xd8>
		case TIMER1_COMPB:CLR_BIT(TIMSK,TIMSK_OCIE1B); break;
     cea:	89 e5       	ldi	r24, 0x59	; 89
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	fc 01       	movw	r30, r24
     cf0:	20 81       	ld	r18, Z
     cf2:	89 e5       	ldi	r24, 0x59	; 89
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	27 7f       	andi	r18, 0xF7	; 247
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 83       	st	Z, r18
     cfc:	21 c0       	rjmp	.+66     	; 0xd40 <TIMER_voidEnable+0xd8>
		case TIMER1_CAPT: CLR_BIT(TIMSK,TIMSK_TICIE1); break;
     cfe:	89 e5       	ldi	r24, 0x59	; 89
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	fc 01       	movw	r30, r24
     d04:	20 81       	ld	r18, Z
     d06:	89 e5       	ldi	r24, 0x59	; 89
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	2f 7d       	andi	r18, 0xDF	; 223
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
     d10:	17 c0       	rjmp	.+46     	; 0xd40 <TIMER_voidEnable+0xd8>
		case TIMER2_OVF: CLR_BIT(TIMSK,TIMSK_TOIE2);  break;
     d12:	89 e5       	ldi	r24, 0x59	; 89
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	fc 01       	movw	r30, r24
     d18:	20 81       	ld	r18, Z
     d1a:	89 e5       	ldi	r24, 0x59	; 89
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	2f 7b       	andi	r18, 0xBF	; 191
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
     d24:	0d c0       	rjmp	.+26     	; 0xd40 <TIMER_voidEnable+0xd8>
		case TIMER2_COMP:CLR_BIT(TIMSK,TIMSK_OCIE2);  break;
     d26:	89 e5       	ldi	r24, 0x59	; 89
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	fc 01       	movw	r30, r24
     d2c:	20 81       	ld	r18, Z
     d2e:	89 e5       	ldi	r24, 0x59	; 89
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2f 77       	andi	r18, 0x7F	; 127
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <TIMER_voidEnable+0xd8>

		default :Local_u8ErrorState=NOK;   break;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	89 83       	std	Y+1, r24	; 0x01
     d3e:	00 00       	nop

	}

return	Local_u8ErrorState;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
}
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	08 95       	ret

00000d4c <TIMER_voidDisable>:



u8 TIMER_voidDisable(u8 Copy_u8InterruptSource)
{
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	00 d0       	rcall	.+0      	; 0xd52 <TIMER_voidDisable+0x6>
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     d58:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8InterruptSource)
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	09 2e       	mov	r0, r25
     d62:	00 0c       	add	r0, r0
     d64:	aa 0b       	sbc	r26, r26
     d66:	bb 0b       	sbc	r27, r27
     d68:	88 30       	cpi	r24, 0x08	; 8
     d6a:	91 05       	cpc	r25, r1
     d6c:	a1 05       	cpc	r26, r1
     d6e:	b1 05       	cpc	r27, r1
     d70:	08 f0       	brcs	.+2      	; 0xd74 <TIMER_voidDisable+0x28>
     d72:	55 c0       	rjmp	.+170    	; 0xe1e <TIMER_voidDisable+0xd2>
     d74:	83 5d       	subi	r24, 0xD3	; 211
     d76:	95 4f       	sbci	r25, 0xF5	; 245
     d78:	fc 01       	movw	r30, r24
     d7a:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__tablejump2__>
	{
		case TIMER0_OVF: SET_BIT(TIMSK,TIMSK_OCIE0); break;
     d7e:	89 e5       	ldi	r24, 0x59	; 89
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	fc 01       	movw	r30, r24
     d84:	20 81       	ld	r18, Z
     d86:	89 e5       	ldi	r24, 0x59	; 89
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	22 60       	ori	r18, 0x02	; 2
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
     d90:	49 c0       	rjmp	.+146    	; 0xe24 <TIMER_voidDisable+0xd8>
		case TIMER0_COMP:SET_BIT(TIMSK,TIMSK_TOIE0); break;
     d92:	89 e5       	ldi	r24, 0x59	; 89
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	fc 01       	movw	r30, r24
     d98:	20 81       	ld	r18, Z
     d9a:	89 e5       	ldi	r24, 0x59	; 89
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	21 60       	ori	r18, 0x01	; 1
     da0:	fc 01       	movw	r30, r24
     da2:	20 83       	st	Z, r18
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <TIMER_voidDisable+0xd8>
		case TIMER1_OVF: SET_BIT(TIMSK,TIMSK_TOIE1); break;
     da6:	89 e5       	ldi	r24, 0x59	; 89
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	fc 01       	movw	r30, r24
     dac:	20 81       	ld	r18, Z
     dae:	89 e5       	ldi	r24, 0x59	; 89
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	24 60       	ori	r18, 0x04	; 4
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
     db8:	35 c0       	rjmp	.+106    	; 0xe24 <TIMER_voidDisable+0xd8>
		case TIMER1_COMPA:SET_BIT(TIMSK,TIMSK_OCIE1A); break;
     dba:	89 e5       	ldi	r24, 0x59	; 89
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	fc 01       	movw	r30, r24
     dc0:	20 81       	ld	r18, Z
     dc2:	89 e5       	ldi	r24, 0x59	; 89
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	20 61       	ori	r18, 0x10	; 16
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
     dcc:	2b c0       	rjmp	.+86     	; 0xe24 <TIMER_voidDisable+0xd8>
		case TIMER1_COMPB:SET_BIT(TIMSK,TIMSK_OCIE1B); break;
     dce:	89 e5       	ldi	r24, 0x59	; 89
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	fc 01       	movw	r30, r24
     dd4:	20 81       	ld	r18, Z
     dd6:	89 e5       	ldi	r24, 0x59	; 89
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	28 60       	ori	r18, 0x08	; 8
     ddc:	fc 01       	movw	r30, r24
     dde:	20 83       	st	Z, r18
     de0:	21 c0       	rjmp	.+66     	; 0xe24 <TIMER_voidDisable+0xd8>
		case TIMER1_CAPT: SET_BIT(TIMSK,TIMSK_TICIE1); break;
     de2:	89 e5       	ldi	r24, 0x59	; 89
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	20 81       	ld	r18, Z
     dea:	89 e5       	ldi	r24, 0x59	; 89
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	20 62       	ori	r18, 0x20	; 32
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
     df4:	17 c0       	rjmp	.+46     	; 0xe24 <TIMER_voidDisable+0xd8>
		case TIMER2_OVF: SET_BIT(TIMSK,TIMSK_TOIE2);  break;
     df6:	89 e5       	ldi	r24, 0x59	; 89
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 81       	ld	r18, Z
     dfe:	89 e5       	ldi	r24, 0x59	; 89
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	20 64       	ori	r18, 0x40	; 64
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
     e08:	0d c0       	rjmp	.+26     	; 0xe24 <TIMER_voidDisable+0xd8>
		case TIMER2_COMP:SET_BIT(TIMSK,TIMSK_OCIE2);  break;
     e0a:	89 e5       	ldi	r24, 0x59	; 89
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fc 01       	movw	r30, r24
     e10:	20 81       	ld	r18, Z
     e12:	89 e5       	ldi	r24, 0x59	; 89
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	20 68       	ori	r18, 0x80	; 128
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <TIMER_voidDisable+0xd8>

		default :Local_u8ErrorState=NOK;   break;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	00 00       	nop

	}

return	Local_u8ErrorState;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <TIMER_voidSetCallBack>:




u8 TIMER_voidSetCallBack(void (*Copy_pvCallBackFunc)(void),u8 Copy_u8InterruptSourceNo)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <TIMER_voidSetCallBack+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <TIMER_voidSetCallBack+0x8>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9b 83       	std	Y+3, r25	; 0x03
     e3e:	8a 83       	std	Y+2, r24	; 0x02
     e40:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=OK;
     e42:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_pvCallBackFunc != NULL)
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	9b 81       	ldd	r25, Y+3	; 0x03
     e48:	89 2b       	or	r24, r25
     e4a:	69 f0       	breq	.+26     	; 0xe66 <TIMER_voidSetCallBack+0x36>
	{
		TIMER_pvCallBackFunc[Copy_u8InterruptSourceNo] = Copy_pvCallBackFunc;
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	80 59       	subi	r24, 0x90	; 144
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	2a 81       	ldd	r18, Y+2	; 0x02
     e5c:	3b 81       	ldd	r19, Y+3	; 0x03
     e5e:	fc 01       	movw	r30, r24
     e60:	31 83       	std	Z+1, r19	; 0x01
     e62:	20 83       	st	Z, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <TIMER_voidSetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState=NOK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <__vector_11>:

/*::::::::::::TIMER0 OVF::::::::::::*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
     e7a:	1f 92       	push	r1
     e7c:	0f 92       	push	r0
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	0f 92       	push	r0
     e82:	11 24       	eor	r1, r1
     e84:	2f 93       	push	r18
     e86:	3f 93       	push	r19
     e88:	4f 93       	push	r20
     e8a:	5f 93       	push	r21
     e8c:	6f 93       	push	r22
     e8e:	7f 93       	push	r23
     e90:	8f 93       	push	r24
     e92:	9f 93       	push	r25
     e94:	af 93       	push	r26
     e96:	bf 93       	push	r27
     e98:	ef 93       	push	r30
     e9a:	ff 93       	push	r31
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER0_OVF] != NULL)
     ea4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <TIMER_pvCallBackFunc>
     ea8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <TIMER_pvCallBackFunc+0x1>
     eac:	89 2b       	or	r24, r25
     eae:	31 f0       	breq	.+12     	; 0xebc <__vector_11+0x42>
	{
		TIMER_pvCallBackFunc[TIMER0_OVF]();
     eb0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <TIMER_pvCallBackFunc>
     eb4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <TIMER_pvCallBackFunc+0x1>
     eb8:	fc 01       	movw	r30, r24
     eba:	09 95       	icall
	}

}
     ebc:	00 00       	nop
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	bf 91       	pop	r27
     ec8:	af 91       	pop	r26
     eca:	9f 91       	pop	r25
     ecc:	8f 91       	pop	r24
     ece:	7f 91       	pop	r23
     ed0:	6f 91       	pop	r22
     ed2:	5f 91       	pop	r21
     ed4:	4f 91       	pop	r20
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <__vector_10>:


/*::::::::::::TIMER0 COMP::::::::::::*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	2f 93       	push	r18
     ef0:	3f 93       	push	r19
     ef2:	4f 93       	push	r20
     ef4:	5f 93       	push	r21
     ef6:	6f 93       	push	r22
     ef8:	7f 93       	push	r23
     efa:	8f 93       	push	r24
     efc:	9f 93       	push	r25
     efe:	af 93       	push	r26
     f00:	bf 93       	push	r27
     f02:	ef 93       	push	r30
     f04:	ff 93       	push	r31
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER0_COMP] != NULL)
     f0e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <TIMER_pvCallBackFunc+0x2>
     f12:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TIMER_pvCallBackFunc+0x3>
     f16:	89 2b       	or	r24, r25
     f18:	31 f0       	breq	.+12     	; 0xf26 <__vector_10+0x42>
	{
		TIMER_pvCallBackFunc[TIMER0_COMP]();
     f1a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <TIMER_pvCallBackFunc+0x2>
     f1e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TIMER_pvCallBackFunc+0x3>
     f22:	fc 01       	movw	r30, r24
     f24:	09 95       	icall
	}
}
     f26:	00 00       	nop
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <__vector_9>:


/*::::::::::::TIMER1 OVF::::::::::::*/
void __vector_9 (void) __attribute__((signal));
void __vector_9 (void)
{
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	2f 93       	push	r18
     f5a:	3f 93       	push	r19
     f5c:	4f 93       	push	r20
     f5e:	5f 93       	push	r21
     f60:	6f 93       	push	r22
     f62:	7f 93       	push	r23
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	af 93       	push	r26
     f6a:	bf 93       	push	r27
     f6c:	ef 93       	push	r30
     f6e:	ff 93       	push	r31
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER1_OVF] != NULL)
     f78:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <TIMER_pvCallBackFunc+0x4>
     f7c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <TIMER_pvCallBackFunc+0x5>
     f80:	89 2b       	or	r24, r25
     f82:	31 f0       	breq	.+12     	; 0xf90 <__vector_9+0x42>
	{
		TIMER_pvCallBackFunc[TIMER1_OVF]();
     f84:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <TIMER_pvCallBackFunc+0x4>
     f88:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <TIMER_pvCallBackFunc+0x5>
     f8c:	fc 01       	movw	r30, r24
     f8e:	09 95       	icall
	}
}
     f90:	00 00       	nop
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	bf 91       	pop	r27
     f9c:	af 91       	pop	r26
     f9e:	9f 91       	pop	r25
     fa0:	8f 91       	pop	r24
     fa2:	7f 91       	pop	r23
     fa4:	6f 91       	pop	r22
     fa6:	5f 91       	pop	r21
     fa8:	4f 91       	pop	r20
     faa:	3f 91       	pop	r19
     fac:	2f 91       	pop	r18
     fae:	0f 90       	pop	r0
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	0f 90       	pop	r0
     fb4:	1f 90       	pop	r1
     fb6:	18 95       	reti

00000fb8 <__vector_8>:


/*::::::::::::TIMER1 COMPB::::::::::::*/
void __vector_8 (void) __attribute__((signal));
void __vector_8 (void)
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER1_COMPB] != NULL)
     fe2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <TIMER_pvCallBackFunc+0x8>
     fe6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <TIMER_pvCallBackFunc+0x9>
     fea:	89 2b       	or	r24, r25
     fec:	31 f0       	breq	.+12     	; 0xffa <__vector_8+0x42>
	{
		TIMER_pvCallBackFunc[TIMER1_COMPB]();
     fee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <TIMER_pvCallBackFunc+0x8>
     ff2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <TIMER_pvCallBackFunc+0x9>
     ff6:	fc 01       	movw	r30, r24
     ff8:	09 95       	icall
	}

}
     ffa:	00 00       	nop
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	ff 91       	pop	r31
    1002:	ef 91       	pop	r30
    1004:	bf 91       	pop	r27
    1006:	af 91       	pop	r26
    1008:	9f 91       	pop	r25
    100a:	8f 91       	pop	r24
    100c:	7f 91       	pop	r23
    100e:	6f 91       	pop	r22
    1010:	5f 91       	pop	r21
    1012:	4f 91       	pop	r20
    1014:	3f 91       	pop	r19
    1016:	2f 91       	pop	r18
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_7>:

/*::::::::::::TIMER1 COMPA::::::::::::*/
void __vector_7 (void) __attribute__((signal));
void __vector_7 (void)
{
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER1_COMPA] != NULL)
    104c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TIMER_pvCallBackFunc+0x6>
    1050:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <TIMER_pvCallBackFunc+0x7>
    1054:	89 2b       	or	r24, r25
    1056:	31 f0       	breq	.+12     	; 0x1064 <__vector_7+0x42>
	{
		TIMER_pvCallBackFunc[TIMER1_COMPA]();
    1058:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TIMER_pvCallBackFunc+0x6>
    105c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <TIMER_pvCallBackFunc+0x7>
    1060:	fc 01       	movw	r30, r24
    1062:	09 95       	icall
	}

}
    1064:	00 00       	nop
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	ff 91       	pop	r31
    106c:	ef 91       	pop	r30
    106e:	bf 91       	pop	r27
    1070:	af 91       	pop	r26
    1072:	9f 91       	pop	r25
    1074:	8f 91       	pop	r24
    1076:	7f 91       	pop	r23
    1078:	6f 91       	pop	r22
    107a:	5f 91       	pop	r21
    107c:	4f 91       	pop	r20
    107e:	3f 91       	pop	r19
    1080:	2f 91       	pop	r18
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <__vector_6>:


/*::::::::::::TIMER1 CAPT::::::::::::*/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER1_CAPT] != NULL)
    10b6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TIMER_pvCallBackFunc+0xa>
    10ba:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <TIMER_pvCallBackFunc+0xb>
    10be:	89 2b       	or	r24, r25
    10c0:	31 f0       	breq	.+12     	; 0x10ce <__vector_6+0x42>
	{
		TIMER_pvCallBackFunc[TIMER1_CAPT]();
    10c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <TIMER_pvCallBackFunc+0xa>
    10c6:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <TIMER_pvCallBackFunc+0xb>
    10ca:	fc 01       	movw	r30, r24
    10cc:	09 95       	icall
	}

}
    10ce:	00 00       	nop
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	bf 91       	pop	r27
    10da:	af 91       	pop	r26
    10dc:	9f 91       	pop	r25
    10de:	8f 91       	pop	r24
    10e0:	7f 91       	pop	r23
    10e2:	6f 91       	pop	r22
    10e4:	5f 91       	pop	r21
    10e6:	4f 91       	pop	r20
    10e8:	3f 91       	pop	r19
    10ea:	2f 91       	pop	r18
    10ec:	0f 90       	pop	r0
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	0f 90       	pop	r0
    10f2:	1f 90       	pop	r1
    10f4:	18 95       	reti

000010f6 <__vector_5>:


/*::::::::::::TIMER2 OVF::::::::::::*/
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
    10f6:	1f 92       	push	r1
    10f8:	0f 92       	push	r0
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	0f 92       	push	r0
    10fe:	11 24       	eor	r1, r1
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER2_OVF] != NULL)
    1120:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <TIMER_pvCallBackFunc+0xc>
    1124:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <TIMER_pvCallBackFunc+0xd>
    1128:	89 2b       	or	r24, r25
    112a:	31 f0       	breq	.+12     	; 0x1138 <__vector_5+0x42>
	{
		TIMER_pvCallBackFunc[TIMER2_OVF]();
    112c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <TIMER_pvCallBackFunc+0xc>
    1130:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <TIMER_pvCallBackFunc+0xd>
    1134:	fc 01       	movw	r30, r24
    1136:	09 95       	icall
	}

}
    1138:	00 00       	nop
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <__vector_4>:


/*::::::::::::TIMER2 COMP::::::::::::*/
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_pvCallBackFunc[TIMER2_COMP] != NULL)
    118a:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <TIMER_pvCallBackFunc+0xe>
    118e:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <TIMER_pvCallBackFunc+0xf>
    1192:	89 2b       	or	r24, r25
    1194:	31 f0       	breq	.+12     	; 0x11a2 <__vector_4+0x42>
	{
		TIMER_pvCallBackFunc[TIMER2_COMP]();
    1196:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <TIMER_pvCallBackFunc+0xe>
    119a:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <TIMER_pvCallBackFunc+0xf>
    119e:	fc 01       	movw	r30, r24
    11a0:	09 95       	icall
	}

}
    11a2:	00 00       	nop
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	ff 91       	pop	r31
    11aa:	ef 91       	pop	r30
    11ac:	bf 91       	pop	r27
    11ae:	af 91       	pop	r26
    11b0:	9f 91       	pop	r25
    11b2:	8f 91       	pop	r24
    11b4:	7f 91       	pop	r23
    11b6:	6f 91       	pop	r22
    11b8:	5f 91       	pop	r21
    11ba:	4f 91       	pop	r20
    11bc:	3f 91       	pop	r19
    11be:	2f 91       	pop	r18
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	0f 90       	pop	r0
    11c6:	1f 90       	pop	r1
    11c8:	18 95       	reti

000011ca <map>:
#include "DCMotor_interface.h"
#include "util/delay.h"


s32 map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal)
{
    11ca:	af 92       	push	r10
    11cc:	bf 92       	push	r11
    11ce:	cf 92       	push	r12
    11d0:	df 92       	push	r13
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	a4 97       	sbiw	r28, 0x24	; 36
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	6d 83       	std	Y+5, r22	; 0x05
    11f0:	7e 83       	std	Y+6, r23	; 0x06
    11f2:	8f 83       	std	Y+7, r24	; 0x07
    11f4:	98 87       	std	Y+8, r25	; 0x08
    11f6:	29 87       	std	Y+9, r18	; 0x09
    11f8:	3a 87       	std	Y+10, r19	; 0x0a
    11fa:	4b 87       	std	Y+11, r20	; 0x0b
    11fc:	5c 87       	std	Y+12, r21	; 0x0c
    11fe:	ed 86       	std	Y+13, r14	; 0x0d
    1200:	fe 86       	std	Y+14, r15	; 0x0e
    1202:	0f 87       	std	Y+15, r16	; 0x0f
    1204:	18 8b       	std	Y+16, r17	; 0x10
    1206:	a9 8a       	std	Y+17, r10	; 0x11
    1208:	ba 8a       	std	Y+18, r11	; 0x12
    120a:	cb 8a       	std	Y+19, r12	; 0x13
    120c:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Local_s32outputVal;
	Local_s32outputVal=Copy_s32OutputMax-Copy_s32OutputMin;
    120e:	49 89       	ldd	r20, Y+17	; 0x11
    1210:	5a 89       	ldd	r21, Y+18	; 0x12
    1212:	6b 89       	ldd	r22, Y+19	; 0x13
    1214:	7c 89       	ldd	r23, Y+20	; 0x14
    1216:	8d 85       	ldd	r24, Y+13	; 0x0d
    1218:	9e 85       	ldd	r25, Y+14	; 0x0e
    121a:	af 85       	ldd	r26, Y+15	; 0x0f
    121c:	b8 89       	ldd	r27, Y+16	; 0x10
    121e:	8a 01       	movw	r16, r20
    1220:	9b 01       	movw	r18, r22
    1222:	08 1b       	sub	r16, r24
    1224:	19 0b       	sbc	r17, r25
    1226:	2a 0b       	sbc	r18, r26
    1228:	3b 0b       	sbc	r19, r27
    122a:	d9 01       	movw	r26, r18
    122c:	c8 01       	movw	r24, r16
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	ab 83       	std	Y+3, r26	; 0x03
    1234:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32outputVal *=(Copy_s32InputVal-Copy_s32InputMin);
    1236:	49 a9       	ldd	r20, Y+49	; 0x31
    1238:	5a a9       	ldd	r21, Y+50	; 0x32
    123a:	6b a9       	ldd	r22, Y+51	; 0x33
    123c:	7c a9       	ldd	r23, Y+52	; 0x34
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	af 81       	ldd	r26, Y+7	; 0x07
    1244:	b8 85       	ldd	r27, Y+8	; 0x08
    1246:	8a 01       	movw	r16, r20
    1248:	9b 01       	movw	r18, r22
    124a:	08 1b       	sub	r16, r24
    124c:	19 0b       	sbc	r17, r25
    124e:	2a 0b       	sbc	r18, r26
    1250:	3b 0b       	sbc	r19, r27
    1252:	0d 8b       	std	Y+21, r16	; 0x15
    1254:	1e 8b       	std	Y+22, r17	; 0x16
    1256:	2f 8b       	std	Y+23, r18	; 0x17
    1258:	38 8f       	std	Y+24, r19	; 0x18
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	9a 81       	ldd	r25, Y+2	; 0x02
    125e:	ab 81       	ldd	r26, Y+3	; 0x03
    1260:	bc 81       	ldd	r27, Y+4	; 0x04
    1262:	9c 01       	movw	r18, r24
    1264:	ad 01       	movw	r20, r26
    1266:	6d 89       	ldd	r22, Y+21	; 0x15
    1268:	7e 89       	ldd	r23, Y+22	; 0x16
    126a:	8f 89       	ldd	r24, Y+23	; 0x17
    126c:	98 8d       	ldd	r25, Y+24	; 0x18
    126e:	0e 94 b2 09 	call	0x1364	; 0x1364 <__mulsi3>
    1272:	6d 8f       	std	Y+29, r22	; 0x1d
    1274:	7e 8f       	std	Y+30, r23	; 0x1e
    1276:	8f 8f       	std	Y+31, r24	; 0x1f
    1278:	98 a3       	std	Y+32, r25	; 0x20
    127a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    127e:	af 8d       	ldd	r26, Y+31	; 0x1f
    1280:	b8 a1       	ldd	r27, Y+32	; 0x20
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	9a 83       	std	Y+2, r25	; 0x02
    1286:	ab 83       	std	Y+3, r26	; 0x03
    1288:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32outputVal /=Copy_s32InputMax-Copy_s32InputMin;
    128a:	49 85       	ldd	r20, Y+9	; 0x09
    128c:	5a 85       	ldd	r21, Y+10	; 0x0a
    128e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1290:	7c 85       	ldd	r23, Y+12	; 0x0c
    1292:	8d 81       	ldd	r24, Y+5	; 0x05
    1294:	9e 81       	ldd	r25, Y+6	; 0x06
    1296:	af 81       	ldd	r26, Y+7	; 0x07
    1298:	b8 85       	ldd	r27, Y+8	; 0x08
    129a:	8a 01       	movw	r16, r20
    129c:	9b 01       	movw	r18, r22
    129e:	08 1b       	sub	r16, r24
    12a0:	19 0b       	sbc	r17, r25
    12a2:	2a 0b       	sbc	r18, r26
    12a4:	3b 0b       	sbc	r19, r27
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	ab 81       	ldd	r26, Y+3	; 0x03
    12ac:	bc 81       	ldd	r27, Y+4	; 0x04
    12ae:	89 a3       	std	Y+33, r24	; 0x21
    12b0:	9a a3       	std	Y+34, r25	; 0x22
    12b2:	ab a3       	std	Y+35, r26	; 0x23
    12b4:	bc a3       	std	Y+36, r27	; 0x24
    12b6:	69 a1       	ldd	r22, Y+33	; 0x21
    12b8:	7a a1       	ldd	r23, Y+34	; 0x22
    12ba:	8b a1       	ldd	r24, Y+35	; 0x23
    12bc:	9c a1       	ldd	r25, Y+36	; 0x24
    12be:	a9 01       	movw	r20, r18
    12c0:	98 01       	movw	r18, r16
    12c2:	0e 94 c2 09 	call	0x1384	; 0x1384 <__divmodsi4>
    12c6:	da 01       	movw	r26, r20
    12c8:	c9 01       	movw	r24, r18
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	ab 83       	std	Y+3, r26	; 0x03
    12d0:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32outputVal +=Copy_s32OutputMin;
    12d2:	49 81       	ldd	r20, Y+1	; 0x01
    12d4:	5a 81       	ldd	r21, Y+2	; 0x02
    12d6:	6b 81       	ldd	r22, Y+3	; 0x03
    12d8:	7c 81       	ldd	r23, Y+4	; 0x04
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	af 85       	ldd	r26, Y+15	; 0x0f
    12e0:	b8 89       	ldd	r27, Y+16	; 0x10
    12e2:	84 0f       	add	r24, r20
    12e4:	95 1f       	adc	r25, r21
    12e6:	a6 1f       	adc	r26, r22
    12e8:	b7 1f       	adc	r27, r23
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	ab 83       	std	Y+3, r26	; 0x03
    12f0:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32outputVal;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	ab 81       	ldd	r26, Y+3	; 0x03
    12f8:	bc 81       	ldd	r27, Y+4	; 0x04
    12fa:	89 8f       	std	Y+25, r24	; 0x19
    12fc:	9a 8f       	std	Y+26, r25	; 0x1a
    12fe:	ab 8f       	std	Y+27, r26	; 0x1b
    1300:	bc 8f       	std	Y+28, r27	; 0x1c
	}
    1302:	69 8d       	ldd	r22, Y+25	; 0x19
    1304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130a:	a4 96       	adiw	r28, 0x24	; 36
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	bf 90       	pop	r11
    1328:	af 90       	pop	r10
    132a:	08 95       	ret

0000132c <main>:


void main ()
{
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	00 d0       	rcall	.+0      	; 0x1332 <main+0x6>
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    1338:	0e 94 87 04 	call	0x90e	; 0x90e <PORT_voidInit>
	TIMER0_voidInit();
    133c:	0e 94 b2 04 	call	0x964	; 0x964 <TIMER0_voidInit>
	u8 APP_u8POTReading;
	u16 App_u16ADCReadingVal;
	while(1)
	 {
		/*Get the reading from Potentiometer*/
		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN1,&APP_u8POTReading);
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	ac 01       	movw	r20, r24
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <DIO_u8GetPinValue>
		ADC_u8StartConversionSynch(SINGLE_ENDED_ADC0,&App_u16ADCReadingVal);
    134e:	ce 01       	movw	r24, r28
    1350:	02 96       	adiw	r24, 0x02	; 2
    1352:	bc 01       	movw	r22, r24
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	0e 94 7c 00 	call	0xf8	; 0xf8 <ADC_u8StartConversionSynch>

		/**/

		TIMER0_voidSetCompMatchValue(App_u16ADCReadingVal);
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	9b 81       	ldd	r25, Y+3	; 0x03
    135e:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <TIMER0_voidSetCompMatchValue>
	u8 APP_u8POTReading;
	u16 App_u16ADCReadingVal;
	while(1)
	 {
		/*Get the reading from Potentiometer*/
		DIO_u8GetPinValue(DIO_u8PORTA,DIO_u8PIN1,&APP_u8POTReading);
    1362:	ee cf       	rjmp	.-36     	; 0x1340 <main+0x14>

00001364 <__mulsi3>:
    1364:	db 01       	movw	r26, r22
    1366:	8f 93       	push	r24
    1368:	9f 93       	push	r25
    136a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__muluhisi3>
    136e:	bf 91       	pop	r27
    1370:	af 91       	pop	r26
    1372:	a2 9f       	mul	r26, r18
    1374:	80 0d       	add	r24, r0
    1376:	91 1d       	adc	r25, r1
    1378:	a3 9f       	mul	r26, r19
    137a:	90 0d       	add	r25, r0
    137c:	b2 9f       	mul	r27, r18
    137e:	90 0d       	add	r25, r0
    1380:	11 24       	eor	r1, r1
    1382:	08 95       	ret

00001384 <__divmodsi4>:
    1384:	05 2e       	mov	r0, r21
    1386:	97 fb       	bst	r25, 7
    1388:	1e f4       	brtc	.+6      	; 0x1390 <__divmodsi4+0xc>
    138a:	00 94       	com	r0
    138c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__negsi2>
    1390:	57 fd       	sbrc	r21, 7
    1392:	07 d0       	rcall	.+14     	; 0x13a2 <__divmodsi4_neg2>
    1394:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__udivmodsi4>
    1398:	07 fc       	sbrc	r0, 7
    139a:	03 d0       	rcall	.+6      	; 0x13a2 <__divmodsi4_neg2>
    139c:	4e f4       	brtc	.+18     	; 0x13b0 <__divmodsi4_exit>
    139e:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__negsi2>

000013a2 <__divmodsi4_neg2>:
    13a2:	50 95       	com	r21
    13a4:	40 95       	com	r20
    13a6:	30 95       	com	r19
    13a8:	21 95       	neg	r18
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	4f 4f       	sbci	r20, 0xFF	; 255
    13ae:	5f 4f       	sbci	r21, 0xFF	; 255

000013b0 <__divmodsi4_exit>:
    13b0:	08 95       	ret

000013b2 <__negsi2>:
    13b2:	90 95       	com	r25
    13b4:	80 95       	com	r24
    13b6:	70 95       	com	r23
    13b8:	61 95       	neg	r22
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	08 95       	ret

000013c2 <__tablejump2__>:
    13c2:	ee 0f       	add	r30, r30
    13c4:	ff 1f       	adc	r31, r31
    13c6:	05 90       	lpm	r0, Z+
    13c8:	f4 91       	lpm	r31, Z
    13ca:	e0 2d       	mov	r30, r0
    13cc:	09 94       	ijmp

000013ce <__muluhisi3>:
    13ce:	0e 94 14 0a 	call	0x1428	; 0x1428 <__umulhisi3>
    13d2:	a5 9f       	mul	r26, r21
    13d4:	90 0d       	add	r25, r0
    13d6:	b4 9f       	mul	r27, r20
    13d8:	90 0d       	add	r25, r0
    13da:	a4 9f       	mul	r26, r20
    13dc:	80 0d       	add	r24, r0
    13de:	91 1d       	adc	r25, r1
    13e0:	11 24       	eor	r1, r1
    13e2:	08 95       	ret

000013e4 <__udivmodsi4>:
    13e4:	a1 e2       	ldi	r26, 0x21	; 33
    13e6:	1a 2e       	mov	r1, r26
    13e8:	aa 1b       	sub	r26, r26
    13ea:	bb 1b       	sub	r27, r27
    13ec:	fd 01       	movw	r30, r26
    13ee:	0d c0       	rjmp	.+26     	; 0x140a <__udivmodsi4_ep>

000013f0 <__udivmodsi4_loop>:
    13f0:	aa 1f       	adc	r26, r26
    13f2:	bb 1f       	adc	r27, r27
    13f4:	ee 1f       	adc	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	a2 17       	cp	r26, r18
    13fa:	b3 07       	cpc	r27, r19
    13fc:	e4 07       	cpc	r30, r20
    13fe:	f5 07       	cpc	r31, r21
    1400:	20 f0       	brcs	.+8      	; 0x140a <__udivmodsi4_ep>
    1402:	a2 1b       	sub	r26, r18
    1404:	b3 0b       	sbc	r27, r19
    1406:	e4 0b       	sbc	r30, r20
    1408:	f5 0b       	sbc	r31, r21

0000140a <__udivmodsi4_ep>:
    140a:	66 1f       	adc	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	1a 94       	dec	r1
    1414:	69 f7       	brne	.-38     	; 0x13f0 <__udivmodsi4_loop>
    1416:	60 95       	com	r22
    1418:	70 95       	com	r23
    141a:	80 95       	com	r24
    141c:	90 95       	com	r25
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	bd 01       	movw	r22, r26
    1424:	cf 01       	movw	r24, r30
    1426:	08 95       	ret

00001428 <__umulhisi3>:
    1428:	a2 9f       	mul	r26, r18
    142a:	b0 01       	movw	r22, r0
    142c:	b3 9f       	mul	r27, r19
    142e:	c0 01       	movw	r24, r0
    1430:	a3 9f       	mul	r26, r19
    1432:	70 0d       	add	r23, r0
    1434:	81 1d       	adc	r24, r1
    1436:	11 24       	eor	r1, r1
    1438:	91 1d       	adc	r25, r1
    143a:	b2 9f       	mul	r27, r18
    143c:	70 0d       	add	r23, r0
    143e:	81 1d       	adc	r24, r1
    1440:	11 24       	eor	r1, r1
    1442:	91 1d       	adc	r25, r1
    1444:	08 95       	ret

00001446 <_exit>:
    1446:	f8 94       	cli

00001448 <__stop_program>:
    1448:	ff cf       	rjmp	.-2      	; 0x1448 <__stop_program>
    144a:	4d 06       	cpc	r4, r29
    144c:	57 06       	cpc	r5, r23
    144e:	61 06       	cpc	r6, r17
    1450:	6b 06       	cpc	r6, r27
    1452:	75 06       	cpc	r7, r21
    1454:	7f 06       	cpc	r7, r31
    1456:	89 06       	cpc	r8, r25
    1458:	93 06       	cpc	r9, r19
    145a:	bf 06       	cpc	r11, r31
    145c:	c9 06       	cpc	r12, r25
    145e:	d3 06       	cpc	r13, r19
    1460:	dd 06       	cpc	r13, r29
    1462:	e7 06       	cpc	r14, r23
    1464:	f1 06       	cpc	r15, r17
    1466:	fb 06       	cpc	r15, r27
    1468:	05 07       	cpc	r16, r21
