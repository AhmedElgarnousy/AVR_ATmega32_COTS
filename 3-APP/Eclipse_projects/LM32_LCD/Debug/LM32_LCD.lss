
LM32_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eb8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000eb8  00000f2c  2**0
                  ALLOC, LOAD, DATA
  2 .stab         00001d4c  00000000  00000000  00000f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010a1  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00003d19  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000060  00000000  00000000  00003d68  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000558  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004df  00000000  00000000  00004320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001be  00000000  00000000  000047ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  000049bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <main>
  64:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:
#include"ADC_config.h"
#include"ADC_register.h"
#include"ADC_private.h"

void ADC_voidInit(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_REFERENCE_VOLTAGE==AVCC

	SET_BIT(ADMUX,ADMUX_REFS0);
  74:	87 e2       	ldi	r24, 0x27	; 39
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	20 81       	ld	r18, Z
  7c:	87 e2       	ldi	r24, 0x27	; 39
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	20 64       	ori	r18, 0x40	; 64
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	CLR_BIT(ADMUX,ADMUX_REFS1);
  86:	87 e2       	ldi	r24, 0x27	; 39
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	20 81       	ld	r18, Z
  8e:	87 e2       	ldi	r24, 0x27	; 39
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	2f 77       	andi	r18, 0x7F	; 127
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
#endif

	/*set the adjust result left adjust 8bit resolution right adjust 10bit resolution*/
#if ADC_ADJUST_RESULT==LEFT_ADJUST_RESULT

	SET_BIT(ADMUX,ADMUX_ADLAR);
  98:	87 e2       	ldi	r24, 0x27	; 39
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	fc 01       	movw	r30, r24
  9e:	20 81       	ld	r18, Z
  a0:	87 e2       	ldi	r24, 0x27	; 39
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	20 62       	ori	r18, 0x20	; 32
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
#else
#error "Wrong Adjust Result "
#endif

	/*Set prescaler(Bit Masking) */
	ADCSRA &=ADC_PRESCALER_MASK;
  aa:	86 e2       	ldi	r24, 0x26	; 38
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	20 81       	ld	r18, Z
  b2:	86 e2       	ldi	r24, 0x26	; 38
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	28 7f       	andi	r18, 0xF8	; 248
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	ADCSRA |=ADC_PRESCALER_SELECT;
  bc:	86 e2       	ldi	r24, 0x26	; 38
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	20 81       	ld	r18, Z
  c4:	86 e2       	ldi	r24, 0x26	; 38
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	26 60       	ori	r18, 0x06	; 6
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18

	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  ce:	86 e2       	ldi	r24, 0x26	; 38
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	20 81       	ld	r18, Z
  d6:	86 e2       	ldi	r24, 0x26	; 38
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	20 68       	ori	r18, 0x80	; 128
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <ADC_u8GetChannelReading>:

u16 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <ADC_u8GetChannelReading+0x6>
  ee:	0f 92       	push	r0
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u8ADCReading;
	/*Clear the MUX bits in ADMUX register*/
	ADMUX &=ADC_MULTIPLEXER_MASK;
  f6:	87 e2       	ldi	r24, 0x27	; 39
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	20 81       	ld	r18, Z
  fe:	87 e2       	ldi	r24, 0x27	; 39
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	20 7e       	andi	r18, 0xE0	; 224
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	/*set the required channel into the MUX bits*/
	ADMUX |=Copy_u8Channel;
 108:	87 e2       	ldi	r24, 0x27	; 39
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	30 81       	ld	r19, Z
 110:	87 e2       	ldi	r24, 0x27	; 39
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2b 81       	ldd	r18, Y+3	; 0x03
 116:	23 2b       	or	r18, r19
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18

	/*start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
 11c:	86 e2       	ldi	r24, 0x26	; 38
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	20 81       	ld	r18, Z
 124:	86 e2       	ldi	r24, 0x26	; 38
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	20 64       	ori	r18, 0x40	; 64
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18

/*set conversion mode: single conversion or auto trigger*/
#if ADC_TRIGGER_MODE==DISABLE

	/*Polling (busy waiting) until the conversion complete flag is set*/
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
 12e:	00 00       	nop
 130:	86 e2       	ldi	r24, 0x26	; 38
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	82 95       	swap	r24
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	81 70       	andi	r24, 0x01	; 1
 142:	99 27       	eor	r25, r25
 144:	89 2b       	or	r24, r25
 146:	a1 f3       	breq	.-24     	; 0x130 <ADC_u8GetChannelReading+0x48>

	/*clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
 148:	86 e2       	ldi	r24, 0x26	; 38
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z
 150:	86 e2       	ldi	r24, 0x26	; 38
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	20 61       	ori	r18, 0x10	; 16
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
#error "Wrong Auto Trigger Mode Configuration"
#endif

	/*Return the reading*/
#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
	Local_u8ADCReading=ADCH;
 15a:	85 e2       	ldi	r24, 0x25	; 37
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	80 81       	ld	r24, Z
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	89 83       	std	Y+1, r24	; 0x01
			return Local_u8ADCReading;
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	9a 81       	ldd	r25, Y+2	; 0x02
	return Local_u8ADCReading;

#else
#error "Wrong Resolution Selection"
#endif
}
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <CLCD_voidSendCommand>:
#include"CLCD_config.h"
#include"CLCD_interface.h"
#include"CLCD_private.h"

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	a3 97       	sbiw	r28, 0x23	; 35
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode==Eight_Bit_Mode
		/*set RS pin to LOW for command*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>

		/*set RW pin to HIGH for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>

		/*set command  to Data pins*/
		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
 1a4:	6f 85       	ldd	r22, Y+15	; 0x0f
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_u8SetPortValue>

		/*set E pin to HIGH for Enable*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	a0 e0       	ldi	r26, 0x00	; 0
 1bc:	b0 e4       	ldi	r27, 0x40	; 64
 1be:	89 83       	std	Y+1, r24	; 0x01
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	ab 83       	std	Y+3, r26	; 0x03
 1c4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1c6:	20 e0       	ldi	r18, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	4a ef       	ldi	r20, 0xFA	; 250
 1cc:	54 e4       	ldi	r21, 0x44	; 68
 1ce:	69 81       	ldd	r22, Y+1	; 0x01
 1d0:	7a 81       	ldd	r23, Y+2	; 0x02
 1d2:	8b 81       	ldd	r24, Y+3	; 0x03
 1d4:	9c 81       	ldd	r25, Y+4	; 0x04
 1d6:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 1da:	6c 8b       	std	Y+20, r22	; 0x14
 1dc:	7d 8b       	std	Y+21, r23	; 0x15
 1de:	8e 8b       	std	Y+22, r24	; 0x16
 1e0:	9f 8b       	std	Y+23, r25	; 0x17
 1e2:	8c 89       	ldd	r24, Y+20	; 0x14
 1e4:	9d 89       	ldd	r25, Y+21	; 0x15
 1e6:	ae 89       	ldd	r26, Y+22	; 0x16
 1e8:	bf 89       	ldd	r27, Y+23	; 0x17
 1ea:	8d 83       	std	Y+5, r24	; 0x05
 1ec:	9e 83       	std	Y+6, r25	; 0x06
 1ee:	af 83       	std	Y+7, r26	; 0x07
 1f0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 1f2:	20 e0       	ldi	r18, 0x00	; 0
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	40 e8       	ldi	r20, 0x80	; 128
 1f8:	5f e3       	ldi	r21, 0x3F	; 63
 1fa:	6d 81       	ldd	r22, Y+5	; 0x05
 1fc:	7e 81       	ldd	r23, Y+6	; 0x06
 1fe:	8f 81       	ldd	r24, Y+7	; 0x07
 200:	98 85       	ldd	r25, Y+8	; 0x08
 202:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__cmpsf2>
 206:	88 23       	and	r24, r24
 208:	2c f4       	brge	.+10     	; 0x214 <CLCD_voidSendCommand+0x9a>
		__ticks = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	9a 87       	std	Y+10, r25	; 0x0a
 210:	89 87       	std	Y+9, r24	; 0x09
 212:	54 c0       	rjmp	.+168    	; 0x2bc <CLCD_voidSendCommand+0x142>
	else if (__tmp > 65535)
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	3f ef       	ldi	r19, 0xFF	; 255
 218:	4f e7       	ldi	r20, 0x7F	; 127
 21a:	57 e4       	ldi	r21, 0x47	; 71
 21c:	6d 81       	ldd	r22, Y+5	; 0x05
 21e:	7e 81       	ldd	r23, Y+6	; 0x06
 220:	8f 81       	ldd	r24, Y+7	; 0x07
 222:	98 85       	ldd	r25, Y+8	; 0x08
 224:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
 228:	18 16       	cp	r1, r24
 22a:	d4 f5       	brge	.+116    	; 0x2a0 <CLCD_voidSendCommand+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e2       	ldi	r20, 0x20	; 32
 232:	51 e4       	ldi	r21, 0x41	; 65
 234:	69 81       	ldd	r22, Y+1	; 0x01
 236:	7a 81       	ldd	r23, Y+2	; 0x02
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	9c 81       	ldd	r25, Y+4	; 0x04
 23c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 240:	68 8f       	std	Y+24, r22	; 0x18
 242:	79 8f       	std	Y+25, r23	; 0x19
 244:	8a 8f       	std	Y+26, r24	; 0x1a
 246:	9b 8f       	std	Y+27, r25	; 0x1b
 248:	88 8d       	ldd	r24, Y+24	; 0x18
 24a:	99 8d       	ldd	r25, Y+25	; 0x19
 24c:	aa 8d       	ldd	r26, Y+26	; 0x1a
 24e:	bb 8d       	ldd	r27, Y+27	; 0x1b
 250:	88 8b       	std	Y+16, r24	; 0x10
 252:	99 8b       	std	Y+17, r25	; 0x11
 254:	aa 8b       	std	Y+18, r26	; 0x12
 256:	bb 8b       	std	Y+19, r27	; 0x13
 258:	68 89       	ldd	r22, Y+16	; 0x10
 25a:	79 89       	ldd	r23, Y+17	; 0x11
 25c:	8a 89       	ldd	r24, Y+18	; 0x12
 25e:	9b 89       	ldd	r25, Y+19	; 0x13
 260:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixunssfsi>
 264:	6c 8f       	std	Y+28, r22	; 0x1c
 266:	7d 8f       	std	Y+29, r23	; 0x1d
 268:	8e 8f       	std	Y+30, r24	; 0x1e
 26a:	9f 8f       	std	Y+31, r25	; 0x1f
 26c:	ac 8d       	ldd	r26, Y+28	; 0x1c
 26e:	bd 8d       	ldd	r27, Y+29	; 0x1d
 270:	ba 87       	std	Y+10, r27	; 0x0a
 272:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 274:	10 c0       	rjmp	.+32     	; 0x296 <CLCD_voidSendCommand+0x11c>
 276:	88 ec       	ldi	r24, 0xC8	; 200
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9c 87       	std	Y+12, r25	; 0x0c
 27c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27e:	8b 85       	ldd	r24, Y+11	; 0x0b
 280:	9c 85       	ldd	r25, Y+12	; 0x0c
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <CLCD_voidSendCommand+0x108>
 286:	9c 87       	std	Y+12, r25	; 0x0c
 288:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 28a:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	89 85       	ldd	r24, Y+9	; 0x09
 28e:	9a 85       	ldd	r25, Y+10	; 0x0a
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	9a 87       	std	Y+10, r25	; 0x0a
 294:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 296:	89 85       	ldd	r24, Y+9	; 0x09
 298:	9a 85       	ldd	r25, Y+10	; 0x0a
 29a:	89 2b       	or	r24, r25
 29c:	61 f7       	brne	.-40     	; 0x276 <CLCD_voidSendCommand+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 29e:	19 c0       	rjmp	.+50     	; 0x2d2 <CLCD_voidSendCommand+0x158>
	}
	else
		__ticks = (uint16_t)__tmp;
 2a0:	6d 81       	ldd	r22, Y+5	; 0x05
 2a2:	7e 81       	ldd	r23, Y+6	; 0x06
 2a4:	8f 81       	ldd	r24, Y+7	; 0x07
 2a6:	98 85       	ldd	r25, Y+8	; 0x08
 2a8:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixunssfsi>
 2ac:	68 a3       	std	Y+32, r22	; 0x20
 2ae:	79 a3       	std	Y+33, r23	; 0x21
 2b0:	8a a3       	std	Y+34, r24	; 0x22
 2b2:	9b a3       	std	Y+35, r25	; 0x23
 2b4:	88 a1       	ldd	r24, Y+32	; 0x20
 2b6:	99 a1       	ldd	r25, Y+33	; 0x21
 2b8:	9a 87       	std	Y+10, r25	; 0x0a
 2ba:	89 87       	std	Y+9, r24	; 0x09
 2bc:	89 85       	ldd	r24, Y+9	; 0x09
 2be:	9a 85       	ldd	r25, Y+10	; 0x0a
 2c0:	9e 87       	std	Y+14, r25	; 0x0e
 2c2:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <CLCD_voidSendCommand+0x14e>
 2cc:	9e 87       	std	Y+14, r25	; 0x0e
 2ce:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 2d0:	00 00       	nop
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>
				//send last bits of command



#endif
}
 2dc:	00 00       	nop
 2de:	a3 96       	adiw	r28, 0x23	; 35
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	a3 97       	sbiw	r28, 0x23	; 35
 2fa:	0f b6       	in	r0, 0x3f	; 63
 2fc:	f8 94       	cli
 2fe:	de bf       	out	0x3e, r29	; 62
 300:	0f be       	out	0x3f, r0	; 63
 302:	cd bf       	out	0x3d, r28	; 61
 304:	8f 87       	std	Y+15, r24	; 0x0f

#if CLCD_Mode==Eight_Bit_Mode

	/*set RS pin to LOW for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>

	/*set RW pin to HIGH for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>

	/*set COMMAND  to Data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
 31a:	6f 85       	ldd	r22, Y+15	; 0x0f
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_u8SetPortValue>

	/*set E pin to HIGH for Enable*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	62 e0       	ldi	r22, 0x02	; 2
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	a0 e0       	ldi	r26, 0x00	; 0
 332:	b0 e4       	ldi	r27, 0x40	; 64
 334:	89 83       	std	Y+1, r24	; 0x01
 336:	9a 83       	std	Y+2, r25	; 0x02
 338:	ab 83       	std	Y+3, r26	; 0x03
 33a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 33c:	20 e0       	ldi	r18, 0x00	; 0
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	4a ef       	ldi	r20, 0xFA	; 250
 342:	54 e4       	ldi	r21, 0x44	; 68
 344:	69 81       	ldd	r22, Y+1	; 0x01
 346:	7a 81       	ldd	r23, Y+2	; 0x02
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	9c 81       	ldd	r25, Y+4	; 0x04
 34c:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 350:	6c 8b       	std	Y+20, r22	; 0x14
 352:	7d 8b       	std	Y+21, r23	; 0x15
 354:	8e 8b       	std	Y+22, r24	; 0x16
 356:	9f 8b       	std	Y+23, r25	; 0x17
 358:	8c 89       	ldd	r24, Y+20	; 0x14
 35a:	9d 89       	ldd	r25, Y+21	; 0x15
 35c:	ae 89       	ldd	r26, Y+22	; 0x16
 35e:	bf 89       	ldd	r27, Y+23	; 0x17
 360:	8d 83       	std	Y+5, r24	; 0x05
 362:	9e 83       	std	Y+6, r25	; 0x06
 364:	af 83       	std	Y+7, r26	; 0x07
 366:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	40 e8       	ldi	r20, 0x80	; 128
 36e:	5f e3       	ldi	r21, 0x3F	; 63
 370:	6d 81       	ldd	r22, Y+5	; 0x05
 372:	7e 81       	ldd	r23, Y+6	; 0x06
 374:	8f 81       	ldd	r24, Y+7	; 0x07
 376:	98 85       	ldd	r25, Y+8	; 0x08
 378:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__cmpsf2>
 37c:	88 23       	and	r24, r24
 37e:	2c f4       	brge	.+10     	; 0x38a <CLCD_voidSendData+0x9a>
		__ticks = 1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	9a 87       	std	Y+10, r25	; 0x0a
 386:	89 87       	std	Y+9, r24	; 0x09
 388:	54 c0       	rjmp	.+168    	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
	else if (__tmp > 65535)
 38a:	20 e0       	ldi	r18, 0x00	; 0
 38c:	3f ef       	ldi	r19, 0xFF	; 255
 38e:	4f e7       	ldi	r20, 0x7F	; 127
 390:	57 e4       	ldi	r21, 0x47	; 71
 392:	6d 81       	ldd	r22, Y+5	; 0x05
 394:	7e 81       	ldd	r23, Y+6	; 0x06
 396:	8f 81       	ldd	r24, Y+7	; 0x07
 398:	98 85       	ldd	r25, Y+8	; 0x08
 39a:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
 39e:	18 16       	cp	r1, r24
 3a0:	d4 f5       	brge	.+116    	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	40 e2       	ldi	r20, 0x20	; 32
 3a8:	51 e4       	ldi	r21, 0x41	; 65
 3aa:	69 81       	ldd	r22, Y+1	; 0x01
 3ac:	7a 81       	ldd	r23, Y+2	; 0x02
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	9c 81       	ldd	r25, Y+4	; 0x04
 3b2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 3b6:	68 8f       	std	Y+24, r22	; 0x18
 3b8:	79 8f       	std	Y+25, r23	; 0x19
 3ba:	8a 8f       	std	Y+26, r24	; 0x1a
 3bc:	9b 8f       	std	Y+27, r25	; 0x1b
 3be:	88 8d       	ldd	r24, Y+24	; 0x18
 3c0:	99 8d       	ldd	r25, Y+25	; 0x19
 3c2:	aa 8d       	ldd	r26, Y+26	; 0x1a
 3c4:	bb 8d       	ldd	r27, Y+27	; 0x1b
 3c6:	88 8b       	std	Y+16, r24	; 0x10
 3c8:	99 8b       	std	Y+17, r25	; 0x11
 3ca:	aa 8b       	std	Y+18, r26	; 0x12
 3cc:	bb 8b       	std	Y+19, r27	; 0x13
 3ce:	68 89       	ldd	r22, Y+16	; 0x10
 3d0:	79 89       	ldd	r23, Y+17	; 0x11
 3d2:	8a 89       	ldd	r24, Y+18	; 0x12
 3d4:	9b 89       	ldd	r25, Y+19	; 0x13
 3d6:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixunssfsi>
 3da:	6c 8f       	std	Y+28, r22	; 0x1c
 3dc:	7d 8f       	std	Y+29, r23	; 0x1d
 3de:	8e 8f       	std	Y+30, r24	; 0x1e
 3e0:	9f 8f       	std	Y+31, r25	; 0x1f
 3e2:	ac 8d       	ldd	r26, Y+28	; 0x1c
 3e4:	bd 8d       	ldd	r27, Y+29	; 0x1d
 3e6:	ba 87       	std	Y+10, r27	; 0x0a
 3e8:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 3ea:	10 c0       	rjmp	.+32     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 3ec:	88 ec       	ldi	r24, 0xC8	; 200
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	9c 87       	std	Y+12, r25	; 0x0c
 3f2:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 3f6:	9c 85       	ldd	r25, Y+12	; 0x0c
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <CLCD_voidSendData+0x108>
 3fc:	9c 87       	std	Y+12, r25	; 0x0c
 3fe:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 400:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 402:	89 85       	ldd	r24, Y+9	; 0x09
 404:	9a 85       	ldd	r25, Y+10	; 0x0a
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	9a 87       	std	Y+10, r25	; 0x0a
 40a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 40c:	89 85       	ldd	r24, Y+9	; 0x09
 40e:	9a 85       	ldd	r25, Y+10	; 0x0a
 410:	89 2b       	or	r24, r25
 412:	61 f7       	brne	.-40     	; 0x3ec <CLCD_voidSendData+0xfc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 414:	19 c0       	rjmp	.+50     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
	}
	else
		__ticks = (uint16_t)__tmp;
 416:	6d 81       	ldd	r22, Y+5	; 0x05
 418:	7e 81       	ldd	r23, Y+6	; 0x06
 41a:	8f 81       	ldd	r24, Y+7	; 0x07
 41c:	98 85       	ldd	r25, Y+8	; 0x08
 41e:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixunssfsi>
 422:	68 a3       	std	Y+32, r22	; 0x20
 424:	79 a3       	std	Y+33, r23	; 0x21
 426:	8a a3       	std	Y+34, r24	; 0x22
 428:	9b a3       	std	Y+35, r25	; 0x23
 42a:	88 a1       	ldd	r24, Y+32	; 0x20
 42c:	99 a1       	ldd	r25, Y+33	; 0x21
 42e:	9a 87       	std	Y+10, r25	; 0x0a
 430:	89 87       	std	Y+9, r24	; 0x09
 432:	89 85       	ldd	r24, Y+9	; 0x09
 434:	9a 85       	ldd	r25, Y+10	; 0x0a
 436:	9e 87       	std	Y+14, r25	; 0x0e
 438:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 43a:	8d 85       	ldd	r24, Y+13	; 0x0d
 43c:	9e 85       	ldd	r25, Y+14	; 0x0e
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 442:	9e 87       	std	Y+14, r25	; 0x0e
 444:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 446:	00 00       	nop
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	62 e0       	ldi	r22, 0x02	; 2
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <DIO_u8SetPinValue>

#elif CLCD_Mode==Four_Bit_Mode

#endif

}
 452:	00 00       	nop
 454:	a3 96       	adiw	r28, 0x23	; 35
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
 46e:	a2 97       	sbiw	r28, 0x22	; 34
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	a0 e2       	ldi	r26, 0x20	; 32
 480:	b2 e4       	ldi	r27, 0x42	; 66
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	9a 83       	std	Y+2, r25	; 0x02
 486:	ab 83       	std	Y+3, r26	; 0x03
 488:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	4a ef       	ldi	r20, 0xFA	; 250
 490:	54 e4       	ldi	r21, 0x44	; 68
 492:	69 81       	ldd	r22, Y+1	; 0x01
 494:	7a 81       	ldd	r23, Y+2	; 0x02
 496:	8b 81       	ldd	r24, Y+3	; 0x03
 498:	9c 81       	ldd	r25, Y+4	; 0x04
 49a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 49e:	6b 8b       	std	Y+19, r22	; 0x13
 4a0:	7c 8b       	std	Y+20, r23	; 0x14
 4a2:	8d 8b       	std	Y+21, r24	; 0x15
 4a4:	9e 8b       	std	Y+22, r25	; 0x16
 4a6:	8b 89       	ldd	r24, Y+19	; 0x13
 4a8:	9c 89       	ldd	r25, Y+20	; 0x14
 4aa:	ad 89       	ldd	r26, Y+21	; 0x15
 4ac:	be 89       	ldd	r27, Y+22	; 0x16
 4ae:	8d 83       	std	Y+5, r24	; 0x05
 4b0:	9e 83       	std	Y+6, r25	; 0x06
 4b2:	af 83       	std	Y+7, r26	; 0x07
 4b4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e8       	ldi	r20, 0x80	; 128
 4bc:	5f e3       	ldi	r21, 0x3F	; 63
 4be:	6d 81       	ldd	r22, Y+5	; 0x05
 4c0:	7e 81       	ldd	r23, Y+6	; 0x06
 4c2:	8f 81       	ldd	r24, Y+7	; 0x07
 4c4:	98 85       	ldd	r25, Y+8	; 0x08
 4c6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__cmpsf2>
 4ca:	88 23       	and	r24, r24
 4cc:	2c f4       	brge	.+10     	; 0x4d8 <CLCD_voidInit+0x72>
		__ticks = 1;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	9a 87       	std	Y+10, r25	; 0x0a
 4d4:	89 87       	std	Y+9, r24	; 0x09
 4d6:	54 c0       	rjmp	.+168    	; 0x580 <CLCD_voidInit+0x11a>
	else if (__tmp > 65535)
 4d8:	20 e0       	ldi	r18, 0x00	; 0
 4da:	3f ef       	ldi	r19, 0xFF	; 255
 4dc:	4f e7       	ldi	r20, 0x7F	; 127
 4de:	57 e4       	ldi	r21, 0x47	; 71
 4e0:	6d 81       	ldd	r22, Y+5	; 0x05
 4e2:	7e 81       	ldd	r23, Y+6	; 0x06
 4e4:	8f 81       	ldd	r24, Y+7	; 0x07
 4e6:	98 85       	ldd	r25, Y+8	; 0x08
 4e8:	0e 94 c0 06 	call	0xd80	; 0xd80 <__gesf2>
 4ec:	18 16       	cp	r1, r24
 4ee:	d4 f5       	brge	.+116    	; 0x564 <CLCD_voidInit+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e2       	ldi	r20, 0x20	; 32
 4f6:	51 e4       	ldi	r21, 0x41	; 65
 4f8:	69 81       	ldd	r22, Y+1	; 0x01
 4fa:	7a 81       	ldd	r23, Y+2	; 0x02
 4fc:	8b 81       	ldd	r24, Y+3	; 0x03
 4fe:	9c 81       	ldd	r25, Y+4	; 0x04
 500:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__mulsf3>
 504:	6f 8b       	std	Y+23, r22	; 0x17
 506:	78 8f       	std	Y+24, r23	; 0x18
 508:	89 8f       	std	Y+25, r24	; 0x19
 50a:	9a 8f       	std	Y+26, r25	; 0x1a
 50c:	8f 89       	ldd	r24, Y+23	; 0x17
 50e:	98 8d       	ldd	r25, Y+24	; 0x18
 510:	a9 8d       	ldd	r26, Y+25	; 0x19
 512:	ba 8d       	ldd	r27, Y+26	; 0x1a
 514:	8f 87       	std	Y+15, r24	; 0x0f
 516:	98 8b       	std	Y+16, r25	; 0x10
 518:	a9 8b       	std	Y+17, r26	; 0x11
 51a:	ba 8b       	std	Y+18, r27	; 0x12
 51c:	6f 85       	ldd	r22, Y+15	; 0x0f
 51e:	78 89       	ldd	r23, Y+16	; 0x10
 520:	89 89       	ldd	r24, Y+17	; 0x11
 522:	9a 89       	ldd	r25, Y+18	; 0x12
 524:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixunssfsi>
 528:	6b 8f       	std	Y+27, r22	; 0x1b
 52a:	7c 8f       	std	Y+28, r23	; 0x1c
 52c:	8d 8f       	std	Y+29, r24	; 0x1d
 52e:	9e 8f       	std	Y+30, r25	; 0x1e
 530:	ab 8d       	ldd	r26, Y+27	; 0x1b
 532:	bc 8d       	ldd	r27, Y+28	; 0x1c
 534:	ba 87       	std	Y+10, r27	; 0x0a
 536:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
 538:	10 c0       	rjmp	.+32     	; 0x55a <CLCD_voidInit+0xf4>
 53a:	88 ec       	ldi	r24, 0xC8	; 200
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	9c 87       	std	Y+12, r25	; 0x0c
 540:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 542:	8b 85       	ldd	r24, Y+11	; 0x0b
 544:	9c 85       	ldd	r25, Y+12	; 0x0c
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <CLCD_voidInit+0xe0>
 54a:	9c 87       	std	Y+12, r25	; 0x0c
 54c:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 54e:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 550:	89 85       	ldd	r24, Y+9	; 0x09
 552:	9a 85       	ldd	r25, Y+10	; 0x0a
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	9a 87       	std	Y+10, r25	; 0x0a
 558:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 55a:	89 85       	ldd	r24, Y+9	; 0x09
 55c:	9a 85       	ldd	r25, Y+10	; 0x0a
 55e:	89 2b       	or	r24, r25
 560:	61 f7       	brne	.-40     	; 0x53a <CLCD_voidInit+0xd4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 562:	19 c0       	rjmp	.+50     	; 0x596 <CLCD_voidInit+0x130>
	}
	else
		__ticks = (uint16_t)__tmp;
 564:	6d 81       	ldd	r22, Y+5	; 0x05
 566:	7e 81       	ldd	r23, Y+6	; 0x06
 568:	8f 81       	ldd	r24, Y+7	; 0x07
 56a:	98 85       	ldd	r25, Y+8	; 0x08
 56c:	0e 94 44 06 	call	0xc88	; 0xc88 <__fixunssfsi>
 570:	6f 8f       	std	Y+31, r22	; 0x1f
 572:	78 a3       	std	Y+32, r23	; 0x20
 574:	89 a3       	std	Y+33, r24	; 0x21
 576:	9a a3       	std	Y+34, r25	; 0x22
 578:	8f 8d       	ldd	r24, Y+31	; 0x1f
 57a:	98 a1       	ldd	r25, Y+32	; 0x20
 57c:	9a 87       	std	Y+10, r25	; 0x0a
 57e:	89 87       	std	Y+9, r24	; 0x09
 580:	89 85       	ldd	r24, Y+9	; 0x09
 582:	9a 85       	ldd	r25, Y+10	; 0x0a
 584:	9e 87       	std	Y+14, r25	; 0x0e
 586:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 588:	8d 85       	ldd	r24, Y+13	; 0x0d
 58a:	9e 85       	ldd	r25, Y+14	; 0x0e
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <CLCD_voidInit+0x126>
 590:	9e 87       	std	Y+14, r25	; 0x0e
 592:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 594:	00 00       	nop

	/*wait for more than 30ms*/
	_delay_ms(40);

	/*function set command: 2 lines"1", 5*8 Font Size"0"*/
	CLCD_voidSendCommand(0b00111000);
 596:	88 e3       	ldi	r24, 0x38	; 56
 598:	0e 94 bd 00 	call	0x17a	; 0x17a <CLCD_voidSendCommand>

	/*Display ON/OFF control: display enable, disable cursor, no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
 59c:	8c e0       	ldi	r24, 0x0C	; 12
 59e:	0e 94 bd 00 	call	0x17a	; 0x17a <CLCD_voidSendCommand>

 	/*Display clear*/
	CLCD_voidSendCommand(0b00000001);
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	0e 94 bd 00 	call	0x17a	; 0x17a <CLCD_voidSendCommand>

	/*entry mode set
	*/
#endif
}
 5a8:	00 00       	nop
 5aa:	a2 96       	adiw	r28, 0x22	; 34
 5ac:	0f b6       	in	r0, 0x3f	; 63
 5ae:	f8 94       	cli
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	cd bf       	out	0x3d, r28	; 61
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <CLCD_voidSendString>:

void CLCD_voidSendString(const char*Copy_pcString )
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <CLCD_voidSendString+0x6>
 5c2:	0f 92       	push	r0
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	9b 83       	std	Y+3, r25	; 0x03
 5ca:	8a 83       	std	Y+2, r24	; 0x02
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
 5cc:	19 82       	std	Y+1, r1	; 0x01
	while(Copy_pcString[Local_u8Counter]!='\0')
 5ce:	0e c0       	rjmp	.+28     	; 0x5ec <CLCD_voidSendString+0x30>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	2a 81       	ldd	r18, Y+2	; 0x02
 5d8:	3b 81       	ldd	r19, Y+3	; 0x03
 5da:	82 0f       	add	r24, r18
 5dc:	93 1f       	adc	r25, r19
 5de:	fc 01       	movw	r30, r24
 5e0:	80 81       	ld	r24, Z
 5e2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CLCD_voidSendData>
	Local_u8Counter++;
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	8f 5f       	subi	r24, 0xFF	; 255
 5ea:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const char*Copy_pcString )
{
	//any variable carry ASCII value should be char not unsigned or signed
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	88 2f       	mov	r24, r24
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	2a 81       	ldd	r18, Y+2	; 0x02
 5f4:	3b 81       	ldd	r19, Y+3	; 0x03
 5f6:	82 0f       	add	r24, r18
 5f8:	93 1f       	adc	r25, r19
 5fa:	fc 01       	movw	r30, r24
 5fc:	80 81       	ld	r24, Z
 5fe:	88 23       	and	r24, r24
 600:	39 f7       	brne	.-50     	; 0x5d0 <CLCD_voidSendString+0x14>
	{
	CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
	Local_u8Counter++;
	}

}
 602:	00 00       	nop
 604:	00 00       	nop
 606:	0f 90       	pop	r0
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	00 d0       	rcall	.+0      	; 0x618 <CLCD_voidGoToXY+0x6>
 618:	00 d0       	rcall	.+0      	; 0x61a <CLCD_voidGoToXY+0x8>
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	8b 83       	std	Y+3, r24	; 0x03
 620:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState=0;
 622:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
 624:	8b 81       	ldd	r24, Y+3	; 0x03
 626:	88 23       	and	r24, r24
 628:	19 f4       	brne	.+6      	; 0x630 <CLCD_voidGoToXY+0x1e>
	{
		/*Location is at first line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos;
 62a:	8c 81       	ldd	r24, Y+4	; 0x04
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	06 c0       	rjmp	.+12     	; 0x63c <CLCD_voidGoToXY+0x2a>
	}
	else if(Copy_u8XPos==1)
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	81 30       	cpi	r24, 0x01	; 1
 634:	19 f4       	brne	.+6      	; 0x63c <CLCD_voidGoToXY+0x2a>
	{
		/*Location is at Second line in CLCD 16*2*/
		Local_u8Address=Copy_u8YPos+0x40;
 636:	8c 81       	ldd	r24, Y+4	; 0x04
 638:	80 5c       	subi	r24, 0xC0	; 192
 63a:	89 83       	std	Y+1, r24	; 0x01
	}
	/*set bit number 7 for set DDRAM Address command then send the command*/
	CLCD_voidSendCommand(Local_u8Address+128);
 63c:	89 81       	ldd	r24, Y+1	; 0x01
 63e:	80 58       	subi	r24, 0x80	; 128
 640:	0e 94 bd 00 	call	0x17a	; 0x17a <CLCD_voidSendCommand>
}
 644:	00 00       	nop
 646:	0f 90       	pop	r0
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8*Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
 654:	cf 93       	push	r28
 656:	df 93       	push	r29
 658:	00 d0       	rcall	.+0      	; 0x65a <CLCD_voidWriteSpecialCharacter+0x6>
 65a:	00 d0       	rcall	.+0      	; 0x65c <CLCD_voidWriteSpecialCharacter+0x8>
 65c:	00 d0       	rcall	.+0      	; 0x65e <CLCD_voidWriteSpecialCharacter+0xa>
 65e:	0f 92       	push	r0
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	9c 83       	std	Y+4, r25	; 0x04
 666:	8b 83       	std	Y+3, r24	; 0x03
 668:	6d 83       	std	Y+5, r22	; 0x05
 66a:	4e 83       	std	Y+6, r20	; 0x06
 66c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
 66e:	1a 82       	std	Y+2, r1	; 0x02
	/*calculate the CGRAM Address whose each block is 8 bytes */
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
 670:	8d 81       	ldd	r24, Y+5	; 0x05
 672:	88 0f       	add	r24, r24
 674:	88 0f       	add	r24, r24
 676:	88 0f       	add	r24, r24
 678:	8a 83       	std	Y+2, r24	; 0x02
	/*send SGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
 67a:	8a 81       	ldd	r24, Y+2	; 0x02
 67c:	80 5c       	subi	r24, 0xC0	; 192
 67e:	0e 94 bd 00 	call	0x17a	; 0x17a <CLCD_voidSendCommand>

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
 682:	19 82       	std	Y+1, r1	; 0x01
 684:	0e c0       	rjmp	.+28     	; 0x6a2 <CLCD_voidWriteSpecialCharacter+0x4e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	88 2f       	mov	r24, r24
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	2b 81       	ldd	r18, Y+3	; 0x03
 68e:	3c 81       	ldd	r19, Y+4	; 0x04
 690:	82 0f       	add	r24, r18
 692:	93 1f       	adc	r25, r19
 694:	fc 01       	movw	r30, r24
 696:	80 81       	ld	r24, Z
 698:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CLCD_voidSendData>
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*send SGRAM Address command to LCD, with setting bit 6,clearing bit 7*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/*write pattern into CGRAM*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	89 83       	std	Y+1, r24	; 0x01
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	88 30       	cpi	r24, 0x08	; 8
 6a6:	78 f3       	brcs	.-34     	; 0x686 <CLCD_voidWriteSpecialCharacter+0x32>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go back to the DDRAM to display the pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
 6a8:	6f 81       	ldd	r22, Y+7	; 0x07
 6aa:	8e 81       	ldd	r24, Y+6	; 0x06
 6ac:	0e 94 09 03 	call	0x612	; 0x612 <CLCD_voidGoToXY>

	/*Display the pattern written in the CG RAM
	 * DDRAM treat with the CGRAM with location(block) number from 0 to 7*/
	CLCD_voidSendCommand(Copy_u8PatternNumber);
 6b0:	8d 81       	ldd	r24, Y+5	; 0x05
 6b2:	0e 94 bd 00 	call	0x17a	; 0x17a <CLCD_voidSendCommand>

	/**********/
	/*set E pin to HIGH for Enable*/
}
 6b6:	00 00       	nop
 6b8:	27 96       	adiw	r28, 0x07	; 7
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	df 91       	pop	r29
 6c6:	cf 91       	pop	r28
 6c8:	08 95       	ret

000006ca <CLCD_voidWriteNumber>:


void CLCD_voidWriteNumber(u32 Copy_u32Number)
{
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	00 d0       	rcall	.+0      	; 0x6d0 <CLCD_voidWriteNumber+0x6>
 6d0:	00 d0       	rcall	.+0      	; 0x6d2 <CLCD_voidWriteNumber+0x8>
 6d2:	0f 92       	push	r0
 6d4:	cd b7       	in	r28, 0x3d	; 61
 6d6:	de b7       	in	r29, 0x3e	; 62
 6d8:	6a 83       	std	Y+2, r22	; 0x02
 6da:	7b 83       	std	Y+3, r23	; 0x03
 6dc:	8c 83       	std	Y+4, r24	; 0x04
 6de:	9d 83       	std	Y+5, r25	; 0x05
	u8 i=3;
 6e0:	83 e0       	ldi	r24, 0x03	; 3
 6e2:	89 83       	std	Y+1, r24	; 0x01
	//for(i=3;i>=0;i--)//DIG1
	//{
		if(GET_BIT(Copy_u32Number,i) && GET_BIT(Copy_u32Number,i-1) || GET_BIT(Copy_u32Number,i)&&GET_BIT(Copy_u32Number,i-2))
 6e4:	89 81       	ldd	r24, Y+1	; 0x01
 6e6:	28 2f       	mov	r18, r24
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	9b 81       	ldd	r25, Y+3	; 0x03
 6ee:	ac 81       	ldd	r26, Y+4	; 0x04
 6f0:	bd 81       	ldd	r27, Y+5	; 0x05
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <CLCD_voidWriteNumber+0x32>
 6f4:	b6 95       	lsr	r27
 6f6:	a7 95       	ror	r26
 6f8:	97 95       	ror	r25
 6fa:	87 95       	ror	r24
 6fc:	2a 95       	dec	r18
 6fe:	d2 f7       	brpl	.-12     	; 0x6f4 <CLCD_voidWriteNumber+0x2a>
 700:	81 70       	andi	r24, 0x01	; 1
 702:	99 27       	eor	r25, r25
 704:	aa 27       	eor	r26, r26
 706:	bb 27       	eor	r27, r27
 708:	89 2b       	or	r24, r25
 70a:	8a 2b       	or	r24, r26
 70c:	8b 2b       	or	r24, r27
 70e:	c9 f0       	breq	.+50     	; 0x742 <CLCD_voidWriteNumber+0x78>
 710:	89 81       	ldd	r24, Y+1	; 0x01
 712:	88 2f       	mov	r24, r24
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	9c 01       	movw	r18, r24
 718:	21 50       	subi	r18, 0x01	; 1
 71a:	31 09       	sbc	r19, r1
 71c:	8a 81       	ldd	r24, Y+2	; 0x02
 71e:	9b 81       	ldd	r25, Y+3	; 0x03
 720:	ac 81       	ldd	r26, Y+4	; 0x04
 722:	bd 81       	ldd	r27, Y+5	; 0x05
 724:	04 c0       	rjmp	.+8      	; 0x72e <CLCD_voidWriteNumber+0x64>
 726:	b6 95       	lsr	r27
 728:	a7 95       	ror	r26
 72a:	97 95       	ror	r25
 72c:	87 95       	ror	r24
 72e:	2a 95       	dec	r18
 730:	d2 f7       	brpl	.-12     	; 0x726 <CLCD_voidWriteNumber+0x5c>
 732:	81 70       	andi	r24, 0x01	; 1
 734:	99 27       	eor	r25, r25
 736:	aa 27       	eor	r26, r26
 738:	bb 27       	eor	r27, r27
 73a:	89 2b       	or	r24, r25
 73c:	8a 2b       	or	r24, r26
 73e:	8b 2b       	or	r24, r27
 740:	79 f5       	brne	.+94     	; 0x7a0 <CLCD_voidWriteNumber+0xd6>
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	28 2f       	mov	r18, r24
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	8a 81       	ldd	r24, Y+2	; 0x02
 74a:	9b 81       	ldd	r25, Y+3	; 0x03
 74c:	ac 81       	ldd	r26, Y+4	; 0x04
 74e:	bd 81       	ldd	r27, Y+5	; 0x05
 750:	04 c0       	rjmp	.+8      	; 0x75a <CLCD_voidWriteNumber+0x90>
 752:	b6 95       	lsr	r27
 754:	a7 95       	ror	r26
 756:	97 95       	ror	r25
 758:	87 95       	ror	r24
 75a:	2a 95       	dec	r18
 75c:	d2 f7       	brpl	.-12     	; 0x752 <CLCD_voidWriteNumber+0x88>
 75e:	81 70       	andi	r24, 0x01	; 1
 760:	99 27       	eor	r25, r25
 762:	aa 27       	eor	r26, r26
 764:	bb 27       	eor	r27, r27
 766:	89 2b       	or	r24, r25
 768:	8a 2b       	or	r24, r26
 76a:	8b 2b       	or	r24, r27
 76c:	e9 f0       	breq	.+58     	; 0x7a8 <CLCD_voidWriteNumber+0xde>
 76e:	89 81       	ldd	r24, Y+1	; 0x01
 770:	88 2f       	mov	r24, r24
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	9c 01       	movw	r18, r24
 776:	22 50       	subi	r18, 0x02	; 2
 778:	31 09       	sbc	r19, r1
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	9b 81       	ldd	r25, Y+3	; 0x03
 77e:	ac 81       	ldd	r26, Y+4	; 0x04
 780:	bd 81       	ldd	r27, Y+5	; 0x05
 782:	04 c0       	rjmp	.+8      	; 0x78c <CLCD_voidWriteNumber+0xc2>
 784:	b6 95       	lsr	r27
 786:	a7 95       	ror	r26
 788:	97 95       	ror	r25
 78a:	87 95       	ror	r24
 78c:	2a 95       	dec	r18
 78e:	d2 f7       	brpl	.-12     	; 0x784 <CLCD_voidWriteNumber+0xba>
 790:	81 70       	andi	r24, 0x01	; 1
 792:	99 27       	eor	r25, r25
 794:	aa 27       	eor	r26, r26
 796:	bb 27       	eor	r27, r27
 798:	89 2b       	or	r24, r25
 79a:	8a 2b       	or	r24, r26
 79c:	8b 2b       	or	r24, r27
 79e:	21 f0       	breq	.+8      	; 0x7a8 <CLCD_voidWriteNumber+0xde>
		{
				CLCD_voidSendData('1');
 7a0:	81 e3       	ldi	r24, 0x31	; 49
 7a2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CLCD_voidSendData>
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <CLCD_voidWriteNumber+0xe6>
		}
		else
		{
			CLCD_voidSendData('0');
 7a8:	80 e3       	ldi	r24, 0x30	; 48
 7aa:	0e 94 78 01 	call	0x2f0	; 0x2f0 <CLCD_voidSendData>

		}

	//}
}
 7ae:	00 00       	nop
 7b0:	00 00       	nop
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	df 91       	pop	r29
 7be:	cf 91       	pop	r28
 7c0:	08 95       	ret

000007c2 <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	00 d0       	rcall	.+0      	; 0x7c8 <DIO_u8SetPinValue+0x6>
 7c8:	00 d0       	rcall	.+0      	; 0x7ca <DIO_u8SetPinValue+0x8>
 7ca:	cd b7       	in	r28, 0x3d	; 61
 7cc:	de b7       	in	r29, 0x3e	; 62
 7ce:	8a 83       	std	Y+2, r24	; 0x02
 7d0:	6b 83       	std	Y+3, r22	; 0x03
 7d2:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
 7d4:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	88 30       	cpi	r24, 0x08	; 8
 7da:	08 f0       	brcs	.+2      	; 0x7de <DIO_u8SetPinValue+0x1c>
 7dc:	f1 c0       	rjmp	.+482    	; 0x9c0 <__stack+0x161>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
 7de:	8c 81       	ldd	r24, Y+4	; 0x04
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <DIO_u8SetPinValue+0x24>
 7e4:	71 c0       	rjmp	.+226    	; 0x8c8 <__stack+0x69>
		{
		switch(Copy_u8Port)
 7e6:	8a 81       	ldd	r24, Y+2	; 0x02
 7e8:	88 2f       	mov	r24, r24
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	84 30       	cpi	r24, 0x04	; 4
 7ee:	91 05       	cpc	r25, r1
 7f0:	09 f4       	brne	.+2      	; 0x7f4 <DIO_u8SetPinValue+0x32>
 7f2:	52 c0       	rjmp	.+164    	; 0x898 <__stack+0x39>
 7f4:	85 30       	cpi	r24, 0x05	; 5
 7f6:	91 05       	cpc	r25, r1
 7f8:	0c f0       	brlt	.+2      	; 0x7fc <DIO_u8SetPinValue+0x3a>
 7fa:	64 c0       	rjmp	.+200    	; 0x8c4 <__stack+0x65>
 7fc:	83 30       	cpi	r24, 0x03	; 3
 7fe:	91 05       	cpc	r25, r1
 800:	a9 f1       	breq	.+106    	; 0x86c <__stack+0xd>
 802:	84 30       	cpi	r24, 0x04	; 4
 804:	91 05       	cpc	r25, r1
 806:	0c f0       	brlt	.+2      	; 0x80a <DIO_u8SetPinValue+0x48>
 808:	5d c0       	rjmp	.+186    	; 0x8c4 <__stack+0x65>
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	19 f0       	breq	.+6      	; 0x814 <DIO_u8SetPinValue+0x52>
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	b9 f0       	breq	.+46     	; 0x840 <DIO_u8SetPinValue+0x7e>
 812:	58 c0       	rjmp	.+176    	; 0x8c4 <__stack+0x65>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 814:	8b e3       	ldi	r24, 0x3B	; 59
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	fc 01       	movw	r30, r24
 81a:	80 81       	ld	r24, Z
 81c:	48 2f       	mov	r20, r24
 81e:	8b 81       	ldd	r24, Y+3	; 0x03
 820:	28 2f       	mov	r18, r24
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_u8SetPinValue+0x6c>
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	2a 95       	dec	r18
 830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_u8SetPinValue+0x68>
 832:	24 2f       	mov	r18, r20
 834:	28 2b       	or	r18, r24
 836:	8b e3       	ldi	r24, 0x3B	; 59
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18
 83e:	c2 c0       	rjmp	.+388    	; 0x9c4 <__stack+0x165>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 840:	88 e3       	ldi	r24, 0x38	; 56
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	fc 01       	movw	r30, r24
 846:	80 81       	ld	r24, Z
 848:	48 2f       	mov	r20, r24
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	28 2f       	mov	r18, r24
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_u8SetPinValue+0x98>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	2a 95       	dec	r18
 85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_u8SetPinValue+0x94>
 85e:	24 2f       	mov	r18, r20
 860:	28 2b       	or	r18, r24
 862:	88 e3       	ldi	r24, 0x38	; 56
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	fc 01       	movw	r30, r24
 868:	20 83       	st	Z, r18
 86a:	ac c0       	rjmp	.+344    	; 0x9c4 <__stack+0x165>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 86c:	85 e3       	ldi	r24, 0x35	; 53
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	80 81       	ld	r24, Z
 874:	48 2f       	mov	r20, r24
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	2a 95       	dec	r18
 888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
 88a:	24 2f       	mov	r18, r20
 88c:	28 2b       	or	r18, r24
 88e:	85 e3       	ldi	r24, 0x35	; 53
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	fc 01       	movw	r30, r24
 894:	20 83       	st	Z, r18
 896:	96 c0       	rjmp	.+300    	; 0x9c4 <__stack+0x165>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 898:	82 e3       	ldi	r24, 0x32	; 50
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	fc 01       	movw	r30, r24
 89e:	80 81       	ld	r24, Z
 8a0:	48 2f       	mov	r20, r24
 8a2:	8b 81       	ldd	r24, Y+3	; 0x03
 8a4:	28 2f       	mov	r18, r24
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	2a 95       	dec	r18
 8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
 8b6:	24 2f       	mov	r18, r20
 8b8:	28 2b       	or	r18, r24
 8ba:	82 e3       	ldi	r24, 0x32	; 50
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	fc 01       	movw	r30, r24
 8c0:	20 83       	st	Z, r18
 8c2:	80 c0       	rjmp	.+256    	; 0x9c4 <__stack+0x165>
			default :Local_u8ErrorState=0;;break;
 8c4:	19 82       	std	Y+1, r1	; 0x01
 8c6:	7e c0       	rjmp	.+252    	; 0x9c4 <__stack+0x165>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 8c8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ca:	88 23       	and	r24, r24
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <__stack+0x71>
 8ce:	75 c0       	rjmp	.+234    	; 0x9ba <__stack+0x15b>
		{
			switch(Copy_u8Port)
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
 8d2:	88 2f       	mov	r24, r24
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	84 30       	cpi	r24, 0x04	; 4
 8d8:	91 05       	cpc	r25, r1
 8da:	09 f4       	brne	.+2      	; 0x8de <__stack+0x7f>
 8dc:	55 c0       	rjmp	.+170    	; 0x988 <__stack+0x129>
 8de:	85 30       	cpi	r24, 0x05	; 5
 8e0:	91 05       	cpc	r25, r1
 8e2:	0c f0       	brlt	.+2      	; 0x8e6 <__stack+0x87>
 8e4:	68 c0       	rjmp	.+208    	; 0x9b6 <__stack+0x157>
 8e6:	83 30       	cpi	r24, 0x03	; 3
 8e8:	91 05       	cpc	r25, r1
 8ea:	b9 f1       	breq	.+110    	; 0x95a <__stack+0xfb>
 8ec:	84 30       	cpi	r24, 0x04	; 4
 8ee:	91 05       	cpc	r25, r1
 8f0:	0c f0       	brlt	.+2      	; 0x8f4 <__stack+0x95>
 8f2:	61 c0       	rjmp	.+194    	; 0x9b6 <__stack+0x157>
 8f4:	00 97       	sbiw	r24, 0x00	; 0
 8f6:	19 f0       	breq	.+6      	; 0x8fe <__stack+0x9f>
 8f8:	01 97       	sbiw	r24, 0x01	; 1
 8fa:	c1 f0       	breq	.+48     	; 0x92c <__stack+0xcd>
 8fc:	5c c0       	rjmp	.+184    	; 0x9b6 <__stack+0x157>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 8fe:	8b e3       	ldi	r24, 0x3B	; 59
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	fc 01       	movw	r30, r24
 904:	80 81       	ld	r24, Z
 906:	48 2f       	mov	r20, r24
 908:	8b 81       	ldd	r24, Y+3	; 0x03
 90a:	28 2f       	mov	r18, r24
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0xb9>
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	2a 95       	dec	r18
 91a:	e2 f7       	brpl	.-8      	; 0x914 <__stack+0xb5>
 91c:	80 95       	com	r24
 91e:	24 2f       	mov	r18, r20
 920:	28 23       	and	r18, r24
 922:	8b e3       	ldi	r24, 0x3B	; 59
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	fc 01       	movw	r30, r24
 928:	20 83       	st	Z, r18
 92a:	4c c0       	rjmp	.+152    	; 0x9c4 <__stack+0x165>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 92c:	88 e3       	ldi	r24, 0x38	; 56
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	fc 01       	movw	r30, r24
 932:	80 81       	ld	r24, Z
 934:	48 2f       	mov	r20, r24
 936:	8b 81       	ldd	r24, Y+3	; 0x03
 938:	28 2f       	mov	r18, r24
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <__stack+0xe7>
 942:	88 0f       	add	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	2a 95       	dec	r18
 948:	e2 f7       	brpl	.-8      	; 0x942 <__stack+0xe3>
 94a:	80 95       	com	r24
 94c:	24 2f       	mov	r18, r20
 94e:	28 23       	and	r18, r24
 950:	88 e3       	ldi	r24, 0x38	; 56
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	fc 01       	movw	r30, r24
 956:	20 83       	st	Z, r18
 958:	35 c0       	rjmp	.+106    	; 0x9c4 <__stack+0x165>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 95a:	85 e3       	ldi	r24, 0x35	; 53
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	fc 01       	movw	r30, r24
 960:	80 81       	ld	r24, Z
 962:	48 2f       	mov	r20, r24
 964:	8b 81       	ldd	r24, Y+3	; 0x03
 966:	28 2f       	mov	r18, r24
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x115>
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	2a 95       	dec	r18
 976:	e2 f7       	brpl	.-8      	; 0x970 <__stack+0x111>
 978:	80 95       	com	r24
 97a:	24 2f       	mov	r18, r20
 97c:	28 23       	and	r18, r24
 97e:	85 e3       	ldi	r24, 0x35	; 53
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	fc 01       	movw	r30, r24
 984:	20 83       	st	Z, r18
 986:	1e c0       	rjmp	.+60     	; 0x9c4 <__stack+0x165>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 988:	82 e3       	ldi	r24, 0x32	; 50
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	fc 01       	movw	r30, r24
 98e:	80 81       	ld	r24, Z
 990:	48 2f       	mov	r20, r24
 992:	8b 81       	ldd	r24, Y+3	; 0x03
 994:	28 2f       	mov	r18, r24
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0x143>
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	2a 95       	dec	r18
 9a4:	e2 f7       	brpl	.-8      	; 0x99e <__stack+0x13f>
 9a6:	80 95       	com	r24
 9a8:	24 2f       	mov	r18, r20
 9aa:	28 23       	and	r18, r24
 9ac:	82 e3       	ldi	r24, 0x32	; 50
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	fc 01       	movw	r30, r24
 9b2:	20 83       	st	Z, r18
 9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <__stack+0x165>
			default :Local_u8ErrorState=0;;break;
 9b6:	19 82       	std	Y+1, r1	; 0x01
 9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <__stack+0x165>


		}
		else
		{
		Local_u8ErrorState=1;
 9ba:	81 e0       	ldi	r24, 0x01	; 1
 9bc:	89 83       	std	Y+1, r24	; 0x01
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0x165>
		}


}
else{
	 Local_u8ErrorState=1;
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 9c4:	89 81       	ldd	r24, Y+1	; 0x01

}
 9c6:	0f 90       	pop	r0
 9c8:	0f 90       	pop	r0
 9ca:	0f 90       	pop	r0
 9cc:	0f 90       	pop	r0
 9ce:	df 91       	pop	r29
 9d0:	cf 91       	pop	r28
 9d2:	08 95       	ret

000009d4 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 9d4:	cf 93       	push	r28
 9d6:	df 93       	push	r29
 9d8:	00 d0       	rcall	.+0      	; 0x9da <DIO_u8SetPortValue+0x6>
 9da:	0f 92       	push	r0
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
 9e0:	8a 83       	std	Y+2, r24	; 0x02
 9e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 9e4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 9e6:	8a 81       	ldd	r24, Y+2	; 0x02
 9e8:	88 2f       	mov	r24, r24
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	84 30       	cpi	r24, 0x04	; 4
 9ee:	91 05       	cpc	r25, r1
 9f0:	01 f1       	breq	.+64     	; 0xa32 <DIO_u8SetPortValue+0x5e>
 9f2:	85 30       	cpi	r24, 0x05	; 5
 9f4:	91 05       	cpc	r25, r1
 9f6:	1c f5       	brge	.+70     	; 0xa3e <DIO_u8SetPortValue+0x6a>
 9f8:	83 30       	cpi	r24, 0x03	; 3
 9fa:	91 05       	cpc	r25, r1
 9fc:	a1 f0       	breq	.+40     	; 0xa26 <DIO_u8SetPortValue+0x52>
 9fe:	84 30       	cpi	r24, 0x04	; 4
 a00:	91 05       	cpc	r25, r1
 a02:	ec f4       	brge	.+58     	; 0xa3e <DIO_u8SetPortValue+0x6a>
 a04:	00 97       	sbiw	r24, 0x00	; 0
 a06:	19 f0       	breq	.+6      	; 0xa0e <DIO_u8SetPortValue+0x3a>
 a08:	01 97       	sbiw	r24, 0x01	; 1
 a0a:	39 f0       	breq	.+14     	; 0xa1a <DIO_u8SetPortValue+0x46>
 a0c:	18 c0       	rjmp	.+48     	; 0xa3e <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 a0e:	8b e3       	ldi	r24, 0x3B	; 59
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	2b 81       	ldd	r18, Y+3	; 0x03
 a14:	fc 01       	movw	r30, r24
 a16:	20 83       	st	Z, r18
 a18:	15 c0       	rjmp	.+42     	; 0xa44 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 a1a:	88 e3       	ldi	r24, 0x38	; 56
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	2b 81       	ldd	r18, Y+3	; 0x03
 a20:	fc 01       	movw	r30, r24
 a22:	20 83       	st	Z, r18
 a24:	0f c0       	rjmp	.+30     	; 0xa44 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 a26:	85 e3       	ldi	r24, 0x35	; 53
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	2b 81       	ldd	r18, Y+3	; 0x03
 a2c:	fc 01       	movw	r30, r24
 a2e:	20 83       	st	Z, r18
 a30:	09 c0       	rjmp	.+18     	; 0xa44 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 a32:	82 e3       	ldi	r24, 0x32	; 50
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	2b 81       	ldd	r18, Y+3	; 0x03
 a38:	fc 01       	movw	r30, r24
 a3a:	20 83       	st	Z, r18
 a3c:	03 c0       	rjmp	.+6      	; 0xa44 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	89 83       	std	Y+1, r24	; 0x01
 a42:	00 00       	nop
				}


	return Local_u8ErrorState;
 a44:	89 81       	ldd	r24, Y+1	; 0x01

}
 a46:	0f 90       	pop	r0
 a48:	0f 90       	pop	r0
 a4a:	0f 90       	pop	r0
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	08 95       	ret

00000a52 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	00 d0       	rcall	.+0      	; 0xa58 <DIO_u8GetPinValue+0x6>
 a58:	00 d0       	rcall	.+0      	; 0xa5a <DIO_u8GetPinValue+0x8>
 a5a:	0f 92       	push	r0
 a5c:	cd b7       	in	r28, 0x3d	; 61
 a5e:	de b7       	in	r29, 0x3e	; 62
 a60:	8a 83       	std	Y+2, r24	; 0x02
 a62:	6b 83       	std	Y+3, r22	; 0x03
 a64:	5d 83       	std	Y+5, r21	; 0x05
 a66:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 a68:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 a6a:	8c 81       	ldd	r24, Y+4	; 0x04
 a6c:	9d 81       	ldd	r25, Y+5	; 0x05
 a6e:	89 2b       	or	r24, r25
 a70:	09 f4       	brne	.+2      	; 0xa74 <DIO_u8GetPinValue+0x22>
 a72:	73 c0       	rjmp	.+230    	; 0xb5a <DIO_u8GetPinValue+0x108>
 a74:	8b 81       	ldd	r24, Y+3	; 0x03
 a76:	88 30       	cpi	r24, 0x08	; 8
 a78:	08 f0       	brcs	.+2      	; 0xa7c <DIO_u8GetPinValue+0x2a>
 a7a:	6f c0       	rjmp	.+222    	; 0xb5a <DIO_u8GetPinValue+0x108>
				{
					switch(Copy_u8Port)
 a7c:	8a 81       	ldd	r24, Y+2	; 0x02
 a7e:	88 2f       	mov	r24, r24
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	84 30       	cpi	r24, 0x04	; 4
 a84:	91 05       	cpc	r25, r1
 a86:	09 f4       	brne	.+2      	; 0xa8a <DIO_u8GetPinValue+0x38>
 a88:	4f c0       	rjmp	.+158    	; 0xb28 <DIO_u8GetPinValue+0xd6>
 a8a:	85 30       	cpi	r24, 0x05	; 5
 a8c:	91 05       	cpc	r25, r1
 a8e:	0c f0       	brlt	.+2      	; 0xa92 <DIO_u8GetPinValue+0x40>
 a90:	60 c0       	rjmp	.+192    	; 0xb52 <DIO_u8GetPinValue+0x100>
 a92:	83 30       	cpi	r24, 0x03	; 3
 a94:	91 05       	cpc	r25, r1
 a96:	99 f1       	breq	.+102    	; 0xafe <DIO_u8GetPinValue+0xac>
 a98:	84 30       	cpi	r24, 0x04	; 4
 a9a:	91 05       	cpc	r25, r1
 a9c:	0c f0       	brlt	.+2      	; 0xaa0 <DIO_u8GetPinValue+0x4e>
 a9e:	59 c0       	rjmp	.+178    	; 0xb52 <DIO_u8GetPinValue+0x100>
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	19 f0       	breq	.+6      	; 0xaaa <DIO_u8GetPinValue+0x58>
 aa4:	01 97       	sbiw	r24, 0x01	; 1
 aa6:	b1 f0       	breq	.+44     	; 0xad4 <DIO_u8GetPinValue+0x82>
 aa8:	54 c0       	rjmp	.+168    	; 0xb52 <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 aaa:	89 e3       	ldi	r24, 0x39	; 57
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	fc 01       	movw	r30, r24
 ab0:	80 81       	ld	r24, Z
 ab2:	88 2f       	mov	r24, r24
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	2b 81       	ldd	r18, Y+3	; 0x03
 ab8:	22 2f       	mov	r18, r18
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <DIO_u8GetPinValue+0x70>
 abe:	95 95       	asr	r25
 ac0:	87 95       	ror	r24
 ac2:	2a 95       	dec	r18
 ac4:	e2 f7       	brpl	.-8      	; 0xabe <DIO_u8GetPinValue+0x6c>
 ac6:	28 2f       	mov	r18, r24
 ac8:	21 70       	andi	r18, 0x01	; 1
 aca:	8c 81       	ldd	r24, Y+4	; 0x04
 acc:	9d 81       	ldd	r25, Y+5	; 0x05
 ace:	fc 01       	movw	r30, r24
 ad0:	20 83       	st	Z, r18
 ad2:	42 c0       	rjmp	.+132    	; 0xb58 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 ad4:	86 e3       	ldi	r24, 0x36	; 54
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	fc 01       	movw	r30, r24
 ada:	80 81       	ld	r24, Z
 adc:	88 2f       	mov	r24, r24
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	2b 81       	ldd	r18, Y+3	; 0x03
 ae2:	22 2f       	mov	r18, r18
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <DIO_u8GetPinValue+0x9a>
 ae8:	95 95       	asr	r25
 aea:	87 95       	ror	r24
 aec:	2a 95       	dec	r18
 aee:	e2 f7       	brpl	.-8      	; 0xae8 <DIO_u8GetPinValue+0x96>
 af0:	28 2f       	mov	r18, r24
 af2:	21 70       	andi	r18, 0x01	; 1
 af4:	8c 81       	ldd	r24, Y+4	; 0x04
 af6:	9d 81       	ldd	r25, Y+5	; 0x05
 af8:	fc 01       	movw	r30, r24
 afa:	20 83       	st	Z, r18
 afc:	2d c0       	rjmp	.+90     	; 0xb58 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 afe:	83 e3       	ldi	r24, 0x33	; 51
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	fc 01       	movw	r30, r24
 b04:	80 81       	ld	r24, Z
 b06:	88 2f       	mov	r24, r24
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	2b 81       	ldd	r18, Y+3	; 0x03
 b0c:	22 2f       	mov	r18, r18
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_u8GetPinValue+0xc4>
 b12:	95 95       	asr	r25
 b14:	87 95       	ror	r24
 b16:	2a 95       	dec	r18
 b18:	e2 f7       	brpl	.-8      	; 0xb12 <DIO_u8GetPinValue+0xc0>
 b1a:	28 2f       	mov	r18, r24
 b1c:	21 70       	andi	r18, 0x01	; 1
 b1e:	8c 81       	ldd	r24, Y+4	; 0x04
 b20:	9d 81       	ldd	r25, Y+5	; 0x05
 b22:	fc 01       	movw	r30, r24
 b24:	20 83       	st	Z, r18
 b26:	18 c0       	rjmp	.+48     	; 0xb58 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 b28:	80 e3       	ldi	r24, 0x30	; 48
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	fc 01       	movw	r30, r24
 b2e:	80 81       	ld	r24, Z
 b30:	88 2f       	mov	r24, r24
 b32:	90 e0       	ldi	r25, 0x00	; 0
 b34:	2b 81       	ldd	r18, Y+3	; 0x03
 b36:	22 2f       	mov	r18, r18
 b38:	30 e0       	ldi	r19, 0x00	; 0
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <DIO_u8GetPinValue+0xee>
 b3c:	95 95       	asr	r25
 b3e:	87 95       	ror	r24
 b40:	2a 95       	dec	r18
 b42:	e2 f7       	brpl	.-8      	; 0xb3c <DIO_u8GetPinValue+0xea>
 b44:	28 2f       	mov	r18, r24
 b46:	21 70       	andi	r18, 0x01	; 1
 b48:	8c 81       	ldd	r24, Y+4	; 0x04
 b4a:	9d 81       	ldd	r25, Y+5	; 0x05
 b4c:	fc 01       	movw	r30, r24
 b4e:	20 83       	st	Z, r18
 b50:	03 c0       	rjmp	.+6      	; 0xb58 <DIO_u8GetPinValue+0x106>
					     default : Local_u8ErrorState=1; break;
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	89 83       	std	Y+1, r24	; 0x01
 b56:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_u8GetPinValue+0x10c>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 b5e:	89 81       	ldd	r24, Y+1	; 0x01


}
 b60:	0f 90       	pop	r0
 b62:	0f 90       	pop	r0
 b64:	0f 90       	pop	r0
 b66:	0f 90       	pop	r0
 b68:	0f 90       	pop	r0
 b6a:	df 91       	pop	r29
 b6c:	cf 91       	pop	r28
 b6e:	08 95       	ret

00000b70 <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	cd b7       	in	r28, 0x3d	; 61
 b76:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 b78:	8a e3       	ldi	r24, 0x3A	; 58
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	fc 01       	movw	r30, r24
 b7e:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 b80:	87 e3       	ldi	r24, 0x37	; 55
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	fc 01       	movw	r30, r24
 b86:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 b88:	84 e3       	ldi	r24, 0x34	; 52
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	2f ef       	ldi	r18, 0xFF	; 255
 b8e:	fc 01       	movw	r30, r24
 b90:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 b92:	81 e3       	ldi	r24, 0x31	; 49
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	27 e0       	ldi	r18, 0x07	; 7
 b98:	fc 01       	movw	r30, r24
 b9a:	20 83       	st	Z, r18

	PORTA=PORTA_InitVal;
 b9c:	8b e3       	ldi	r24, 0x3B	; 59
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	fc 01       	movw	r30, r24
 ba2:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 ba4:	88 e3       	ldi	r24, 0x38	; 56
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	fc 01       	movw	r30, r24
 baa:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 bac:	85 e3       	ldi	r24, 0x35	; 53
 bae:	90 e0       	ldi	r25, 0x00	; 0
 bb0:	fc 01       	movw	r30, r24
 bb2:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 bb4:	82 e3       	ldi	r24, 0x32	; 50
 bb6:	90 e0       	ldi	r25, 0x00	; 0
 bb8:	fc 01       	movw	r30, r24
 bba:	10 82       	st	Z, r1
}
 bbc:	00 00       	nop
 bbe:	df 91       	pop	r29
 bc0:	cf 91       	pop	r28
 bc2:	08 95       	ret

00000bc4 <main>:
#include"CLCD_interface.h"
#include"DIO_interface.h"
#include"ADC_interface.h"

void main()
{
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
 bcc:	2c 97       	sbiw	r28, 0x0c	; 12
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
  PORT_voidInit();
 bd8:	0e 94 b8 05 	call	0xb70	; 0xb70 <PORT_voidInit>
  CLCD_voidInit();
 bdc:	0e 94 33 02 	call	0x466	; 0x466 <CLCD_voidInit>
  ADC_voidInit();
 be0:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidInit>
  u16 digital=ADC_u8GetChannelReading(SINGLE_ENDED_ADC0);
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_u8GetChannelReading>
 bea:	9a 83       	std	Y+2, r25	; 0x02
 bec:	89 83       	std	Y+1, r24	; 0x01
 			u16 MilliVolt=((u32)(digital*5000UL))/256UL;
 bee:	89 81       	ldd	r24, Y+1	; 0x01
 bf0:	9a 81       	ldd	r25, Y+2	; 0x02
 bf2:	ac 01       	movw	r20, r24
 bf4:	60 e0       	ldi	r22, 0x00	; 0
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	88 e8       	ldi	r24, 0x88	; 136
 bfa:	93 e1       	ldi	r25, 0x13	; 19
 bfc:	dc 01       	movw	r26, r24
 bfe:	9a 01       	movw	r18, r20
 c00:	ab 01       	movw	r20, r22
 c02:	0e 94 25 06 	call	0xc4a	; 0xc4a <__muluhisi3>
 c06:	6d 83       	std	Y+5, r22	; 0x05
 c08:	7e 83       	std	Y+6, r23	; 0x06
 c0a:	8f 83       	std	Y+7, r24	; 0x07
 c0c:	98 87       	std	Y+8, r25	; 0x08
 c0e:	2d 81       	ldd	r18, Y+5	; 0x05
 c10:	3e 81       	ldd	r19, Y+6	; 0x06
 c12:	4f 81       	ldd	r20, Y+7	; 0x07
 c14:	58 85       	ldd	r21, Y+8	; 0x08
 c16:	bb 27       	eor	r27, r27
 c18:	a5 2f       	mov	r26, r21
 c1a:	94 2f       	mov	r25, r20
 c1c:	83 2f       	mov	r24, r19
 c1e:	9c 83       	std	Y+4, r25	; 0x04
 c20:	8b 83       	std	Y+3, r24	; 0x03
 			CLCD_voidGoToXY(0,0);
 c22:	60 e0       	ldi	r22, 0x00	; 0
 c24:	80 e0       	ldi	r24, 0x00	; 0
 c26:	0e 94 09 03 	call	0x612	; 0x612 <CLCD_voidGoToXY>
 			CLCD_voidWriteNumber(MilliVolt);
 c2a:	8b 81       	ldd	r24, Y+3	; 0x03
 c2c:	9c 81       	ldd	r25, Y+4	; 0x04
 c2e:	9c 01       	movw	r18, r24
 c30:	40 e0       	ldi	r20, 0x00	; 0
 c32:	50 e0       	ldi	r21, 0x00	; 0
 c34:	29 87       	std	Y+9, r18	; 0x09
 c36:	3a 87       	std	Y+10, r19	; 0x0a
 c38:	4b 87       	std	Y+11, r20	; 0x0b
 c3a:	5c 87       	std	Y+12, r21	; 0x0c
 c3c:	69 85       	ldd	r22, Y+9	; 0x09
 c3e:	7a 85       	ldd	r23, Y+10	; 0x0a
 c40:	8b 85       	ldd	r24, Y+11	; 0x0b
 c42:	9c 85       	ldd	r25, Y+12	; 0x0c
 c44:	0e 94 65 03 	call	0x6ca	; 0x6ca <CLCD_voidWriteNumber>
	while(1)
 c48:	ff cf       	rjmp	.-2      	; 0xc48 <main+0x84>

00000c4a <__muluhisi3>:
 c4a:	0e 94 30 06 	call	0xc60	; 0xc60 <__umulhisi3>
 c4e:	a5 9f       	mul	r26, r21
 c50:	90 0d       	add	r25, r0
 c52:	b4 9f       	mul	r27, r20
 c54:	90 0d       	add	r25, r0
 c56:	a4 9f       	mul	r26, r20
 c58:	80 0d       	add	r24, r0
 c5a:	91 1d       	adc	r25, r1
 c5c:	11 24       	eor	r1, r1
 c5e:	08 95       	ret

00000c60 <__umulhisi3>:
 c60:	a2 9f       	mul	r26, r18
 c62:	b0 01       	movw	r22, r0
 c64:	b3 9f       	mul	r27, r19
 c66:	c0 01       	movw	r24, r0
 c68:	a3 9f       	mul	r26, r19
 c6a:	70 0d       	add	r23, r0
 c6c:	81 1d       	adc	r24, r1
 c6e:	11 24       	eor	r1, r1
 c70:	91 1d       	adc	r25, r1
 c72:	b2 9f       	mul	r27, r18
 c74:	70 0d       	add	r23, r0
 c76:	81 1d       	adc	r24, r1
 c78:	11 24       	eor	r1, r1
 c7a:	91 1d       	adc	r25, r1
 c7c:	08 95       	ret

00000c7e <__cmpsf2>:
 c7e:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_cmp>
 c82:	08 f4       	brcc	.+2      	; 0xc86 <__cmpsf2+0x8>
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	08 95       	ret

00000c88 <__fixunssfsi>:
 c88:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_splitA>
 c8c:	88 f0       	brcs	.+34     	; 0xcb0 <__fixunssfsi+0x28>
 c8e:	9f 57       	subi	r25, 0x7F	; 127
 c90:	98 f0       	brcs	.+38     	; 0xcb8 <__fixunssfsi+0x30>
 c92:	b9 2f       	mov	r27, r25
 c94:	99 27       	eor	r25, r25
 c96:	b7 51       	subi	r27, 0x17	; 23
 c98:	b0 f0       	brcs	.+44     	; 0xcc6 <__fixunssfsi+0x3e>
 c9a:	e1 f0       	breq	.+56     	; 0xcd4 <__fixunssfsi+0x4c>
 c9c:	66 0f       	add	r22, r22
 c9e:	77 1f       	adc	r23, r23
 ca0:	88 1f       	adc	r24, r24
 ca2:	99 1f       	adc	r25, r25
 ca4:	1a f0       	brmi	.+6      	; 0xcac <__fixunssfsi+0x24>
 ca6:	ba 95       	dec	r27
 ca8:	c9 f7       	brne	.-14     	; 0xc9c <__fixunssfsi+0x14>
 caa:	14 c0       	rjmp	.+40     	; 0xcd4 <__fixunssfsi+0x4c>
 cac:	b1 30       	cpi	r27, 0x01	; 1
 cae:	91 f0       	breq	.+36     	; 0xcd4 <__fixunssfsi+0x4c>
 cb0:	0e 94 b9 06 	call	0xd72	; 0xd72 <__fp_zero>
 cb4:	b1 e0       	ldi	r27, 0x01	; 1
 cb6:	08 95       	ret
 cb8:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__fp_zero>
 cbc:	67 2f       	mov	r22, r23
 cbe:	78 2f       	mov	r23, r24
 cc0:	88 27       	eor	r24, r24
 cc2:	b8 5f       	subi	r27, 0xF8	; 248
 cc4:	39 f0       	breq	.+14     	; 0xcd4 <__fixunssfsi+0x4c>
 cc6:	b9 3f       	cpi	r27, 0xF9	; 249
 cc8:	cc f3       	brlt	.-14     	; 0xcbc <__fixunssfsi+0x34>
 cca:	86 95       	lsr	r24
 ccc:	77 95       	ror	r23
 cce:	67 95       	ror	r22
 cd0:	b3 95       	inc	r27
 cd2:	d9 f7       	brne	.-10     	; 0xcca <__fixunssfsi+0x42>
 cd4:	3e f4       	brtc	.+14     	; 0xce4 <__fixunssfsi+0x5c>
 cd6:	90 95       	com	r25
 cd8:	80 95       	com	r24
 cda:	70 95       	com	r23
 cdc:	61 95       	neg	r22
 cde:	7f 4f       	sbci	r23, 0xFF	; 255
 ce0:	8f 4f       	sbci	r24, 0xFF	; 255
 ce2:	9f 4f       	sbci	r25, 0xFF	; 255
 ce4:	08 95       	ret

00000ce6 <__fp_cmp>:
 ce6:	99 0f       	add	r25, r25
 ce8:	00 08       	sbc	r0, r0
 cea:	55 0f       	add	r21, r21
 cec:	aa 0b       	sbc	r26, r26
 cee:	e0 e8       	ldi	r30, 0x80	; 128
 cf0:	fe ef       	ldi	r31, 0xFE	; 254
 cf2:	16 16       	cp	r1, r22
 cf4:	17 06       	cpc	r1, r23
 cf6:	e8 07       	cpc	r30, r24
 cf8:	f9 07       	cpc	r31, r25
 cfa:	c0 f0       	brcs	.+48     	; 0xd2c <__fp_cmp+0x46>
 cfc:	12 16       	cp	r1, r18
 cfe:	13 06       	cpc	r1, r19
 d00:	e4 07       	cpc	r30, r20
 d02:	f5 07       	cpc	r31, r21
 d04:	98 f0       	brcs	.+38     	; 0xd2c <__fp_cmp+0x46>
 d06:	62 1b       	sub	r22, r18
 d08:	73 0b       	sbc	r23, r19
 d0a:	84 0b       	sbc	r24, r20
 d0c:	95 0b       	sbc	r25, r21
 d0e:	39 f4       	brne	.+14     	; 0xd1e <__fp_cmp+0x38>
 d10:	0a 26       	eor	r0, r26
 d12:	61 f0       	breq	.+24     	; 0xd2c <__fp_cmp+0x46>
 d14:	23 2b       	or	r18, r19
 d16:	24 2b       	or	r18, r20
 d18:	25 2b       	or	r18, r21
 d1a:	21 f4       	brne	.+8      	; 0xd24 <__fp_cmp+0x3e>
 d1c:	08 95       	ret
 d1e:	0a 26       	eor	r0, r26
 d20:	09 f4       	brne	.+2      	; 0xd24 <__fp_cmp+0x3e>
 d22:	a1 40       	sbci	r26, 0x01	; 1
 d24:	a6 95       	lsr	r26
 d26:	8f ef       	ldi	r24, 0xFF	; 255
 d28:	81 1d       	adc	r24, r1
 d2a:	81 1d       	adc	r24, r1
 d2c:	08 95       	ret

00000d2e <__fp_split3>:
 d2e:	57 fd       	sbrc	r21, 7
 d30:	90 58       	subi	r25, 0x80	; 128
 d32:	44 0f       	add	r20, r20
 d34:	55 1f       	adc	r21, r21
 d36:	59 f0       	breq	.+22     	; 0xd4e <__fp_splitA+0x10>
 d38:	5f 3f       	cpi	r21, 0xFF	; 255
 d3a:	71 f0       	breq	.+28     	; 0xd58 <__fp_splitA+0x1a>
 d3c:	47 95       	ror	r20

00000d3e <__fp_splitA>:
 d3e:	88 0f       	add	r24, r24
 d40:	97 fb       	bst	r25, 7
 d42:	99 1f       	adc	r25, r25
 d44:	61 f0       	breq	.+24     	; 0xd5e <__fp_splitA+0x20>
 d46:	9f 3f       	cpi	r25, 0xFF	; 255
 d48:	79 f0       	breq	.+30     	; 0xd68 <__fp_splitA+0x2a>
 d4a:	87 95       	ror	r24
 d4c:	08 95       	ret
 d4e:	12 16       	cp	r1, r18
 d50:	13 06       	cpc	r1, r19
 d52:	14 06       	cpc	r1, r20
 d54:	55 1f       	adc	r21, r21
 d56:	f2 cf       	rjmp	.-28     	; 0xd3c <__fp_split3+0xe>
 d58:	46 95       	lsr	r20
 d5a:	f1 df       	rcall	.-30     	; 0xd3e <__fp_splitA>
 d5c:	08 c0       	rjmp	.+16     	; 0xd6e <__fp_splitA+0x30>
 d5e:	16 16       	cp	r1, r22
 d60:	17 06       	cpc	r1, r23
 d62:	18 06       	cpc	r1, r24
 d64:	99 1f       	adc	r25, r25
 d66:	f1 cf       	rjmp	.-30     	; 0xd4a <__fp_splitA+0xc>
 d68:	86 95       	lsr	r24
 d6a:	71 05       	cpc	r23, r1
 d6c:	61 05       	cpc	r22, r1
 d6e:	08 94       	sec
 d70:	08 95       	ret

00000d72 <__fp_zero>:
 d72:	e8 94       	clt

00000d74 <__fp_szero>:
 d74:	bb 27       	eor	r27, r27
 d76:	66 27       	eor	r22, r22
 d78:	77 27       	eor	r23, r23
 d7a:	cb 01       	movw	r24, r22
 d7c:	97 f9       	bld	r25, 7
 d7e:	08 95       	ret

00000d80 <__gesf2>:
 d80:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_cmp>
 d84:	08 f4       	brcc	.+2      	; 0xd88 <__gesf2+0x8>
 d86:	8f ef       	ldi	r24, 0xFF	; 255
 d88:	08 95       	ret

00000d8a <__mulsf3>:
 d8a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__mulsf3x>
 d8e:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_round>
 d92:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fp_pscA>
 d96:	38 f0       	brcs	.+14     	; 0xda6 <__mulsf3+0x1c>
 d98:	0e 94 42 07 	call	0xe84	; 0xe84 <__fp_pscB>
 d9c:	20 f0       	brcs	.+8      	; 0xda6 <__mulsf3+0x1c>
 d9e:	95 23       	and	r25, r21
 da0:	11 f0       	breq	.+4      	; 0xda6 <__mulsf3+0x1c>
 da2:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 da6:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__fp_nan>
 daa:	11 24       	eor	r1, r1
 dac:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>

00000db0 <__mulsf3x>:
 db0:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_split3>
 db4:	70 f3       	brcs	.-36     	; 0xd92 <__mulsf3+0x8>

00000db6 <__mulsf3_pse>:
 db6:	95 9f       	mul	r25, r21
 db8:	c1 f3       	breq	.-16     	; 0xdaa <__mulsf3+0x20>
 dba:	95 0f       	add	r25, r21
 dbc:	50 e0       	ldi	r21, 0x00	; 0
 dbe:	55 1f       	adc	r21, r21
 dc0:	62 9f       	mul	r22, r18
 dc2:	f0 01       	movw	r30, r0
 dc4:	72 9f       	mul	r23, r18
 dc6:	bb 27       	eor	r27, r27
 dc8:	f0 0d       	add	r31, r0
 dca:	b1 1d       	adc	r27, r1
 dcc:	63 9f       	mul	r22, r19
 dce:	aa 27       	eor	r26, r26
 dd0:	f0 0d       	add	r31, r0
 dd2:	b1 1d       	adc	r27, r1
 dd4:	aa 1f       	adc	r26, r26
 dd6:	64 9f       	mul	r22, r20
 dd8:	66 27       	eor	r22, r22
 dda:	b0 0d       	add	r27, r0
 ddc:	a1 1d       	adc	r26, r1
 dde:	66 1f       	adc	r22, r22
 de0:	82 9f       	mul	r24, r18
 de2:	22 27       	eor	r18, r18
 de4:	b0 0d       	add	r27, r0
 de6:	a1 1d       	adc	r26, r1
 de8:	62 1f       	adc	r22, r18
 dea:	73 9f       	mul	r23, r19
 dec:	b0 0d       	add	r27, r0
 dee:	a1 1d       	adc	r26, r1
 df0:	62 1f       	adc	r22, r18
 df2:	83 9f       	mul	r24, r19
 df4:	a0 0d       	add	r26, r0
 df6:	61 1d       	adc	r22, r1
 df8:	22 1f       	adc	r18, r18
 dfa:	74 9f       	mul	r23, r20
 dfc:	33 27       	eor	r19, r19
 dfe:	a0 0d       	add	r26, r0
 e00:	61 1d       	adc	r22, r1
 e02:	23 1f       	adc	r18, r19
 e04:	84 9f       	mul	r24, r20
 e06:	60 0d       	add	r22, r0
 e08:	21 1d       	adc	r18, r1
 e0a:	82 2f       	mov	r24, r18
 e0c:	76 2f       	mov	r23, r22
 e0e:	6a 2f       	mov	r22, r26
 e10:	11 24       	eor	r1, r1
 e12:	9f 57       	subi	r25, 0x7F	; 127
 e14:	50 40       	sbci	r21, 0x00	; 0
 e16:	9a f0       	brmi	.+38     	; 0xe3e <__mulsf3_pse+0x88>
 e18:	f1 f0       	breq	.+60     	; 0xe56 <__mulsf3_pse+0xa0>
 e1a:	88 23       	and	r24, r24
 e1c:	4a f0       	brmi	.+18     	; 0xe30 <__mulsf3_pse+0x7a>
 e1e:	ee 0f       	add	r30, r30
 e20:	ff 1f       	adc	r31, r31
 e22:	bb 1f       	adc	r27, r27
 e24:	66 1f       	adc	r22, r22
 e26:	77 1f       	adc	r23, r23
 e28:	88 1f       	adc	r24, r24
 e2a:	91 50       	subi	r25, 0x01	; 1
 e2c:	50 40       	sbci	r21, 0x00	; 0
 e2e:	a9 f7       	brne	.-22     	; 0xe1a <__mulsf3_pse+0x64>
 e30:	9e 3f       	cpi	r25, 0xFE	; 254
 e32:	51 05       	cpc	r21, r1
 e34:	80 f0       	brcs	.+32     	; 0xe56 <__mulsf3_pse+0xa0>
 e36:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__fp_inf>
 e3a:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__fp_szero>
 e3e:	5f 3f       	cpi	r21, 0xFF	; 255
 e40:	e4 f3       	brlt	.-8      	; 0xe3a <__mulsf3_pse+0x84>
 e42:	98 3e       	cpi	r25, 0xE8	; 232
 e44:	d4 f3       	brlt	.-12     	; 0xe3a <__mulsf3_pse+0x84>
 e46:	86 95       	lsr	r24
 e48:	77 95       	ror	r23
 e4a:	67 95       	ror	r22
 e4c:	b7 95       	ror	r27
 e4e:	f7 95       	ror	r31
 e50:	e7 95       	ror	r30
 e52:	9f 5f       	subi	r25, 0xFF	; 255
 e54:	c1 f7       	brne	.-16     	; 0xe46 <__mulsf3_pse+0x90>
 e56:	fe 2b       	or	r31, r30
 e58:	88 0f       	add	r24, r24
 e5a:	91 1d       	adc	r25, r1
 e5c:	96 95       	lsr	r25
 e5e:	87 95       	ror	r24
 e60:	97 f9       	bld	r25, 7
 e62:	08 95       	ret

00000e64 <__fp_inf>:
 e64:	97 f9       	bld	r25, 7
 e66:	9f 67       	ori	r25, 0x7F	; 127
 e68:	80 e8       	ldi	r24, 0x80	; 128
 e6a:	70 e0       	ldi	r23, 0x00	; 0
 e6c:	60 e0       	ldi	r22, 0x00	; 0
 e6e:	08 95       	ret

00000e70 <__fp_nan>:
 e70:	9f ef       	ldi	r25, 0xFF	; 255
 e72:	80 ec       	ldi	r24, 0xC0	; 192
 e74:	08 95       	ret

00000e76 <__fp_pscA>:
 e76:	00 24       	eor	r0, r0
 e78:	0a 94       	dec	r0
 e7a:	16 16       	cp	r1, r22
 e7c:	17 06       	cpc	r1, r23
 e7e:	18 06       	cpc	r1, r24
 e80:	09 06       	cpc	r0, r25
 e82:	08 95       	ret

00000e84 <__fp_pscB>:
 e84:	00 24       	eor	r0, r0
 e86:	0a 94       	dec	r0
 e88:	12 16       	cp	r1, r18
 e8a:	13 06       	cpc	r1, r19
 e8c:	14 06       	cpc	r1, r20
 e8e:	05 06       	cpc	r0, r21
 e90:	08 95       	ret

00000e92 <__fp_round>:
 e92:	09 2e       	mov	r0, r25
 e94:	03 94       	inc	r0
 e96:	00 0c       	add	r0, r0
 e98:	11 f4       	brne	.+4      	; 0xe9e <__fp_round+0xc>
 e9a:	88 23       	and	r24, r24
 e9c:	52 f0       	brmi	.+20     	; 0xeb2 <__fp_round+0x20>
 e9e:	bb 0f       	add	r27, r27
 ea0:	40 f4       	brcc	.+16     	; 0xeb2 <__fp_round+0x20>
 ea2:	bf 2b       	or	r27, r31
 ea4:	11 f4       	brne	.+4      	; 0xeaa <__fp_round+0x18>
 ea6:	60 ff       	sbrs	r22, 0
 ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <__fp_round+0x20>
 eaa:	6f 5f       	subi	r22, 0xFF	; 255
 eac:	7f 4f       	sbci	r23, 0xFF	; 255
 eae:	8f 4f       	sbci	r24, 0xFF	; 255
 eb0:	9f 4f       	sbci	r25, 0xFF	; 255
 eb2:	08 95       	ret

00000eb4 <_exit>:
 eb4:	f8 94       	cli

00000eb6 <__stop_program>:
 eb6:	ff cf       	rjmp	.-2      	; 0xeb6 <__stop_program>
