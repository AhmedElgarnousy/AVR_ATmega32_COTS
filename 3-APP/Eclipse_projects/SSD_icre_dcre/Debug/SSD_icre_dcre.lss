
SSD_icre_dcre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000063e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000063e  000006b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000858  00000000  00000000  000006c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e98  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00001e08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000532  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004cb  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000115  00000000  00000000  00002845  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  0000295a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 1d 03 	jmp	0x63a	; 0x63a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<util/delay.h>
#include"STD_TYPES.h"
#include"BIT_MATH.h"

void main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	ce 56       	subi	r28, 0x6E	; 110
  8c:	d1 09       	sbc	r29, r1
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61

DDRC=0xff;
  98:	84 e3       	ldi	r24, 0x34	; 52
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	dc 01       	movw	r26, r24
  a0:	2c 93       	st	X, r18
u8 i;
u8 j;
DDRD=0b00000011;
  a2:	81 e3       	ldi	r24, 0x31	; 49
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	23 e0       	ldi	r18, 0x03	; 3
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18

u16 SevSegArr_1[]={0b0111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b01001111,0b01111111,0b01101111};
  ac:	84 e1       	ldi	r24, 0x14	; 20
  ae:	e0 e6       	ldi	r30, 0x60	; 96
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	de 01       	movw	r26, r28
  b4:	5f 96       	adiw	r26, 0x1f	; 31
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x34>
u16 SevSegArr_2[]={0b0111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b01001111,0b01111111,0b01101111};
  be:	84 e1       	ldi	r24, 0x14	; 20
  c0:	e0 e6       	ldi	r30, 0x60	; 96
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	de 01       	movw	r26, r28
  c6:	d3 96       	adiw	r26, 0x33	; 51
  c8:	01 90       	ld	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	8a 95       	dec	r24
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x46>
		while(1)
		{


			for(i=0,j=9;i<10,j>=0;i++,j--)
  d0:	19 82       	std	Y+1, r1	; 0x01
  d2:	89 e0       	ldi	r24, 0x09	; 9
  d4:	8a 83       	std	Y+2, r24	; 0x02
  d6:	42 c1       	rjmp	.+644    	; 0x35c <main+0x2da>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	9a 8f       	std	Y+26, r25	; 0x1a
  de:	89 8f       	std	Y+25, r24	; 0x19
  e0:	65 c0       	rjmp	.+202    	; 0x1ac <main+0x12a>
	else if (__tmp > 65535)
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	3f ef       	ldi	r19, 0xFF	; 255
  e6:	4f e7       	ldi	r20, 0x7F	; 127
  e8:	57 e4       	ldi	r21, 0x47	; 71
  ea:	6d 89       	ldd	r22, Y+21	; 0x15
  ec:	7e 89       	ldd	r23, Y+22	; 0x16
  ee:	8f 89       	ldd	r24, Y+23	; 0x17
  f0:	98 8d       	ldd	r25, Y+24	; 0x18
  f2:	0e 94 83 02 	call	0x506	; 0x506 <__gesf2>
  f6:	18 16       	cp	r1, r24
  f8:	0c f0       	brlt	.+2      	; 0xfc <main+0x7a>
  fa:	46 c0       	rjmp	.+140    	; 0x188 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	40 e2       	ldi	r20, 0x20	; 32
 102:	51 e4       	ldi	r21, 0x41	; 65
 104:	69 89       	ldd	r22, Y+17	; 0x11
 106:	7a 89       	ldd	r23, Y+18	; 0x12
 108:	8b 89       	ldd	r24, Y+19	; 0x13
 10a:	9c 89       	ldd	r25, Y+20	; 0x14
 10c:	0e 94 88 02 	call	0x510	; 0x510 <__mulsf3>
 110:	67 96       	adiw	r28, 0x17	; 23
 112:	6c af       	std	Y+60, r22	; 0x3c
 114:	7d af       	std	Y+61, r23	; 0x3d
 116:	8e af       	std	Y+62, r24	; 0x3e
 118:	9f af       	std	Y+63, r25	; 0x3f
 11a:	67 97       	sbiw	r28, 0x17	; 23
 11c:	67 96       	adiw	r28, 0x17	; 23
 11e:	8c ad       	ldd	r24, Y+60	; 0x3c
 120:	9d ad       	ldd	r25, Y+61	; 0x3d
 122:	ae ad       	ldd	r26, Y+62	; 0x3e
 124:	bf ad       	ldd	r27, Y+63	; 0x3f
 126:	67 97       	sbiw	r28, 0x17	; 23
 128:	2f 96       	adiw	r28, 0x0f	; 15
 12a:	8c af       	std	Y+60, r24	; 0x3c
 12c:	9d af       	std	Y+61, r25	; 0x3d
 12e:	ae af       	std	Y+62, r26	; 0x3e
 130:	bf af       	std	Y+63, r27	; 0x3f
 132:	2f 97       	sbiw	r28, 0x0f	; 15
 134:	2f 96       	adiw	r28, 0x0f	; 15
 136:	6c ad       	ldd	r22, Y+60	; 0x3c
 138:	7d ad       	ldd	r23, Y+61	; 0x3d
 13a:	8e ad       	ldd	r24, Y+62	; 0x3e
 13c:	9f ad       	ldd	r25, Y+63	; 0x3f
 13e:	2f 97       	sbiw	r28, 0x0f	; 15
 140:	0e 94 07 02 	call	0x40e	; 0x40e <__fixunssfsi>
 144:	6b 96       	adiw	r28, 0x1b	; 27
 146:	6c af       	std	Y+60, r22	; 0x3c
 148:	7d af       	std	Y+61, r23	; 0x3d
 14a:	8e af       	std	Y+62, r24	; 0x3e
 14c:	9f af       	std	Y+63, r25	; 0x3f
 14e:	6b 97       	sbiw	r28, 0x1b	; 27
 150:	69 96       	adiw	r28, 0x19	; 25
 152:	ae ad       	ldd	r26, Y+62	; 0x3e
 154:	bf ad       	ldd	r27, Y+63	; 0x3f
 156:	69 97       	sbiw	r28, 0x19	; 25
 158:	ba 8f       	std	Y+26, r27	; 0x1a
 15a:	a9 8f       	std	Y+25, r26	; 0x19
		while(__ticks)
 15c:	10 c0       	rjmp	.+32     	; 0x17e <main+0xfc>
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	9c 8f       	std	Y+28, r25	; 0x1c
 164:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 166:	8b 8d       	ldd	r24, Y+27	; 0x1b
 168:	9c 8d       	ldd	r25, Y+28	; 0x1c
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <main+0xe8>
 16e:	9c 8f       	std	Y+28, r25	; 0x1c
 170:	8b 8f       	std	Y+27, r24	; 0x1b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 172:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 174:	89 8d       	ldd	r24, Y+25	; 0x19
 176:	9a 8d       	ldd	r25, Y+26	; 0x1a
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	9a 8f       	std	Y+26, r25	; 0x1a
 17c:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	89 8d       	ldd	r24, Y+25	; 0x19
 180:	9a 8d       	ldd	r25, Y+26	; 0x1a
 182:	89 2b       	or	r24, r25
 184:	61 f7       	brne	.-40     	; 0x15e <main+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 186:	1d c0       	rjmp	.+58     	; 0x1c2 <main+0x140>
	}
	else
		__ticks = (uint16_t)__tmp;
 188:	6d 89       	ldd	r22, Y+21	; 0x15
 18a:	7e 89       	ldd	r23, Y+22	; 0x16
 18c:	8f 89       	ldd	r24, Y+23	; 0x17
 18e:	98 8d       	ldd	r25, Y+24	; 0x18
 190:	0e 94 07 02 	call	0x40e	; 0x40e <__fixunssfsi>
 194:	6f 96       	adiw	r28, 0x1f	; 31
 196:	6c af       	std	Y+60, r22	; 0x3c
 198:	7d af       	std	Y+61, r23	; 0x3d
 19a:	8e af       	std	Y+62, r24	; 0x3e
 19c:	9f af       	std	Y+63, r25	; 0x3f
 19e:	6f 97       	sbiw	r28, 0x1f	; 31
 1a0:	6d 96       	adiw	r28, 0x1d	; 29
 1a2:	ee ad       	ldd	r30, Y+62	; 0x3e
 1a4:	ff ad       	ldd	r31, Y+63	; 0x3f
 1a6:	6d 97       	sbiw	r28, 0x1d	; 29
 1a8:	fa 8f       	std	Y+26, r31	; 0x1a
 1aa:	e9 8f       	std	Y+25, r30	; 0x19
 1ac:	89 8d       	ldd	r24, Y+25	; 0x19
 1ae:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1b0:	9e 8f       	std	Y+30, r25	; 0x1e
 1b2:	8d 8f       	std	Y+29, r24	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x136>
 1bc:	9e 8f       	std	Y+30, r25	; 0x1e
 1be:	8d 8f       	std	Y+29, r24	; 0x1d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 1c0:	00 00       	nop
			{
				 CLR_BIT(PORTD,0);
		        SET_BIT(PORTD,1);
				 PORTC=SevSegArr_1[i];
				 _delay_ms(1);
				 SET_BIT(PORTD,0);
 1c2:	82 e3       	ldi	r24, 0x32	; 50
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	dc 01       	movw	r26, r24
 1c8:	2c 91       	ld	r18, X
 1ca:	82 e3       	ldi	r24, 0x32	; 50
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	21 60       	ori	r18, 0x01	; 1
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
				CLR_BIT(PORTD,1);
 1d4:	82 e3       	ldi	r24, 0x32	; 50
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	dc 01       	movw	r26, r24
 1da:	2c 91       	ld	r18, X
 1dc:	82 e3       	ldi	r24, 0x32	; 50
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	2d 7f       	andi	r18, 0xFD	; 253
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
				 PORTC=SevSegArr_2[j];
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	9e 01       	movw	r18, r28
 1f2:	2f 5f       	subi	r18, 0xFF	; 255
 1f4:	3f 4f       	sbci	r19, 0xFF	; 255
 1f6:	82 0f       	add	r24, r18
 1f8:	93 1f       	adc	r25, r19
 1fa:	c2 96       	adiw	r24, 0x32	; 50
 1fc:	dc 01       	movw	r26, r24
 1fe:	2d 91       	ld	r18, X+
 200:	3c 91       	ld	r19, X
 202:	85 e3       	ldi	r24, 0x35	; 53
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	a0 e8       	ldi	r26, 0x80	; 128
 210:	bf e3       	ldi	r27, 0x3F	; 63
 212:	8b 83       	std	Y+3, r24	; 0x03
 214:	9c 83       	std	Y+4, r25	; 0x04
 216:	ad 83       	std	Y+5, r26	; 0x05
 218:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	4a e7       	ldi	r20, 0x7A	; 122
 220:	55 e4       	ldi	r21, 0x45	; 69
 222:	6b 81       	ldd	r22, Y+3	; 0x03
 224:	7c 81       	ldd	r23, Y+4	; 0x04
 226:	8d 81       	ldd	r24, Y+5	; 0x05
 228:	9e 81       	ldd	r25, Y+6	; 0x06
 22a:	0e 94 88 02 	call	0x510	; 0x510 <__mulsf3>
 22e:	a3 96       	adiw	r28, 0x23	; 35
 230:	6c af       	std	Y+60, r22	; 0x3c
 232:	7d af       	std	Y+61, r23	; 0x3d
 234:	8e af       	std	Y+62, r24	; 0x3e
 236:	9f af       	std	Y+63, r25	; 0x3f
 238:	a3 97       	sbiw	r28, 0x23	; 35
 23a:	a3 96       	adiw	r28, 0x23	; 35
 23c:	8c ad       	ldd	r24, Y+60	; 0x3c
 23e:	9d ad       	ldd	r25, Y+61	; 0x3d
 240:	ae ad       	ldd	r26, Y+62	; 0x3e
 242:	bf ad       	ldd	r27, Y+63	; 0x3f
 244:	a3 97       	sbiw	r28, 0x23	; 35
 246:	8f 83       	std	Y+7, r24	; 0x07
 248:	98 87       	std	Y+8, r25	; 0x08
 24a:	a9 87       	std	Y+9, r26	; 0x09
 24c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	40 e8       	ldi	r20, 0x80	; 128
 254:	5f e3       	ldi	r21, 0x3F	; 63
 256:	6f 81       	ldd	r22, Y+7	; 0x07
 258:	78 85       	ldd	r23, Y+8	; 0x08
 25a:	89 85       	ldd	r24, Y+9	; 0x09
 25c:	9a 85       	ldd	r25, Y+10	; 0x0a
 25e:	0e 94 02 02 	call	0x404	; 0x404 <__cmpsf2>
 262:	88 23       	and	r24, r24
 264:	2c f4       	brge	.+10     	; 0x270 <main+0x1ee>
		__ticks = 1;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	9c 87       	std	Y+12, r25	; 0x0c
 26c:	8b 87       	std	Y+11, r24	; 0x0b
 26e:	65 c0       	rjmp	.+202    	; 0x33a <main+0x2b8>
	else if (__tmp > 65535)
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	3f ef       	ldi	r19, 0xFF	; 255
 274:	4f e7       	ldi	r20, 0x7F	; 127
 276:	57 e4       	ldi	r21, 0x47	; 71
 278:	6f 81       	ldd	r22, Y+7	; 0x07
 27a:	78 85       	ldd	r23, Y+8	; 0x08
 27c:	89 85       	ldd	r24, Y+9	; 0x09
 27e:	9a 85       	ldd	r25, Y+10	; 0x0a
 280:	0e 94 83 02 	call	0x506	; 0x506 <__gesf2>
 284:	18 16       	cp	r1, r24
 286:	0c f0       	brlt	.+2      	; 0x28a <main+0x208>
 288:	46 c0       	rjmp	.+140    	; 0x316 <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 28a:	20 e0       	ldi	r18, 0x00	; 0
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	40 e2       	ldi	r20, 0x20	; 32
 290:	51 e4       	ldi	r21, 0x41	; 65
 292:	6b 81       	ldd	r22, Y+3	; 0x03
 294:	7c 81       	ldd	r23, Y+4	; 0x04
 296:	8d 81       	ldd	r24, Y+5	; 0x05
 298:	9e 81       	ldd	r25, Y+6	; 0x06
 29a:	0e 94 88 02 	call	0x510	; 0x510 <__mulsf3>
 29e:	a7 96       	adiw	r28, 0x27	; 39
 2a0:	6c af       	std	Y+60, r22	; 0x3c
 2a2:	7d af       	std	Y+61, r23	; 0x3d
 2a4:	8e af       	std	Y+62, r24	; 0x3e
 2a6:	9f af       	std	Y+63, r25	; 0x3f
 2a8:	a7 97       	sbiw	r28, 0x27	; 39
 2aa:	a7 96       	adiw	r28, 0x27	; 39
 2ac:	8c ad       	ldd	r24, Y+60	; 0x3c
 2ae:	9d ad       	ldd	r25, Y+61	; 0x3d
 2b0:	ae ad       	ldd	r26, Y+62	; 0x3e
 2b2:	bf ad       	ldd	r27, Y+63	; 0x3f
 2b4:	a7 97       	sbiw	r28, 0x27	; 39
 2b6:	2b 96       	adiw	r28, 0x0b	; 11
 2b8:	8c af       	std	Y+60, r24	; 0x3c
 2ba:	9d af       	std	Y+61, r25	; 0x3d
 2bc:	ae af       	std	Y+62, r26	; 0x3e
 2be:	bf af       	std	Y+63, r27	; 0x3f
 2c0:	2b 97       	sbiw	r28, 0x0b	; 11
 2c2:	2b 96       	adiw	r28, 0x0b	; 11
 2c4:	6c ad       	ldd	r22, Y+60	; 0x3c
 2c6:	7d ad       	ldd	r23, Y+61	; 0x3d
 2c8:	8e ad       	ldd	r24, Y+62	; 0x3e
 2ca:	9f ad       	ldd	r25, Y+63	; 0x3f
 2cc:	2b 97       	sbiw	r28, 0x0b	; 11
 2ce:	0e 94 07 02 	call	0x40e	; 0x40e <__fixunssfsi>
 2d2:	ab 96       	adiw	r28, 0x2b	; 43
 2d4:	6c af       	std	Y+60, r22	; 0x3c
 2d6:	7d af       	std	Y+61, r23	; 0x3d
 2d8:	8e af       	std	Y+62, r24	; 0x3e
 2da:	9f af       	std	Y+63, r25	; 0x3f
 2dc:	ab 97       	sbiw	r28, 0x2b	; 43
 2de:	a9 96       	adiw	r28, 0x29	; 41
 2e0:	ae ad       	ldd	r26, Y+62	; 0x3e
 2e2:	bf ad       	ldd	r27, Y+63	; 0x3f
 2e4:	a9 97       	sbiw	r28, 0x29	; 41
 2e6:	bc 87       	std	Y+12, r27	; 0x0c
 2e8:	ab 87       	std	Y+11, r26	; 0x0b
		while(__ticks)
 2ea:	10 c0       	rjmp	.+32     	; 0x30c <main+0x28a>
 2ec:	80 e9       	ldi	r24, 0x90	; 144
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	9e 87       	std	Y+14, r25	; 0x0e
 2f2:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <main+0x276>
 2fc:	9e 87       	std	Y+14, r25	; 0x0e
 2fe:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 300:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 302:	8b 85       	ldd	r24, Y+11	; 0x0b
 304:	9c 85       	ldd	r25, Y+12	; 0x0c
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	9c 87       	std	Y+12, r25	; 0x0c
 30a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 30c:	8b 85       	ldd	r24, Y+11	; 0x0b
 30e:	9c 85       	ldd	r25, Y+12	; 0x0c
 310:	89 2b       	or	r24, r25
 312:	61 f7       	brne	.-40     	; 0x2ec <main+0x26a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 314:	1d c0       	rjmp	.+58     	; 0x350 <main+0x2ce>
	}
	else
		__ticks = (uint16_t)__tmp;
 316:	6f 81       	ldd	r22, Y+7	; 0x07
 318:	78 85       	ldd	r23, Y+8	; 0x08
 31a:	89 85       	ldd	r24, Y+9	; 0x09
 31c:	9a 85       	ldd	r25, Y+10	; 0x0a
 31e:	0e 94 07 02 	call	0x40e	; 0x40e <__fixunssfsi>
 322:	af 96       	adiw	r28, 0x2f	; 47
 324:	6c af       	std	Y+60, r22	; 0x3c
 326:	7d af       	std	Y+61, r23	; 0x3d
 328:	8e af       	std	Y+62, r24	; 0x3e
 32a:	9f af       	std	Y+63, r25	; 0x3f
 32c:	af 97       	sbiw	r28, 0x2f	; 47
 32e:	ad 96       	adiw	r28, 0x2d	; 45
 330:	ee ad       	ldd	r30, Y+62	; 0x3e
 332:	ff ad       	ldd	r31, Y+63	; 0x3f
 334:	ad 97       	sbiw	r28, 0x2d	; 45
 336:	fc 87       	std	Y+12, r31	; 0x0c
 338:	eb 87       	std	Y+11, r30	; 0x0b
 33a:	8b 85       	ldd	r24, Y+11	; 0x0b
 33c:	9c 85       	ldd	r25, Y+12	; 0x0c
 33e:	98 8b       	std	Y+16, r25	; 0x10
 340:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 342:	8f 85       	ldd	r24, Y+15	; 0x0f
 344:	98 89       	ldd	r25, Y+16	; 0x10
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x2c4>
 34a:	98 8b       	std	Y+16, r25	; 0x10
 34c:	8f 87       	std	Y+15, r24	; 0x0f
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 34e:	00 00       	nop
u16 SevSegArr_2[]={0b0111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b01001111,0b01111111,0b01101111};
		while(1)
		{


			for(i=0,j=9;i<10,j>=0;i++,j--)
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	81 50       	subi	r24, 0x01	; 1
 35a:	8a 83       	std	Y+2, r24	; 0x02
			{
				 CLR_BIT(PORTD,0);
 35c:	82 e3       	ldi	r24, 0x32	; 50
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	dc 01       	movw	r26, r24
 362:	2c 91       	ld	r18, X
 364:	82 e3       	ldi	r24, 0x32	; 50
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	2e 7f       	andi	r18, 0xFE	; 254
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
		        SET_BIT(PORTD,1);
 36e:	82 e3       	ldi	r24, 0x32	; 50
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	dc 01       	movw	r26, r24
 374:	2c 91       	ld	r18, X
 376:	82 e3       	ldi	r24, 0x32	; 50
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	22 60       	ori	r18, 0x02	; 2
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
				 PORTC=SevSegArr_1[i];
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	88 2f       	mov	r24, r24
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	9e 01       	movw	r18, r28
 38c:	2f 5f       	subi	r18, 0xFF	; 255
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	82 0f       	add	r24, r18
 392:	93 1f       	adc	r25, r19
 394:	4e 96       	adiw	r24, 0x1e	; 30
 396:	dc 01       	movw	r26, r24
 398:	2d 91       	ld	r18, X+
 39a:	3c 91       	ld	r19, X
 39c:	85 e3       	ldi	r24, 0x35	; 53
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	a0 e8       	ldi	r26, 0x80	; 128
 3aa:	bf e3       	ldi	r27, 0x3F	; 63
 3ac:	89 8b       	std	Y+17, r24	; 0x11
 3ae:	9a 8b       	std	Y+18, r25	; 0x12
 3b0:	ab 8b       	std	Y+19, r26	; 0x13
 3b2:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	4a e7       	ldi	r20, 0x7A	; 122
 3ba:	55 e4       	ldi	r21, 0x45	; 69
 3bc:	69 89       	ldd	r22, Y+17	; 0x11
 3be:	7a 89       	ldd	r23, Y+18	; 0x12
 3c0:	8b 89       	ldd	r24, Y+19	; 0x13
 3c2:	9c 89       	ldd	r25, Y+20	; 0x14
 3c4:	0e 94 88 02 	call	0x510	; 0x510 <__mulsf3>
 3c8:	63 96       	adiw	r28, 0x13	; 19
 3ca:	6c af       	std	Y+60, r22	; 0x3c
 3cc:	7d af       	std	Y+61, r23	; 0x3d
 3ce:	8e af       	std	Y+62, r24	; 0x3e
 3d0:	9f af       	std	Y+63, r25	; 0x3f
 3d2:	63 97       	sbiw	r28, 0x13	; 19
 3d4:	63 96       	adiw	r28, 0x13	; 19
 3d6:	8c ad       	ldd	r24, Y+60	; 0x3c
 3d8:	9d ad       	ldd	r25, Y+61	; 0x3d
 3da:	ae ad       	ldd	r26, Y+62	; 0x3e
 3dc:	bf ad       	ldd	r27, Y+63	; 0x3f
 3de:	63 97       	sbiw	r28, 0x13	; 19
 3e0:	8d 8b       	std	Y+21, r24	; 0x15
 3e2:	9e 8b       	std	Y+22, r25	; 0x16
 3e4:	af 8b       	std	Y+23, r26	; 0x17
 3e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
 3e8:	20 e0       	ldi	r18, 0x00	; 0
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e8       	ldi	r20, 0x80	; 128
 3ee:	5f e3       	ldi	r21, 0x3F	; 63
 3f0:	6d 89       	ldd	r22, Y+21	; 0x15
 3f2:	7e 89       	ldd	r23, Y+22	; 0x16
 3f4:	8f 89       	ldd	r24, Y+23	; 0x17
 3f6:	98 8d       	ldd	r25, Y+24	; 0x18
 3f8:	0e 94 02 02 	call	0x404	; 0x404 <__cmpsf2>
 3fc:	88 23       	and	r24, r24
 3fe:	0c f4       	brge	.+2      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 400:	6b ce       	rjmp	.-810    	; 0xd8 <main+0x56>
 402:	6f ce       	rjmp	.-802    	; 0xe2 <main+0x60>

00000404 <__cmpsf2>:
 404:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_cmp>
 408:	08 f4       	brcc	.+2      	; 0x40c <__cmpsf2+0x8>
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret

0000040e <__fixunssfsi>:
 40e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_splitA>
 412:	88 f0       	brcs	.+34     	; 0x436 <__fixunssfsi+0x28>
 414:	9f 57       	subi	r25, 0x7F	; 127
 416:	98 f0       	brcs	.+38     	; 0x43e <__fixunssfsi+0x30>
 418:	b9 2f       	mov	r27, r25
 41a:	99 27       	eor	r25, r25
 41c:	b7 51       	subi	r27, 0x17	; 23
 41e:	b0 f0       	brcs	.+44     	; 0x44c <__fixunssfsi+0x3e>
 420:	e1 f0       	breq	.+56     	; 0x45a <__fixunssfsi+0x4c>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	88 1f       	adc	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	1a f0       	brmi	.+6      	; 0x432 <__fixunssfsi+0x24>
 42c:	ba 95       	dec	r27
 42e:	c9 f7       	brne	.-14     	; 0x422 <__fixunssfsi+0x14>
 430:	14 c0       	rjmp	.+40     	; 0x45a <__fixunssfsi+0x4c>
 432:	b1 30       	cpi	r27, 0x01	; 1
 434:	91 f0       	breq	.+36     	; 0x45a <__fixunssfsi+0x4c>
 436:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_zero>
 43a:	b1 e0       	ldi	r27, 0x01	; 1
 43c:	08 95       	ret
 43e:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_zero>
 442:	67 2f       	mov	r22, r23
 444:	78 2f       	mov	r23, r24
 446:	88 27       	eor	r24, r24
 448:	b8 5f       	subi	r27, 0xF8	; 248
 44a:	39 f0       	breq	.+14     	; 0x45a <__fixunssfsi+0x4c>
 44c:	b9 3f       	cpi	r27, 0xF9	; 249
 44e:	cc f3       	brlt	.-14     	; 0x442 <__fixunssfsi+0x34>
 450:	86 95       	lsr	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b3 95       	inc	r27
 458:	d9 f7       	brne	.-10     	; 0x450 <__fixunssfsi+0x42>
 45a:	3e f4       	brtc	.+14     	; 0x46a <__fixunssfsi+0x5c>
 45c:	90 95       	com	r25
 45e:	80 95       	com	r24
 460:	70 95       	com	r23
 462:	61 95       	neg	r22
 464:	7f 4f       	sbci	r23, 0xFF	; 255
 466:	8f 4f       	sbci	r24, 0xFF	; 255
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	08 95       	ret

0000046c <__fp_cmp>:
 46c:	99 0f       	add	r25, r25
 46e:	00 08       	sbc	r0, r0
 470:	55 0f       	add	r21, r21
 472:	aa 0b       	sbc	r26, r26
 474:	e0 e8       	ldi	r30, 0x80	; 128
 476:	fe ef       	ldi	r31, 0xFE	; 254
 478:	16 16       	cp	r1, r22
 47a:	17 06       	cpc	r1, r23
 47c:	e8 07       	cpc	r30, r24
 47e:	f9 07       	cpc	r31, r25
 480:	c0 f0       	brcs	.+48     	; 0x4b2 <__fp_cmp+0x46>
 482:	12 16       	cp	r1, r18
 484:	13 06       	cpc	r1, r19
 486:	e4 07       	cpc	r30, r20
 488:	f5 07       	cpc	r31, r21
 48a:	98 f0       	brcs	.+38     	; 0x4b2 <__fp_cmp+0x46>
 48c:	62 1b       	sub	r22, r18
 48e:	73 0b       	sbc	r23, r19
 490:	84 0b       	sbc	r24, r20
 492:	95 0b       	sbc	r25, r21
 494:	39 f4       	brne	.+14     	; 0x4a4 <__fp_cmp+0x38>
 496:	0a 26       	eor	r0, r26
 498:	61 f0       	breq	.+24     	; 0x4b2 <__fp_cmp+0x46>
 49a:	23 2b       	or	r18, r19
 49c:	24 2b       	or	r18, r20
 49e:	25 2b       	or	r18, r21
 4a0:	21 f4       	brne	.+8      	; 0x4aa <__fp_cmp+0x3e>
 4a2:	08 95       	ret
 4a4:	0a 26       	eor	r0, r26
 4a6:	09 f4       	brne	.+2      	; 0x4aa <__fp_cmp+0x3e>
 4a8:	a1 40       	sbci	r26, 0x01	; 1
 4aa:	a6 95       	lsr	r26
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	81 1d       	adc	r24, r1
 4b0:	81 1d       	adc	r24, r1
 4b2:	08 95       	ret

000004b4 <__fp_split3>:
 4b4:	57 fd       	sbrc	r21, 7
 4b6:	90 58       	subi	r25, 0x80	; 128
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	59 f0       	breq	.+22     	; 0x4d4 <__fp_splitA+0x10>
 4be:	5f 3f       	cpi	r21, 0xFF	; 255
 4c0:	71 f0       	breq	.+28     	; 0x4de <__fp_splitA+0x1a>
 4c2:	47 95       	ror	r20

000004c4 <__fp_splitA>:
 4c4:	88 0f       	add	r24, r24
 4c6:	97 fb       	bst	r25, 7
 4c8:	99 1f       	adc	r25, r25
 4ca:	61 f0       	breq	.+24     	; 0x4e4 <__fp_splitA+0x20>
 4cc:	9f 3f       	cpi	r25, 0xFF	; 255
 4ce:	79 f0       	breq	.+30     	; 0x4ee <__fp_splitA+0x2a>
 4d0:	87 95       	ror	r24
 4d2:	08 95       	ret
 4d4:	12 16       	cp	r1, r18
 4d6:	13 06       	cpc	r1, r19
 4d8:	14 06       	cpc	r1, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	f2 cf       	rjmp	.-28     	; 0x4c2 <__fp_split3+0xe>
 4de:	46 95       	lsr	r20
 4e0:	f1 df       	rcall	.-30     	; 0x4c4 <__fp_splitA>
 4e2:	08 c0       	rjmp	.+16     	; 0x4f4 <__fp_splitA+0x30>
 4e4:	16 16       	cp	r1, r22
 4e6:	17 06       	cpc	r1, r23
 4e8:	18 06       	cpc	r1, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	f1 cf       	rjmp	.-30     	; 0x4d0 <__fp_splitA+0xc>
 4ee:	86 95       	lsr	r24
 4f0:	71 05       	cpc	r23, r1
 4f2:	61 05       	cpc	r22, r1
 4f4:	08 94       	sec
 4f6:	08 95       	ret

000004f8 <__fp_zero>:
 4f8:	e8 94       	clt

000004fa <__fp_szero>:
 4fa:	bb 27       	eor	r27, r27
 4fc:	66 27       	eor	r22, r22
 4fe:	77 27       	eor	r23, r23
 500:	cb 01       	movw	r24, r22
 502:	97 f9       	bld	r25, 7
 504:	08 95       	ret

00000506 <__gesf2>:
 506:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_cmp>
 50a:	08 f4       	brcc	.+2      	; 0x50e <__gesf2+0x8>
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	08 95       	ret

00000510 <__mulsf3>:
 510:	0e 94 9b 02 	call	0x536	; 0x536 <__mulsf3x>
 514:	0c 94 0c 03 	jmp	0x618	; 0x618 <__fp_round>
 518:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscA>
 51c:	38 f0       	brcs	.+14     	; 0x52c <__mulsf3+0x1c>
 51e:	0e 94 05 03 	call	0x60a	; 0x60a <__fp_pscB>
 522:	20 f0       	brcs	.+8      	; 0x52c <__mulsf3+0x1c>
 524:	95 23       	and	r25, r21
 526:	11 f0       	breq	.+4      	; 0x52c <__mulsf3+0x1c>
 528:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 52c:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_nan>
 530:	11 24       	eor	r1, r1
 532:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_szero>

00000536 <__mulsf3x>:
 536:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fp_split3>
 53a:	70 f3       	brcs	.-36     	; 0x518 <__mulsf3+0x8>

0000053c <__mulsf3_pse>:
 53c:	95 9f       	mul	r25, r21
 53e:	c1 f3       	breq	.-16     	; 0x530 <__mulsf3+0x20>
 540:	95 0f       	add	r25, r21
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	55 1f       	adc	r21, r21
 546:	62 9f       	mul	r22, r18
 548:	f0 01       	movw	r30, r0
 54a:	72 9f       	mul	r23, r18
 54c:	bb 27       	eor	r27, r27
 54e:	f0 0d       	add	r31, r0
 550:	b1 1d       	adc	r27, r1
 552:	63 9f       	mul	r22, r19
 554:	aa 27       	eor	r26, r26
 556:	f0 0d       	add	r31, r0
 558:	b1 1d       	adc	r27, r1
 55a:	aa 1f       	adc	r26, r26
 55c:	64 9f       	mul	r22, r20
 55e:	66 27       	eor	r22, r22
 560:	b0 0d       	add	r27, r0
 562:	a1 1d       	adc	r26, r1
 564:	66 1f       	adc	r22, r22
 566:	82 9f       	mul	r24, r18
 568:	22 27       	eor	r18, r18
 56a:	b0 0d       	add	r27, r0
 56c:	a1 1d       	adc	r26, r1
 56e:	62 1f       	adc	r22, r18
 570:	73 9f       	mul	r23, r19
 572:	b0 0d       	add	r27, r0
 574:	a1 1d       	adc	r26, r1
 576:	62 1f       	adc	r22, r18
 578:	83 9f       	mul	r24, r19
 57a:	a0 0d       	add	r26, r0
 57c:	61 1d       	adc	r22, r1
 57e:	22 1f       	adc	r18, r18
 580:	74 9f       	mul	r23, r20
 582:	33 27       	eor	r19, r19
 584:	a0 0d       	add	r26, r0
 586:	61 1d       	adc	r22, r1
 588:	23 1f       	adc	r18, r19
 58a:	84 9f       	mul	r24, r20
 58c:	60 0d       	add	r22, r0
 58e:	21 1d       	adc	r18, r1
 590:	82 2f       	mov	r24, r18
 592:	76 2f       	mov	r23, r22
 594:	6a 2f       	mov	r22, r26
 596:	11 24       	eor	r1, r1
 598:	9f 57       	subi	r25, 0x7F	; 127
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	9a f0       	brmi	.+38     	; 0x5c4 <__mulsf3_pse+0x88>
 59e:	f1 f0       	breq	.+60     	; 0x5dc <__mulsf3_pse+0xa0>
 5a0:	88 23       	and	r24, r24
 5a2:	4a f0       	brmi	.+18     	; 0x5b6 <__mulsf3_pse+0x7a>
 5a4:	ee 0f       	add	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	bb 1f       	adc	r27, r27
 5aa:	66 1f       	adc	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	88 1f       	adc	r24, r24
 5b0:	91 50       	subi	r25, 0x01	; 1
 5b2:	50 40       	sbci	r21, 0x00	; 0
 5b4:	a9 f7       	brne	.-22     	; 0x5a0 <__mulsf3_pse+0x64>
 5b6:	9e 3f       	cpi	r25, 0xFE	; 254
 5b8:	51 05       	cpc	r21, r1
 5ba:	80 f0       	brcs	.+32     	; 0x5dc <__mulsf3_pse+0xa0>
 5bc:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__fp_inf>
 5c0:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__fp_szero>
 5c4:	5f 3f       	cpi	r21, 0xFF	; 255
 5c6:	e4 f3       	brlt	.-8      	; 0x5c0 <__mulsf3_pse+0x84>
 5c8:	98 3e       	cpi	r25, 0xE8	; 232
 5ca:	d4 f3       	brlt	.-12     	; 0x5c0 <__mulsf3_pse+0x84>
 5cc:	86 95       	lsr	r24
 5ce:	77 95       	ror	r23
 5d0:	67 95       	ror	r22
 5d2:	b7 95       	ror	r27
 5d4:	f7 95       	ror	r31
 5d6:	e7 95       	ror	r30
 5d8:	9f 5f       	subi	r25, 0xFF	; 255
 5da:	c1 f7       	brne	.-16     	; 0x5cc <__mulsf3_pse+0x90>
 5dc:	fe 2b       	or	r31, r30
 5de:	88 0f       	add	r24, r24
 5e0:	91 1d       	adc	r25, r1
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	97 f9       	bld	r25, 7
 5e8:	08 95       	ret

000005ea <__fp_inf>:
 5ea:	97 f9       	bld	r25, 7
 5ec:	9f 67       	ori	r25, 0x7F	; 127
 5ee:	80 e8       	ldi	r24, 0x80	; 128
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	08 95       	ret

000005f6 <__fp_nan>:
 5f6:	9f ef       	ldi	r25, 0xFF	; 255
 5f8:	80 ec       	ldi	r24, 0xC0	; 192
 5fa:	08 95       	ret

000005fc <__fp_pscA>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	16 16       	cp	r1, r22
 602:	17 06       	cpc	r1, r23
 604:	18 06       	cpc	r1, r24
 606:	09 06       	cpc	r0, r25
 608:	08 95       	ret

0000060a <__fp_pscB>:
 60a:	00 24       	eor	r0, r0
 60c:	0a 94       	dec	r0
 60e:	12 16       	cp	r1, r18
 610:	13 06       	cpc	r1, r19
 612:	14 06       	cpc	r1, r20
 614:	05 06       	cpc	r0, r21
 616:	08 95       	ret

00000618 <__fp_round>:
 618:	09 2e       	mov	r0, r25
 61a:	03 94       	inc	r0
 61c:	00 0c       	add	r0, r0
 61e:	11 f4       	brne	.+4      	; 0x624 <__fp_round+0xc>
 620:	88 23       	and	r24, r24
 622:	52 f0       	brmi	.+20     	; 0x638 <__fp_round+0x20>
 624:	bb 0f       	add	r27, r27
 626:	40 f4       	brcc	.+16     	; 0x638 <__fp_round+0x20>
 628:	bf 2b       	or	r27, r31
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0x18>
 62c:	60 ff       	sbrs	r22, 0
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__fp_round+0x20>
 630:	6f 5f       	subi	r22, 0xFF	; 255
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	8f 4f       	sbci	r24, 0xFF	; 255
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	08 95       	ret

0000063a <_exit>:
 63a:	f8 94       	cli

0000063c <__stop_program>:
 63c:	ff cf       	rjmp	.-2      	; 0x63c <__stop_program>
