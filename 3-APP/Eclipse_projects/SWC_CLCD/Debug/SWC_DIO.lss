
SWC_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000428  0000049c  2**0
                  ALLOC, LOAD, DATA
  2 .stab         00000a08  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000918  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00001810  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  000021f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00002271  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
  64:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:


}
*/
u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinValue+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinValue+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  7e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinValue+0x1c>
  86:	f1 c0       	rjmp	.+482    	; 0x26a <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinValue+0x24>
  8e:	71 c0       	rjmp	.+226    	; 0x172 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_u8SetPinValue+0x32>
  9c:	52 c0       	rjmp	.+164    	; 0x142 <DIO_u8SetPinValue+0xd6>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	91 05       	cpc	r25, r1
  a2:	0c f0       	brlt	.+2      	; 0xa6 <DIO_u8SetPinValue+0x3a>
  a4:	64 c0       	rjmp	.+200    	; 0x16e <DIO_u8SetPinValue+0x102>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	a9 f1       	breq	.+106    	; 0x116 <DIO_u8SetPinValue+0xaa>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	0c f0       	brlt	.+2      	; 0xb4 <DIO_u8SetPinValue+0x48>
  b2:	5d c0       	rjmp	.+186    	; 0x16e <DIO_u8SetPinValue+0x102>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	19 f0       	breq	.+6      	; 0xbe <DIO_u8SetPinValue+0x52>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b9 f0       	breq	.+46     	; 0xea <DIO_u8SetPinValue+0x7e>
  bc:	58 c0       	rjmp	.+176    	; 0x16e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	48 2f       	mov	r20, r24
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_u8SetPinValue+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_u8SetPinValue+0x68>
  dc:	24 2f       	mov	r18, r20
  de:	28 2b       	or	r18, r24
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	c2 c0       	rjmp	.+388    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x94>
 108:	24 2f       	mov	r18, r20
 10a:	28 2b       	or	r18, r24
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	ac c0       	rjmp	.+344    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	96 c0       	rjmp	.+300    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinValue+0xf0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinValue+0xec>
 160:	24 2f       	mov	r18, r20
 162:	28 2b       	or	r18, r24
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	80 c0       	rjmp	.+256    	; 0x26e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	7e c0       	rjmp	.+252    	; 0x26e <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	88 23       	and	r24, r24
 176:	09 f0       	breq	.+2      	; 0x17a <DIO_u8SetPinValue+0x10e>
 178:	75 c0       	rjmp	.+234    	; 0x264 <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	88 2f       	mov	r24, r24
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	91 05       	cpc	r25, r1
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_u8SetPinValue+0x11c>
 186:	55 c0       	rjmp	.+170    	; 0x232 <DIO_u8SetPinValue+0x1c6>
 188:	85 30       	cpi	r24, 0x05	; 5
 18a:	91 05       	cpc	r25, r1
 18c:	0c f0       	brlt	.+2      	; 0x190 <DIO_u8SetPinValue+0x124>
 18e:	68 c0       	rjmp	.+208    	; 0x260 <DIO_u8SetPinValue+0x1f4>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	91 05       	cpc	r25, r1
 194:	b9 f1       	breq	.+110    	; 0x204 <DIO_u8SetPinValue+0x198>
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	91 05       	cpc	r25, r1
 19a:	0c f0       	brlt	.+2      	; 0x19e <DIO_u8SetPinValue+0x132>
 19c:	61 c0       	rjmp	.+194    	; 0x260 <DIO_u8SetPinValue+0x1f4>
 19e:	00 97       	sbiw	r24, 0x00	; 0
 1a0:	19 f0       	breq	.+6      	; 0x1a8 <DIO_u8SetPinValue+0x13c>
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	c1 f0       	breq	.+48     	; 0x1d6 <DIO_u8SetPinValue+0x16a>
 1a6:	5c c0       	rjmp	.+184    	; 0x260 <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1a8:	8b e3       	ldi	r24, 0x3B	; 59
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	48 2f       	mov	r20, r24
 1b2:	8b 81       	ldd	r24, Y+3	; 0x03
 1b4:	28 2f       	mov	r18, r24
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_u8SetPinValue+0x156>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	2a 95       	dec	r18
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_u8SetPinValue+0x152>
 1c6:	80 95       	com	r24
 1c8:	24 2f       	mov	r18, r20
 1ca:	28 23       	and	r18, r24
 1cc:	8b e3       	ldi	r24, 0x3B	; 59
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
 1d4:	4c c0       	rjmp	.+152    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1d6:	88 e3       	ldi	r24, 0x38	; 56
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_u8SetPinValue+0x184>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_u8SetPinValue+0x180>
 1f4:	80 95       	com	r24
 1f6:	24 2f       	mov	r18, r20
 1f8:	28 23       	and	r18, r24
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
 202:	35 c0       	rjmp	.+106    	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 204:	85 e3       	ldi	r24, 0x35	; 53
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_u8SetPinValue+0x1b2>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	2a 95       	dec	r18
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_u8SetPinValue+0x1ae>
 222:	80 95       	com	r24
 224:	24 2f       	mov	r18, r20
 226:	28 23       	and	r18, r24
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	20 83       	st	Z, r18
 230:	1e c0       	rjmp	.+60     	; 0x26e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	28 2f       	mov	r18, r24
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_u8SetPinValue+0x1e0>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_u8SetPinValue+0x1dc>
 250:	80 95       	com	r24
 252:	24 2f       	mov	r18, r20
 254:	28 23       	and	r18, r24
 256:	82 e3       	ldi	r24, 0x32	; 50
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
 25e:	07 c0       	rjmp	.+14     	; 0x26e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 260:	19 82       	std	Y+1, r1	; 0x01
 262:	05 c0       	rjmp	.+10     	; 0x26e <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 26e:	89 81       	ldd	r24, Y+1	; 0x01

}
 270:	0f 90       	pop	r0
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	00 d0       	rcall	.+0      	; 0x284 <DIO_u8SetPortValue+0x6>
 284:	0f 92       	push	r0
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	8a 83       	std	Y+2, r24	; 0x02
 28c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 28e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	84 30       	cpi	r24, 0x04	; 4
 298:	91 05       	cpc	r25, r1
 29a:	01 f1       	breq	.+64     	; 0x2dc <DIO_u8SetPortValue+0x5e>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	91 05       	cpc	r25, r1
 2a0:	1c f5       	brge	.+70     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
 2a2:	83 30       	cpi	r24, 0x03	; 3
 2a4:	91 05       	cpc	r25, r1
 2a6:	a1 f0       	breq	.+40     	; 0x2d0 <DIO_u8SetPortValue+0x52>
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	91 05       	cpc	r25, r1
 2ac:	ec f4       	brge	.+58     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
 2ae:	00 97       	sbiw	r24, 0x00	; 0
 2b0:	19 f0       	breq	.+6      	; 0x2b8 <DIO_u8SetPortValue+0x3a>
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <DIO_u8SetPortValue+0x46>
 2b6:	18 c0       	rjmp	.+48     	; 0x2e8 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2b8:	8b e3       	ldi	r24, 0x3B	; 59
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2b 81       	ldd	r18, Y+3	; 0x03
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18
 2c2:	15 c0       	rjmp	.+42     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2d0:	85 e3       	ldi	r24, 0x35	; 53
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	2b 81       	ldd	r18, Y+3	; 0x03
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
 2da:	09 c0       	rjmp	.+18     	; 0x2ee <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2dc:	82 e3       	ldi	r24, 0x32	; 50
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	2b 81       	ldd	r18, Y+3	; 0x03
 2e2:	fc 01       	movw	r30, r24
 2e4:	20 83       	st	Z, r18
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	89 83       	std	Y+1, r24	; 0x01
 2ec:	00 00       	nop
				}


	return Local_u8ErrorState;
 2ee:	89 81       	ldd	r24, Y+1	; 0x01

}
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	00 d0       	rcall	.+0      	; 0x302 <DIO_u8GetPinValue+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <DIO_u8GetPinValue+0x8>
 304:	0f 92       	push	r0
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	8a 83       	std	Y+2, r24	; 0x02
 30c:	6b 83       	std	Y+3, r22	; 0x03
 30e:	5d 83       	std	Y+5, r21	; 0x05
 310:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 312:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	9d 81       	ldd	r25, Y+5	; 0x05
 318:	89 2b       	or	r24, r25
 31a:	09 f4       	brne	.+2      	; 0x31e <DIO_u8GetPinValue+0x22>
 31c:	73 c0       	rjmp	.+230    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	88 30       	cpi	r24, 0x08	; 8
 322:	08 f0       	brcs	.+2      	; 0x326 <DIO_u8GetPinValue+0x2a>
 324:	6f c0       	rjmp	.+222    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
				{
					switch(Copy_u8Port)
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_u8GetPinValue+0x38>
 332:	4f c0       	rjmp	.+158    	; 0x3d2 <DIO_u8GetPinValue+0xd6>
 334:	85 30       	cpi	r24, 0x05	; 5
 336:	91 05       	cpc	r25, r1
 338:	0c f0       	brlt	.+2      	; 0x33c <DIO_u8GetPinValue+0x40>
 33a:	60 c0       	rjmp	.+192    	; 0x3fc <DIO_u8GetPinValue+0x100>
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	91 05       	cpc	r25, r1
 340:	99 f1       	breq	.+102    	; 0x3a8 <DIO_u8GetPinValue+0xac>
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	91 05       	cpc	r25, r1
 346:	0c f0       	brlt	.+2      	; 0x34a <DIO_u8GetPinValue+0x4e>
 348:	59 c0       	rjmp	.+178    	; 0x3fc <DIO_u8GetPinValue+0x100>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	19 f0       	breq	.+6      	; 0x354 <DIO_u8GetPinValue+0x58>
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	b1 f0       	breq	.+44     	; 0x37e <DIO_u8GetPinValue+0x82>
 352:	54 c0       	rjmp	.+168    	; 0x3fc <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 354:	89 e3       	ldi	r24, 0x39	; 57
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	fc 01       	movw	r30, r24
 35a:	80 81       	ld	r24, Z
 35c:	88 2f       	mov	r24, r24
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	2b 81       	ldd	r18, Y+3	; 0x03
 362:	22 2f       	mov	r18, r18
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_u8GetPinValue+0x70>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	2a 95       	dec	r18
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_u8GetPinValue+0x6c>
 370:	28 2f       	mov	r18, r24
 372:	21 70       	andi	r18, 0x01	; 1
 374:	8c 81       	ldd	r24, Y+4	; 0x04
 376:	9d 81       	ldd	r25, Y+5	; 0x05
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	42 c0       	rjmp	.+132    	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 37e:	86 e3       	ldi	r24, 0x36	; 54
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	fc 01       	movw	r30, r24
 384:	80 81       	ld	r24, Z
 386:	88 2f       	mov	r24, r24
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	2b 81       	ldd	r18, Y+3	; 0x03
 38c:	22 2f       	mov	r18, r18
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_u8GetPinValue+0x9a>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	2a 95       	dec	r18
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_u8GetPinValue+0x96>
 39a:	28 2f       	mov	r18, r24
 39c:	21 70       	andi	r18, 0x01	; 1
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	9d 81       	ldd	r25, Y+5	; 0x05
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18
 3a6:	2d c0       	rjmp	.+90     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3a8:	83 e3       	ldi	r24, 0x33	; 51
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	80 81       	ld	r24, Z
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	2b 81       	ldd	r18, Y+3	; 0x03
 3b6:	22 2f       	mov	r18, r18
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_u8GetPinValue+0xc4>
 3bc:	95 95       	asr	r25
 3be:	87 95       	ror	r24
 3c0:	2a 95       	dec	r18
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_u8GetPinValue+0xc0>
 3c4:	28 2f       	mov	r18, r24
 3c6:	21 70       	andi	r18, 0x01	; 1
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	9d 81       	ldd	r25, Y+5	; 0x05
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
 3d0:	18 c0       	rjmp	.+48     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	80 81       	ld	r24, Z
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2b 81       	ldd	r18, Y+3	; 0x03
 3e0:	22 2f       	mov	r18, r18
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_u8GetPinValue+0xee>
 3e6:	95 95       	asr	r25
 3e8:	87 95       	ror	r24
 3ea:	2a 95       	dec	r18
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_u8GetPinValue+0xea>
 3ee:	28 2f       	mov	r18, r24
 3f0:	21 70       	andi	r18, 0x01	; 1
 3f2:	8c 81       	ldd	r24, Y+4	; 0x04
 3f4:	9d 81       	ldd	r25, Y+5	; 0x05
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					     default : Local_u8ErrorState=1; break;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	89 83       	std	Y+1, r24	; 0x01
 400:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 402:	02 c0       	rjmp	.+4      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 408:	89 81       	ldd	r24, Y+1	; 0x01


}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <main>:




void main(void)
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62

while(1)
 422:	ff cf       	rjmp	.-2      	; 0x422 <main+0x8>

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
