
SevSeg_Ass1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000008ae  00000922  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000a44  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e91  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002239  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00002288  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000532  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004cb  00000000  00000000  000027fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000115  00000000  00000000  00002cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<util/delay.h>
#include"STD_TYPES.h"
#include"BIT_MATH.h"
//Assignment1
void main()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	c7 5a       	subi	r28, 0xA7	; 167
  8c:	d1 09       	sbc	r29, r1
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61

   DDRA=0b00000111;
  98:	8a e3       	ldi	r24, 0x3A	; 58
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	27 e0       	ldi	r18, 0x07	; 7
  9e:	dc 01       	movw	r26, r24
  a0:	2c 93       	st	X, r18
  /*set first three bits of port A is output& next three bits are input for switchs
   A0 for green, A1 for yellow, A2 for red*/
   DDRB=0b11111111;/*first seven segment (common cathode) to display*/
  a2:	87 e3       	ldi	r24, 0x37	; 55
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
   DDRC=0b11111111;/*second seven segment (common cathode)*/
  ac:	84 e3       	ldi	r24, 0x34	; 52
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	dc 01       	movw	r26, r24
  b4:	2c 93       	st	X, r18

   u16 SevSegArr_1[]={0b01101101,0b01100110,0b01001111,0b01011011,0b00000110,0b00111111,
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	e0 e6       	ldi	r30, 0x60	; 96
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	de 01       	movw	r26, r28
  be:	9c 96       	adiw	r26, 0x2c	; 44
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	8a 95       	dec	r24
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x3e>
      	0b01101111,0b01111111,0b01001111,0b01111101,
  		0b01101101,0b01100110, 0b01001111,0b01011011,
  		0b00000110,0b00111111};


      	 u16 SevSegArr_2[]={0b00000110,0b00000110,0b00000110,0b00000110,0b00000110,0b00000110,
  c8:	ce 01       	movw	r24, r28
  ca:	84 5b       	subi	r24, 0xB4	; 180
  cc:	9f 4f       	sbci	r25, 0xFF	; 255
  ce:	20 e2       	ldi	r18, 0x20	; 32
  d0:	e0 e8       	ldi	r30, 0x80	; 128
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	dc 01       	movw	r26, r24
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	2a 95       	dec	r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x54>

	while(1)
	{

    	 //turn on green led for 15 seconds
    	 SET_BIT(PORTA,0);
  de:	8b e3       	ldi	r24, 0x3B	; 59
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	20 81       	ld	r18, Z
  e6:	8b e3       	ldi	r24, 0x3B	; 59
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	21 60       	ori	r18, 0x01	; 1
  ec:	dc 01       	movw	r26, r24
  ee:	2c 93       	st	X, r18


     //count down from 15 to 0 on 2 sev_segemnts
		 for( i=0;i<=15;i++)
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	d5 c0       	rjmp	.+426    	; 0x29e <main+0x21c>
		 {
			PORTB=SevSegArr_1[i];
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	88 2f       	mov	r24, r24
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	9e 01       	movw	r18, r28
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	82 0f       	add	r24, r18
 106:	93 1f       	adc	r25, r19
 108:	8b 96       	adiw	r24, 0x2b	; 43
 10a:	fc 01       	movw	r30, r24
 10c:	20 81       	ld	r18, Z
 10e:	31 81       	ldd	r19, Z+1	; 0x01
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	dc 01       	movw	r26, r24
 116:	2c 93       	st	X, r18
			PORTC=SevSegArr_2[i];
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	9e 01       	movw	r18, r28
 120:	24 5b       	subi	r18, 0xB4	; 180
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	82 0f       	add	r24, r18
 12a:	93 1f       	adc	r25, r19
 12c:	fc 01       	movw	r30, r24
 12e:	20 81       	ld	r18, Z
 130:	31 81       	ldd	r19, Z+1	; 0x01
 132:	85 e3       	ldi	r24, 0x35	; 53
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	dc 01       	movw	r26, r24
 138:	2c 93       	st	X, r18
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	a8 ec       	ldi	r26, 0xC8	; 200
 140:	b2 e4       	ldi	r27, 0x42	; 66
 142:	8a 83       	std	Y+2, r24	; 0x02
 144:	9b 83       	std	Y+3, r25	; 0x03
 146:	ac 83       	std	Y+4, r26	; 0x04
 148:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	4a ef       	ldi	r20, 0xFA	; 250
 150:	54 e4       	ldi	r21, 0x44	; 68
 152:	6a 81       	ldd	r22, Y+2	; 0x02
 154:	7b 81       	ldd	r23, Y+3	; 0x03
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	0e 94 c0 03 	call	0x780	; 0x780 <__mulsf3>
 15e:	ec 96       	adiw	r28, 0x3c	; 60
 160:	6c af       	std	Y+60, r22	; 0x3c
 162:	7d af       	std	Y+61, r23	; 0x3d
 164:	8e af       	std	Y+62, r24	; 0x3e
 166:	9f af       	std	Y+63, r25	; 0x3f
 168:	ec 97       	sbiw	r28, 0x3c	; 60
 16a:	ec 96       	adiw	r28, 0x3c	; 60
 16c:	8c ad       	ldd	r24, Y+60	; 0x3c
 16e:	9d ad       	ldd	r25, Y+61	; 0x3d
 170:	ae ad       	ldd	r26, Y+62	; 0x3e
 172:	bf ad       	ldd	r27, Y+63	; 0x3f
 174:	ec 97       	sbiw	r28, 0x3c	; 60
 176:	8e 83       	std	Y+6, r24	; 0x06
 178:	9f 83       	std	Y+7, r25	; 0x07
 17a:	a8 87       	std	Y+8, r26	; 0x08
 17c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e8       	ldi	r20, 0x80	; 128
 184:	5f e3       	ldi	r21, 0x3F	; 63
 186:	6e 81       	ldd	r22, Y+6	; 0x06
 188:	7f 81       	ldd	r23, Y+7	; 0x07
 18a:	88 85       	ldd	r24, Y+8	; 0x08
 18c:	99 85       	ldd	r25, Y+9	; 0x09
 18e:	0e 94 3a 03 	call	0x674	; 0x674 <__cmpsf2>
 192:	88 23       	and	r24, r24
 194:	2c f4       	brge	.+10     	; 0x1a0 <main+0x11e>
		__ticks = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	9b 87       	std	Y+11, r25	; 0x0b
 19c:	8a 87       	std	Y+10, r24	; 0x0a
 19e:	71 c0       	rjmp	.+226    	; 0x282 <main+0x200>
	else if (__tmp > 65535)
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	3f ef       	ldi	r19, 0xFF	; 255
 1a4:	4f e7       	ldi	r20, 0x7F	; 127
 1a6:	57 e4       	ldi	r21, 0x47	; 71
 1a8:	6e 81       	ldd	r22, Y+6	; 0x06
 1aa:	7f 81       	ldd	r23, Y+7	; 0x07
 1ac:	88 85       	ldd	r24, Y+8	; 0x08
 1ae:	99 85       	ldd	r25, Y+9	; 0x09
 1b0:	0e 94 bb 03 	call	0x776	; 0x776 <__gesf2>
 1b4:	18 16       	cp	r1, r24
 1b6:	0c f0       	brlt	.+2      	; 0x1ba <main+0x138>
 1b8:	4e c0       	rjmp	.+156    	; 0x256 <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e2       	ldi	r20, 0x20	; 32
 1c0:	51 e4       	ldi	r21, 0x41	; 65
 1c2:	6a 81       	ldd	r22, Y+2	; 0x02
 1c4:	7b 81       	ldd	r23, Y+3	; 0x03
 1c6:	8c 81       	ldd	r24, Y+4	; 0x04
 1c8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ca:	0e 94 c0 03 	call	0x780	; 0x780 <__mulsf3>
 1ce:	c4 58       	subi	r28, 0x84	; 132
 1d0:	df 4f       	sbci	r29, 0xFF	; 255
 1d2:	68 83       	st	Y, r22
 1d4:	79 83       	std	Y+1, r23	; 0x01
 1d6:	8a 83       	std	Y+2, r24	; 0x02
 1d8:	9b 83       	std	Y+3, r25	; 0x03
 1da:	cc 57       	subi	r28, 0x7C	; 124
 1dc:	d0 40       	sbci	r29, 0x00	; 0
 1de:	c4 58       	subi	r28, 0x84	; 132
 1e0:	df 4f       	sbci	r29, 0xFF	; 255
 1e2:	88 81       	ld	r24, Y
 1e4:	99 81       	ldd	r25, Y+1	; 0x01
 1e6:	aa 81       	ldd	r26, Y+2	; 0x02
 1e8:	bb 81       	ldd	r27, Y+3	; 0x03
 1ea:	cc 57       	subi	r28, 0x7C	; 124
 1ec:	d0 40       	sbci	r29, 0x00	; 0
 1ee:	e0 96       	adiw	r28, 0x30	; 48
 1f0:	8c af       	std	Y+60, r24	; 0x3c
 1f2:	9d af       	std	Y+61, r25	; 0x3d
 1f4:	ae af       	std	Y+62, r26	; 0x3e
 1f6:	bf af       	std	Y+63, r27	; 0x3f
 1f8:	e0 97       	sbiw	r28, 0x30	; 48
 1fa:	e0 96       	adiw	r28, 0x30	; 48
 1fc:	6c ad       	ldd	r22, Y+60	; 0x3c
 1fe:	7d ad       	ldd	r23, Y+61	; 0x3d
 200:	8e ad       	ldd	r24, Y+62	; 0x3e
 202:	9f ad       	ldd	r25, Y+63	; 0x3f
 204:	e0 97       	sbiw	r28, 0x30	; 48
 206:	0e 94 3f 03 	call	0x67e	; 0x67e <__fixunssfsi>
 20a:	c0 58       	subi	r28, 0x80	; 128
 20c:	df 4f       	sbci	r29, 0xFF	; 255
 20e:	68 83       	st	Y, r22
 210:	79 83       	std	Y+1, r23	; 0x01
 212:	8a 83       	std	Y+2, r24	; 0x02
 214:	9b 83       	std	Y+3, r25	; 0x03
 216:	c0 58       	subi	r28, 0x80	; 128
 218:	d0 40       	sbci	r29, 0x00	; 0
 21a:	c0 58       	subi	r28, 0x80	; 128
 21c:	df 4f       	sbci	r29, 0xFF	; 255
 21e:	a8 81       	ld	r26, Y
 220:	b9 81       	ldd	r27, Y+1	; 0x01
 222:	c0 58       	subi	r28, 0x80	; 128
 224:	d0 40       	sbci	r29, 0x00	; 0
 226:	bb 87       	std	Y+11, r27	; 0x0b
 228:	aa 87       	std	Y+10, r26	; 0x0a
		while(__ticks)
 22a:	10 c0       	rjmp	.+32     	; 0x24c <main+0x1ca>
 22c:	88 ec       	ldi	r24, 0xC8	; 200
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	9d 87       	std	Y+13, r25	; 0x0d
 232:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 234:	8c 85       	ldd	r24, Y+12	; 0x0c
 236:	9d 85       	ldd	r25, Y+13	; 0x0d
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x1b6>
 23c:	9d 87       	std	Y+13, r25	; 0x0d
 23e:	8c 87       	std	Y+12, r24	; 0x0c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 240:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 242:	8a 85       	ldd	r24, Y+10	; 0x0a
 244:	9b 85       	ldd	r25, Y+11	; 0x0b
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	9b 87       	std	Y+11, r25	; 0x0b
 24a:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 24c:	8a 85       	ldd	r24, Y+10	; 0x0a
 24e:	9b 85       	ldd	r25, Y+11	; 0x0b
 250:	89 2b       	or	r24, r25
 252:	61 f7       	brne	.-40     	; 0x22c <main+0x1aa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 254:	21 c0       	rjmp	.+66     	; 0x298 <main+0x216>
	}
	else
		__ticks = (uint16_t)__tmp;
 256:	6e 81       	ldd	r22, Y+6	; 0x06
 258:	7f 81       	ldd	r23, Y+7	; 0x07
 25a:	88 85       	ldd	r24, Y+8	; 0x08
 25c:	99 85       	ldd	r25, Y+9	; 0x09
 25e:	0e 94 3f 03 	call	0x67e	; 0x67e <__fixunssfsi>
 262:	cc 57       	subi	r28, 0x7C	; 124
 264:	df 4f       	sbci	r29, 0xFF	; 255
 266:	68 83       	st	Y, r22
 268:	79 83       	std	Y+1, r23	; 0x01
 26a:	8a 83       	std	Y+2, r24	; 0x02
 26c:	9b 83       	std	Y+3, r25	; 0x03
 26e:	c4 58       	subi	r28, 0x84	; 132
 270:	d0 40       	sbci	r29, 0x00	; 0
 272:	cc 57       	subi	r28, 0x7C	; 124
 274:	df 4f       	sbci	r29, 0xFF	; 255
 276:	e8 81       	ld	r30, Y
 278:	f9 81       	ldd	r31, Y+1	; 0x01
 27a:	c4 58       	subi	r28, 0x84	; 132
 27c:	d0 40       	sbci	r29, 0x00	; 0
 27e:	fb 87       	std	Y+11, r31	; 0x0b
 280:	ea 87       	std	Y+10, r30	; 0x0a
 282:	8a 85       	ldd	r24, Y+10	; 0x0a
 284:	9b 85       	ldd	r25, Y+11	; 0x0b
 286:	9f 87       	std	Y+15, r25	; 0x0f
 288:	8e 87       	std	Y+14, r24	; 0x0e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 28a:	8e 85       	ldd	r24, Y+14	; 0x0e
 28c:	9f 85       	ldd	r25, Y+15	; 0x0f
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0x20c>
 292:	9f 87       	std	Y+15, r25	; 0x0f
 294:	8e 87       	std	Y+14, r24	; 0x0e
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 296:	00 00       	nop
    	 //turn on green led for 15 seconds
    	 SET_BIT(PORTA,0);


     //count down from 15 to 0 on 2 sev_segemnts
		 for( i=0;i<=15;i++)
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	80 31       	cpi	r24, 0x10	; 16
 2a2:	08 f4       	brcc	.+2      	; 0x2a6 <main+0x224>
 2a4:	27 cf       	rjmp	.-434    	; 0xf4 <main+0x72>
			PORTB=SevSegArr_1[i];
			PORTC=SevSegArr_2[i];
			_delay_ms(100);
         }
		 //turn off green led
		 CLR_BIT(PORTA,0);
 2a6:	8b e3       	ldi	r24, 0x3B	; 59
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	dc 01       	movw	r26, r24
 2ac:	2c 91       	ld	r18, X
 2ae:	8b e3       	ldi	r24, 0x3B	; 59
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2e 7f       	andi	r18, 0xFE	; 254
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18



		 //turn on yellow led for 3 seconds
		 SET_BIT(PORTA,1);
 2b8:	8b e3       	ldi	r24, 0x3B	; 59
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	dc 01       	movw	r26, r24
 2be:	2c 91       	ld	r18, X
 2c0:	8b e3       	ldi	r24, 0x3B	; 59
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	22 60       	ori	r18, 0x02	; 2
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18

	     //count down from 3 to 0 on 2 sev_segemnts
		 for( i=2;i<=4;i++)
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	89 83       	std	Y+1, r24	; 0x01
 2ce:	d3 c0       	rjmp	.+422    	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
				 {
					PORTB=SevSegArr_1[i];
 2d0:	89 81       	ldd	r24, Y+1	; 0x01
 2d2:	88 2f       	mov	r24, r24
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	9e 01       	movw	r18, r28
 2dc:	2f 5f       	subi	r18, 0xFF	; 255
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	82 0f       	add	r24, r18
 2e2:	93 1f       	adc	r25, r19
 2e4:	8b 96       	adiw	r24, 0x2b	; 43
 2e6:	dc 01       	movw	r26, r24
 2e8:	2d 91       	ld	r18, X+
 2ea:	3c 91       	ld	r19, X
 2ec:	88 e3       	ldi	r24, 0x38	; 56
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
					PORTC=SevSegArr_2[7];
 2f4:	ce 01       	movw	r24, r28
 2f6:	84 5b       	subi	r24, 0xB4	; 180
 2f8:	9f 4f       	sbci	r25, 0xFF	; 255
 2fa:	dc 01       	movw	r26, r24
 2fc:	1e 96       	adiw	r26, 0x0e	; 14
 2fe:	2d 91       	ld	r18, X+
 300:	3c 91       	ld	r19, X
 302:	85 e3       	ldi	r24, 0x35	; 53
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	20 83       	st	Z, r18
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	a8 ec       	ldi	r26, 0xC8	; 200
 310:	b2 e4       	ldi	r27, 0x42	; 66
 312:	88 8b       	std	Y+16, r24	; 0x10
 314:	99 8b       	std	Y+17, r25	; 0x11
 316:	aa 8b       	std	Y+18, r26	; 0x12
 318:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	4a ef       	ldi	r20, 0xFA	; 250
 320:	54 e4       	ldi	r21, 0x44	; 68
 322:	68 89       	ldd	r22, Y+16	; 0x10
 324:	79 89       	ldd	r23, Y+17	; 0x11
 326:	8a 89       	ldd	r24, Y+18	; 0x12
 328:	9b 89       	ldd	r25, Y+19	; 0x13
 32a:	0e 94 c0 03 	call	0x780	; 0x780 <__mulsf3>
 32e:	c8 57       	subi	r28, 0x78	; 120
 330:	df 4f       	sbci	r29, 0xFF	; 255
 332:	68 83       	st	Y, r22
 334:	79 83       	std	Y+1, r23	; 0x01
 336:	8a 83       	std	Y+2, r24	; 0x02
 338:	9b 83       	std	Y+3, r25	; 0x03
 33a:	c8 58       	subi	r28, 0x88	; 136
 33c:	d0 40       	sbci	r29, 0x00	; 0
 33e:	c8 57       	subi	r28, 0x78	; 120
 340:	df 4f       	sbci	r29, 0xFF	; 255
 342:	88 81       	ld	r24, Y
 344:	99 81       	ldd	r25, Y+1	; 0x01
 346:	aa 81       	ldd	r26, Y+2	; 0x02
 348:	bb 81       	ldd	r27, Y+3	; 0x03
 34a:	c8 58       	subi	r28, 0x88	; 136
 34c:	d0 40       	sbci	r29, 0x00	; 0
 34e:	8c 8b       	std	Y+20, r24	; 0x14
 350:	9d 8b       	std	Y+21, r25	; 0x15
 352:	ae 8b       	std	Y+22, r26	; 0x16
 354:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	40 e8       	ldi	r20, 0x80	; 128
 35c:	5f e3       	ldi	r21, 0x3F	; 63
 35e:	6c 89       	ldd	r22, Y+20	; 0x14
 360:	7d 89       	ldd	r23, Y+21	; 0x15
 362:	8e 89       	ldd	r24, Y+22	; 0x16
 364:	9f 89       	ldd	r25, Y+23	; 0x17
 366:	0e 94 3a 03 	call	0x674	; 0x674 <__cmpsf2>
 36a:	88 23       	and	r24, r24
 36c:	2c f4       	brge	.+10     	; 0x378 <main+0x2f6>
		__ticks = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	99 8f       	std	Y+25, r25	; 0x19
 374:	88 8f       	std	Y+24, r24	; 0x18
 376:	71 c0       	rjmp	.+226    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
	else if (__tmp > 65535)
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	3f ef       	ldi	r19, 0xFF	; 255
 37c:	4f e7       	ldi	r20, 0x7F	; 127
 37e:	57 e4       	ldi	r21, 0x47	; 71
 380:	6c 89       	ldd	r22, Y+20	; 0x14
 382:	7d 89       	ldd	r23, Y+21	; 0x15
 384:	8e 89       	ldd	r24, Y+22	; 0x16
 386:	9f 89       	ldd	r25, Y+23	; 0x17
 388:	0e 94 bb 03 	call	0x776	; 0x776 <__gesf2>
 38c:	18 16       	cp	r1, r24
 38e:	0c f0       	brlt	.+2      	; 0x392 <main+0x310>
 390:	4e c0       	rjmp	.+156    	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	40 e2       	ldi	r20, 0x20	; 32
 398:	51 e4       	ldi	r21, 0x41	; 65
 39a:	68 89       	ldd	r22, Y+16	; 0x10
 39c:	79 89       	ldd	r23, Y+17	; 0x11
 39e:	8a 89       	ldd	r24, Y+18	; 0x12
 3a0:	9b 89       	ldd	r25, Y+19	; 0x13
 3a2:	0e 94 c0 03 	call	0x780	; 0x780 <__mulsf3>
 3a6:	c4 57       	subi	r28, 0x74	; 116
 3a8:	df 4f       	sbci	r29, 0xFF	; 255
 3aa:	68 83       	st	Y, r22
 3ac:	79 83       	std	Y+1, r23	; 0x01
 3ae:	8a 83       	std	Y+2, r24	; 0x02
 3b0:	9b 83       	std	Y+3, r25	; 0x03
 3b2:	cc 58       	subi	r28, 0x8C	; 140
 3b4:	d0 40       	sbci	r29, 0x00	; 0
 3b6:	c4 57       	subi	r28, 0x74	; 116
 3b8:	df 4f       	sbci	r29, 0xFF	; 255
 3ba:	88 81       	ld	r24, Y
 3bc:	99 81       	ldd	r25, Y+1	; 0x01
 3be:	aa 81       	ldd	r26, Y+2	; 0x02
 3c0:	bb 81       	ldd	r27, Y+3	; 0x03
 3c2:	cc 58       	subi	r28, 0x8C	; 140
 3c4:	d0 40       	sbci	r29, 0x00	; 0
 3c6:	e4 96       	adiw	r28, 0x34	; 52
 3c8:	8c af       	std	Y+60, r24	; 0x3c
 3ca:	9d af       	std	Y+61, r25	; 0x3d
 3cc:	ae af       	std	Y+62, r26	; 0x3e
 3ce:	bf af       	std	Y+63, r27	; 0x3f
 3d0:	e4 97       	sbiw	r28, 0x34	; 52
 3d2:	e4 96       	adiw	r28, 0x34	; 52
 3d4:	6c ad       	ldd	r22, Y+60	; 0x3c
 3d6:	7d ad       	ldd	r23, Y+61	; 0x3d
 3d8:	8e ad       	ldd	r24, Y+62	; 0x3e
 3da:	9f ad       	ldd	r25, Y+63	; 0x3f
 3dc:	e4 97       	sbiw	r28, 0x34	; 52
 3de:	0e 94 3f 03 	call	0x67e	; 0x67e <__fixunssfsi>
 3e2:	c0 57       	subi	r28, 0x70	; 112
 3e4:	df 4f       	sbci	r29, 0xFF	; 255
 3e6:	68 83       	st	Y, r22
 3e8:	79 83       	std	Y+1, r23	; 0x01
 3ea:	8a 83       	std	Y+2, r24	; 0x02
 3ec:	9b 83       	std	Y+3, r25	; 0x03
 3ee:	c0 59       	subi	r28, 0x90	; 144
 3f0:	d0 40       	sbci	r29, 0x00	; 0
 3f2:	c0 57       	subi	r28, 0x70	; 112
 3f4:	df 4f       	sbci	r29, 0xFF	; 255
 3f6:	a8 81       	ld	r26, Y
 3f8:	b9 81       	ldd	r27, Y+1	; 0x01
 3fa:	c0 59       	subi	r28, 0x90	; 144
 3fc:	d0 40       	sbci	r29, 0x00	; 0
 3fe:	b9 8f       	std	Y+25, r27	; 0x19
 400:	a8 8f       	std	Y+24, r26	; 0x18
		while(__ticks)
 402:	10 c0       	rjmp	.+32     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 404:	88 ec       	ldi	r24, 0xC8	; 200
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	9b 8f       	std	Y+27, r25	; 0x1b
 40a:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 40c:	8a 8d       	ldd	r24, Y+26	; 0x1a
 40e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 414:	9b 8f       	std	Y+27, r25	; 0x1b
 416:	8a 8f       	std	Y+26, r24	; 0x1a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 418:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 41a:	88 8d       	ldd	r24, Y+24	; 0x18
 41c:	99 8d       	ldd	r25, Y+25	; 0x19
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	99 8f       	std	Y+25, r25	; 0x19
 422:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 424:	88 8d       	ldd	r24, Y+24	; 0x18
 426:	99 8d       	ldd	r25, Y+25	; 0x19
 428:	89 2b       	or	r24, r25
 42a:	61 f7       	brne	.-40     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 42c:	21 c0       	rjmp	.+66     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
	}
	else
		__ticks = (uint16_t)__tmp;
 42e:	6c 89       	ldd	r22, Y+20	; 0x14
 430:	7d 89       	ldd	r23, Y+21	; 0x15
 432:	8e 89       	ldd	r24, Y+22	; 0x16
 434:	9f 89       	ldd	r25, Y+23	; 0x17
 436:	0e 94 3f 03 	call	0x67e	; 0x67e <__fixunssfsi>
 43a:	cc 56       	subi	r28, 0x6C	; 108
 43c:	df 4f       	sbci	r29, 0xFF	; 255
 43e:	68 83       	st	Y, r22
 440:	79 83       	std	Y+1, r23	; 0x01
 442:	8a 83       	std	Y+2, r24	; 0x02
 444:	9b 83       	std	Y+3, r25	; 0x03
 446:	c4 59       	subi	r28, 0x94	; 148
 448:	d0 40       	sbci	r29, 0x00	; 0
 44a:	cc 56       	subi	r28, 0x6C	; 108
 44c:	df 4f       	sbci	r29, 0xFF	; 255
 44e:	e8 81       	ld	r30, Y
 450:	f9 81       	ldd	r31, Y+1	; 0x01
 452:	c4 59       	subi	r28, 0x94	; 148
 454:	d0 40       	sbci	r29, 0x00	; 0
 456:	f9 8f       	std	Y+25, r31	; 0x19
 458:	e8 8f       	std	Y+24, r30	; 0x18
 45a:	88 8d       	ldd	r24, Y+24	; 0x18
 45c:	99 8d       	ldd	r25, Y+25	; 0x19
 45e:	9d 8f       	std	Y+29, r25	; 0x1d
 460:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 462:	8c 8d       	ldd	r24, Y+28	; 0x1c
 464:	9d 8d       	ldd	r25, Y+29	; 0x1d
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
 46a:	9d 8f       	std	Y+29, r25	; 0x1d
 46c:	8c 8f       	std	Y+28, r24	; 0x1c
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 46e:	00 00       	nop

		 //turn on yellow led for 3 seconds
		 SET_BIT(PORTA,1);

	     //count down from 3 to 0 on 2 sev_segemnts
		 for( i=2;i<=4;i++)
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	85 30       	cpi	r24, 0x05	; 5
 47a:	08 f4       	brcc	.+2      	; 0x47e <__FUSE_REGION_LENGTH__+0x7e>
 47c:	29 cf       	rjmp	.-430    	; 0x2d0 <main+0x24e>
					PORTC=SevSegArr_2[7];
					_delay_ms(100);
		         }

		 //turn off yellow led
		 CLR_BIT(PORTA,1);
 47e:	8b e3       	ldi	r24, 0x3B	; 59
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	dc 01       	movw	r26, r24
 484:	2c 91       	ld	r18, X
 486:	8b e3       	ldi	r24, 0x3B	; 59
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	2d 7f       	andi	r18, 0xFD	; 253
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18




		 //turn on RED led for 15 seconds
		 SET_BIT(PORTA,2);
 490:	8b e3       	ldi	r24, 0x3B	; 59
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	dc 01       	movw	r26, r24
 496:	2c 91       	ld	r18, X
 498:	8b e3       	ldi	r24, 0x3B	; 59
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	24 60       	ori	r18, 0x04	; 4
 49e:	fc 01       	movw	r30, r24
 4a0:	20 83       	st	Z, r18
		 //count down from 15 to 0 on 2 sev_segemnts
		 for( i=0;i<=15;i++)
 4a2:	19 82       	std	Y+1, r1	; 0x01
 4a4:	d9 c0       	rjmp	.+434    	; 0x658 <__FUSE_REGION_LENGTH__+0x258>
		 		 {
		 			PORTB=SevSegArr_1[i];
 4a6:	89 81       	ldd	r24, Y+1	; 0x01
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	9e 01       	movw	r18, r28
 4b2:	2f 5f       	subi	r18, 0xFF	; 255
 4b4:	3f 4f       	sbci	r19, 0xFF	; 255
 4b6:	82 0f       	add	r24, r18
 4b8:	93 1f       	adc	r25, r19
 4ba:	8b 96       	adiw	r24, 0x2b	; 43
 4bc:	dc 01       	movw	r26, r24
 4be:	2d 91       	ld	r18, X+
 4c0:	3c 91       	ld	r19, X
 4c2:	88 e3       	ldi	r24, 0x38	; 56
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
		 			PORTC=SevSegArr_2[i];
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	9e 01       	movw	r18, r28
 4d2:	24 5b       	subi	r18, 0xB4	; 180
 4d4:	3f 4f       	sbci	r19, 0xFF	; 255
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	82 0f       	add	r24, r18
 4dc:	93 1f       	adc	r25, r19
 4de:	dc 01       	movw	r26, r24
 4e0:	2d 91       	ld	r18, X+
 4e2:	3c 91       	ld	r19, X
 4e4:	85 e3       	ldi	r24, 0x35	; 53
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	a8 ec       	ldi	r26, 0xC8	; 200
 4f2:	b2 e4       	ldi	r27, 0x42	; 66
 4f4:	8e 8f       	std	Y+30, r24	; 0x1e
 4f6:	9f 8f       	std	Y+31, r25	; 0x1f
 4f8:	a8 a3       	std	Y+32, r26	; 0x20
 4fa:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	4a ef       	ldi	r20, 0xFA	; 250
 502:	54 e4       	ldi	r21, 0x44	; 68
 504:	6e 8d       	ldd	r22, Y+30	; 0x1e
 506:	7f 8d       	ldd	r23, Y+31	; 0x1f
 508:	88 a1       	ldd	r24, Y+32	; 0x20
 50a:	99 a1       	ldd	r25, Y+33	; 0x21
 50c:	0e 94 c0 03 	call	0x780	; 0x780 <__mulsf3>
 510:	c8 56       	subi	r28, 0x68	; 104
 512:	df 4f       	sbci	r29, 0xFF	; 255
 514:	68 83       	st	Y, r22
 516:	79 83       	std	Y+1, r23	; 0x01
 518:	8a 83       	std	Y+2, r24	; 0x02
 51a:	9b 83       	std	Y+3, r25	; 0x03
 51c:	c8 59       	subi	r28, 0x98	; 152
 51e:	d0 40       	sbci	r29, 0x00	; 0
 520:	c8 56       	subi	r28, 0x68	; 104
 522:	df 4f       	sbci	r29, 0xFF	; 255
 524:	88 81       	ld	r24, Y
 526:	99 81       	ldd	r25, Y+1	; 0x01
 528:	aa 81       	ldd	r26, Y+2	; 0x02
 52a:	bb 81       	ldd	r27, Y+3	; 0x03
 52c:	c8 59       	subi	r28, 0x98	; 152
 52e:	d0 40       	sbci	r29, 0x00	; 0
 530:	8a a3       	std	Y+34, r24	; 0x22
 532:	9b a3       	std	Y+35, r25	; 0x23
 534:	ac a3       	std	Y+36, r26	; 0x24
 536:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	40 e8       	ldi	r20, 0x80	; 128
 53e:	5f e3       	ldi	r21, 0x3F	; 63
 540:	6a a1       	ldd	r22, Y+34	; 0x22
 542:	7b a1       	ldd	r23, Y+35	; 0x23
 544:	8c a1       	ldd	r24, Y+36	; 0x24
 546:	9d a1       	ldd	r25, Y+37	; 0x25
 548:	0e 94 3a 03 	call	0x674	; 0x674 <__cmpsf2>
 54c:	88 23       	and	r24, r24
 54e:	2c f4       	brge	.+10     	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
		__ticks = 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	9f a3       	std	Y+39, r25	; 0x27
 556:	8e a3       	std	Y+38, r24	; 0x26
 558:	71 c0       	rjmp	.+226    	; 0x63c <__FUSE_REGION_LENGTH__+0x23c>
	else if (__tmp > 65535)
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	3f ef       	ldi	r19, 0xFF	; 255
 55e:	4f e7       	ldi	r20, 0x7F	; 127
 560:	57 e4       	ldi	r21, 0x47	; 71
 562:	6a a1       	ldd	r22, Y+34	; 0x22
 564:	7b a1       	ldd	r23, Y+35	; 0x23
 566:	8c a1       	ldd	r24, Y+36	; 0x24
 568:	9d a1       	ldd	r25, Y+37	; 0x25
 56a:	0e 94 bb 03 	call	0x776	; 0x776 <__gesf2>
 56e:	18 16       	cp	r1, r24
 570:	0c f0       	brlt	.+2      	; 0x574 <__FUSE_REGION_LENGTH__+0x174>
 572:	4e c0       	rjmp	.+156    	; 0x610 <__FUSE_REGION_LENGTH__+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	40 e2       	ldi	r20, 0x20	; 32
 57a:	51 e4       	ldi	r21, 0x41	; 65
 57c:	6e 8d       	ldd	r22, Y+30	; 0x1e
 57e:	7f 8d       	ldd	r23, Y+31	; 0x1f
 580:	88 a1       	ldd	r24, Y+32	; 0x20
 582:	99 a1       	ldd	r25, Y+33	; 0x21
 584:	0e 94 c0 03 	call	0x780	; 0x780 <__mulsf3>
 588:	c4 56       	subi	r28, 0x64	; 100
 58a:	df 4f       	sbci	r29, 0xFF	; 255
 58c:	68 83       	st	Y, r22
 58e:	79 83       	std	Y+1, r23	; 0x01
 590:	8a 83       	std	Y+2, r24	; 0x02
 592:	9b 83       	std	Y+3, r25	; 0x03
 594:	cc 59       	subi	r28, 0x9C	; 156
 596:	d0 40       	sbci	r29, 0x00	; 0
 598:	c4 56       	subi	r28, 0x64	; 100
 59a:	df 4f       	sbci	r29, 0xFF	; 255
 59c:	88 81       	ld	r24, Y
 59e:	99 81       	ldd	r25, Y+1	; 0x01
 5a0:	aa 81       	ldd	r26, Y+2	; 0x02
 5a2:	bb 81       	ldd	r27, Y+3	; 0x03
 5a4:	cc 59       	subi	r28, 0x9C	; 156
 5a6:	d0 40       	sbci	r29, 0x00	; 0
 5a8:	e8 96       	adiw	r28, 0x38	; 56
 5aa:	8c af       	std	Y+60, r24	; 0x3c
 5ac:	9d af       	std	Y+61, r25	; 0x3d
 5ae:	ae af       	std	Y+62, r26	; 0x3e
 5b0:	bf af       	std	Y+63, r27	; 0x3f
 5b2:	e8 97       	sbiw	r28, 0x38	; 56
 5b4:	e8 96       	adiw	r28, 0x38	; 56
 5b6:	6c ad       	ldd	r22, Y+60	; 0x3c
 5b8:	7d ad       	ldd	r23, Y+61	; 0x3d
 5ba:	8e ad       	ldd	r24, Y+62	; 0x3e
 5bc:	9f ad       	ldd	r25, Y+63	; 0x3f
 5be:	e8 97       	sbiw	r28, 0x38	; 56
 5c0:	0e 94 3f 03 	call	0x67e	; 0x67e <__fixunssfsi>
 5c4:	c0 56       	subi	r28, 0x60	; 96
 5c6:	df 4f       	sbci	r29, 0xFF	; 255
 5c8:	68 83       	st	Y, r22
 5ca:	79 83       	std	Y+1, r23	; 0x01
 5cc:	8a 83       	std	Y+2, r24	; 0x02
 5ce:	9b 83       	std	Y+3, r25	; 0x03
 5d0:	c0 5a       	subi	r28, 0xA0	; 160
 5d2:	d0 40       	sbci	r29, 0x00	; 0
 5d4:	c0 56       	subi	r28, 0x60	; 96
 5d6:	df 4f       	sbci	r29, 0xFF	; 255
 5d8:	a8 81       	ld	r26, Y
 5da:	b9 81       	ldd	r27, Y+1	; 0x01
 5dc:	c0 5a       	subi	r28, 0xA0	; 160
 5de:	d0 40       	sbci	r29, 0x00	; 0
 5e0:	bf a3       	std	Y+39, r27	; 0x27
 5e2:	ae a3       	std	Y+38, r26	; 0x26
		while(__ticks)
 5e4:	10 c0       	rjmp	.+32     	; 0x606 <__FUSE_REGION_LENGTH__+0x206>
 5e6:	88 ec       	ldi	r24, 0xC8	; 200
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	99 a7       	std	Y+41, r25	; 0x29
 5ec:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5ee:	88 a5       	ldd	r24, Y+40	; 0x28
 5f0:	99 a5       	ldd	r25, Y+41	; 0x29
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <__FUSE_REGION_LENGTH__+0x1f2>
 5f6:	99 a7       	std	Y+41, r25	; 0x29
 5f8:	88 a7       	std	Y+40, r24	; 0x28
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 5fa:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5fc:	8e a1       	ldd	r24, Y+38	; 0x26
 5fe:	9f a1       	ldd	r25, Y+39	; 0x27
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	9f a3       	std	Y+39, r25	; 0x27
 604:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 606:	8e a1       	ldd	r24, Y+38	; 0x26
 608:	9f a1       	ldd	r25, Y+39	; 0x27
 60a:	89 2b       	or	r24, r25
 60c:	61 f7       	brne	.-40     	; 0x5e6 <__FUSE_REGION_LENGTH__+0x1e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 60e:	21 c0       	rjmp	.+66     	; 0x652 <__FUSE_REGION_LENGTH__+0x252>
	}
	else
		__ticks = (uint16_t)__tmp;
 610:	6a a1       	ldd	r22, Y+34	; 0x22
 612:	7b a1       	ldd	r23, Y+35	; 0x23
 614:	8c a1       	ldd	r24, Y+36	; 0x24
 616:	9d a1       	ldd	r25, Y+37	; 0x25
 618:	0e 94 3f 03 	call	0x67e	; 0x67e <__fixunssfsi>
 61c:	cc 55       	subi	r28, 0x5C	; 92
 61e:	df 4f       	sbci	r29, 0xFF	; 255
 620:	68 83       	st	Y, r22
 622:	79 83       	std	Y+1, r23	; 0x01
 624:	8a 83       	std	Y+2, r24	; 0x02
 626:	9b 83       	std	Y+3, r25	; 0x03
 628:	c4 5a       	subi	r28, 0xA4	; 164
 62a:	d0 40       	sbci	r29, 0x00	; 0
 62c:	cc 55       	subi	r28, 0x5C	; 92
 62e:	df 4f       	sbci	r29, 0xFF	; 255
 630:	e8 81       	ld	r30, Y
 632:	f9 81       	ldd	r31, Y+1	; 0x01
 634:	c4 5a       	subi	r28, 0xA4	; 164
 636:	d0 40       	sbci	r29, 0x00	; 0
 638:	ff a3       	std	Y+39, r31	; 0x27
 63a:	ee a3       	std	Y+38, r30	; 0x26
 63c:	8e a1       	ldd	r24, Y+38	; 0x26
 63e:	9f a1       	ldd	r25, Y+39	; 0x27
 640:	9b a7       	std	Y+43, r25	; 0x2b
 642:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 644:	8a a5       	ldd	r24, Y+42	; 0x2a
 646:	9b a5       	ldd	r25, Y+43	; 0x2b
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <__FUSE_REGION_LENGTH__+0x248>
 64c:	9b a7       	std	Y+43, r25	; 0x2b
 64e:	8a a7       	std	Y+42, r24	; 0x2a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 650:	00 00       	nop


		 //turn on RED led for 15 seconds
		 SET_BIT(PORTA,2);
		 //count down from 15 to 0 on 2 sev_segemnts
		 for( i=0;i<=15;i++)
 652:	89 81       	ldd	r24, Y+1	; 0x01
 654:	8f 5f       	subi	r24, 0xFF	; 255
 656:	89 83       	std	Y+1, r24	; 0x01
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	80 31       	cpi	r24, 0x10	; 16
 65c:	08 f4       	brcc	.+2      	; 0x660 <__FUSE_REGION_LENGTH__+0x260>
 65e:	23 cf       	rjmp	.-442    	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
		 			PORTC=SevSegArr_2[i];
		 			_delay_ms(100);
		          }

		 //turn off RED led
				 CLR_BIT(PORTA,2);
 660:	8b e3       	ldi	r24, 0x3B	; 59
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	dc 01       	movw	r26, r24
 666:	2c 91       	ld	r18, X
 668:	8b e3       	ldi	r24, 0x3B	; 59
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	2b 7f       	andi	r18, 0xFB	; 251
 66e:	fc 01       	movw	r30, r24
 670:	20 83       	st	Z, r18

	while(1)
	{

    	 //turn on green led for 15 seconds
    	 SET_BIT(PORTA,0);
 672:	35 cd       	rjmp	.-1430   	; 0xde <main+0x5c>

00000674 <__cmpsf2>:
 674:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_cmp>
 678:	08 f4       	brcc	.+2      	; 0x67c <__cmpsf2+0x8>
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	08 95       	ret

0000067e <__fixunssfsi>:
 67e:	0e 94 9a 03 	call	0x734	; 0x734 <__fp_splitA>
 682:	88 f0       	brcs	.+34     	; 0x6a6 <__fixunssfsi+0x28>
 684:	9f 57       	subi	r25, 0x7F	; 127
 686:	98 f0       	brcs	.+38     	; 0x6ae <__fixunssfsi+0x30>
 688:	b9 2f       	mov	r27, r25
 68a:	99 27       	eor	r25, r25
 68c:	b7 51       	subi	r27, 0x17	; 23
 68e:	b0 f0       	brcs	.+44     	; 0x6bc <__fixunssfsi+0x3e>
 690:	e1 f0       	breq	.+56     	; 0x6ca <__fixunssfsi+0x4c>
 692:	66 0f       	add	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	1a f0       	brmi	.+6      	; 0x6a2 <__fixunssfsi+0x24>
 69c:	ba 95       	dec	r27
 69e:	c9 f7       	brne	.-14     	; 0x692 <__fixunssfsi+0x14>
 6a0:	14 c0       	rjmp	.+40     	; 0x6ca <__fixunssfsi+0x4c>
 6a2:	b1 30       	cpi	r27, 0x01	; 1
 6a4:	91 f0       	breq	.+36     	; 0x6ca <__fixunssfsi+0x4c>
 6a6:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_zero>
 6aa:	b1 e0       	ldi	r27, 0x01	; 1
 6ac:	08 95       	ret
 6ae:	0c 94 b4 03 	jmp	0x768	; 0x768 <__fp_zero>
 6b2:	67 2f       	mov	r22, r23
 6b4:	78 2f       	mov	r23, r24
 6b6:	88 27       	eor	r24, r24
 6b8:	b8 5f       	subi	r27, 0xF8	; 248
 6ba:	39 f0       	breq	.+14     	; 0x6ca <__fixunssfsi+0x4c>
 6bc:	b9 3f       	cpi	r27, 0xF9	; 249
 6be:	cc f3       	brlt	.-14     	; 0x6b2 <__fixunssfsi+0x34>
 6c0:	86 95       	lsr	r24
 6c2:	77 95       	ror	r23
 6c4:	67 95       	ror	r22
 6c6:	b3 95       	inc	r27
 6c8:	d9 f7       	brne	.-10     	; 0x6c0 <__fixunssfsi+0x42>
 6ca:	3e f4       	brtc	.+14     	; 0x6da <__fixunssfsi+0x5c>
 6cc:	90 95       	com	r25
 6ce:	80 95       	com	r24
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	08 95       	ret

000006dc <__fp_cmp>:
 6dc:	99 0f       	add	r25, r25
 6de:	00 08       	sbc	r0, r0
 6e0:	55 0f       	add	r21, r21
 6e2:	aa 0b       	sbc	r26, r26
 6e4:	e0 e8       	ldi	r30, 0x80	; 128
 6e6:	fe ef       	ldi	r31, 0xFE	; 254
 6e8:	16 16       	cp	r1, r22
 6ea:	17 06       	cpc	r1, r23
 6ec:	e8 07       	cpc	r30, r24
 6ee:	f9 07       	cpc	r31, r25
 6f0:	c0 f0       	brcs	.+48     	; 0x722 <__fp_cmp+0x46>
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	e4 07       	cpc	r30, r20
 6f8:	f5 07       	cpc	r31, r21
 6fa:	98 f0       	brcs	.+38     	; 0x722 <__fp_cmp+0x46>
 6fc:	62 1b       	sub	r22, r18
 6fe:	73 0b       	sbc	r23, r19
 700:	84 0b       	sbc	r24, r20
 702:	95 0b       	sbc	r25, r21
 704:	39 f4       	brne	.+14     	; 0x714 <__fp_cmp+0x38>
 706:	0a 26       	eor	r0, r26
 708:	61 f0       	breq	.+24     	; 0x722 <__fp_cmp+0x46>
 70a:	23 2b       	or	r18, r19
 70c:	24 2b       	or	r18, r20
 70e:	25 2b       	or	r18, r21
 710:	21 f4       	brne	.+8      	; 0x71a <__fp_cmp+0x3e>
 712:	08 95       	ret
 714:	0a 26       	eor	r0, r26
 716:	09 f4       	brne	.+2      	; 0x71a <__fp_cmp+0x3e>
 718:	a1 40       	sbci	r26, 0x01	; 1
 71a:	a6 95       	lsr	r26
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	81 1d       	adc	r24, r1
 720:	81 1d       	adc	r24, r1
 722:	08 95       	ret

00000724 <__fp_split3>:
 724:	57 fd       	sbrc	r21, 7
 726:	90 58       	subi	r25, 0x80	; 128
 728:	44 0f       	add	r20, r20
 72a:	55 1f       	adc	r21, r21
 72c:	59 f0       	breq	.+22     	; 0x744 <__fp_splitA+0x10>
 72e:	5f 3f       	cpi	r21, 0xFF	; 255
 730:	71 f0       	breq	.+28     	; 0x74e <__fp_splitA+0x1a>
 732:	47 95       	ror	r20

00000734 <__fp_splitA>:
 734:	88 0f       	add	r24, r24
 736:	97 fb       	bst	r25, 7
 738:	99 1f       	adc	r25, r25
 73a:	61 f0       	breq	.+24     	; 0x754 <__fp_splitA+0x20>
 73c:	9f 3f       	cpi	r25, 0xFF	; 255
 73e:	79 f0       	breq	.+30     	; 0x75e <__fp_splitA+0x2a>
 740:	87 95       	ror	r24
 742:	08 95       	ret
 744:	12 16       	cp	r1, r18
 746:	13 06       	cpc	r1, r19
 748:	14 06       	cpc	r1, r20
 74a:	55 1f       	adc	r21, r21
 74c:	f2 cf       	rjmp	.-28     	; 0x732 <__fp_split3+0xe>
 74e:	46 95       	lsr	r20
 750:	f1 df       	rcall	.-30     	; 0x734 <__fp_splitA>
 752:	08 c0       	rjmp	.+16     	; 0x764 <__fp_splitA+0x30>
 754:	16 16       	cp	r1, r22
 756:	17 06       	cpc	r1, r23
 758:	18 06       	cpc	r1, r24
 75a:	99 1f       	adc	r25, r25
 75c:	f1 cf       	rjmp	.-30     	; 0x740 <__fp_splitA+0xc>
 75e:	86 95       	lsr	r24
 760:	71 05       	cpc	r23, r1
 762:	61 05       	cpc	r22, r1
 764:	08 94       	sec
 766:	08 95       	ret

00000768 <__fp_zero>:
 768:	e8 94       	clt

0000076a <__fp_szero>:
 76a:	bb 27       	eor	r27, r27
 76c:	66 27       	eor	r22, r22
 76e:	77 27       	eor	r23, r23
 770:	cb 01       	movw	r24, r22
 772:	97 f9       	bld	r25, 7
 774:	08 95       	ret

00000776 <__gesf2>:
 776:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_cmp>
 77a:	08 f4       	brcc	.+2      	; 0x77e <__gesf2+0x8>
 77c:	8f ef       	ldi	r24, 0xFF	; 255
 77e:	08 95       	ret

00000780 <__mulsf3>:
 780:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3x>
 784:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_round>
 788:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscA>
 78c:	38 f0       	brcs	.+14     	; 0x79c <__mulsf3+0x1c>
 78e:	0e 94 3d 04 	call	0x87a	; 0x87a <__fp_pscB>
 792:	20 f0       	brcs	.+8      	; 0x79c <__mulsf3+0x1c>
 794:	95 23       	and	r25, r21
 796:	11 f0       	breq	.+4      	; 0x79c <__mulsf3+0x1c>
 798:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>
 79c:	0c 94 33 04 	jmp	0x866	; 0x866 <__fp_nan>
 7a0:	11 24       	eor	r1, r1
 7a2:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>

000007a6 <__mulsf3x>:
 7a6:	0e 94 92 03 	call	0x724	; 0x724 <__fp_split3>
 7aa:	70 f3       	brcs	.-36     	; 0x788 <__mulsf3+0x8>

000007ac <__mulsf3_pse>:
 7ac:	95 9f       	mul	r25, r21
 7ae:	c1 f3       	breq	.-16     	; 0x7a0 <__mulsf3+0x20>
 7b0:	95 0f       	add	r25, r21
 7b2:	50 e0       	ldi	r21, 0x00	; 0
 7b4:	55 1f       	adc	r21, r21
 7b6:	62 9f       	mul	r22, r18
 7b8:	f0 01       	movw	r30, r0
 7ba:	72 9f       	mul	r23, r18
 7bc:	bb 27       	eor	r27, r27
 7be:	f0 0d       	add	r31, r0
 7c0:	b1 1d       	adc	r27, r1
 7c2:	63 9f       	mul	r22, r19
 7c4:	aa 27       	eor	r26, r26
 7c6:	f0 0d       	add	r31, r0
 7c8:	b1 1d       	adc	r27, r1
 7ca:	aa 1f       	adc	r26, r26
 7cc:	64 9f       	mul	r22, r20
 7ce:	66 27       	eor	r22, r22
 7d0:	b0 0d       	add	r27, r0
 7d2:	a1 1d       	adc	r26, r1
 7d4:	66 1f       	adc	r22, r22
 7d6:	82 9f       	mul	r24, r18
 7d8:	22 27       	eor	r18, r18
 7da:	b0 0d       	add	r27, r0
 7dc:	a1 1d       	adc	r26, r1
 7de:	62 1f       	adc	r22, r18
 7e0:	73 9f       	mul	r23, r19
 7e2:	b0 0d       	add	r27, r0
 7e4:	a1 1d       	adc	r26, r1
 7e6:	62 1f       	adc	r22, r18
 7e8:	83 9f       	mul	r24, r19
 7ea:	a0 0d       	add	r26, r0
 7ec:	61 1d       	adc	r22, r1
 7ee:	22 1f       	adc	r18, r18
 7f0:	74 9f       	mul	r23, r20
 7f2:	33 27       	eor	r19, r19
 7f4:	a0 0d       	add	r26, r0
 7f6:	61 1d       	adc	r22, r1
 7f8:	23 1f       	adc	r18, r19
 7fa:	84 9f       	mul	r24, r20
 7fc:	60 0d       	add	r22, r0
 7fe:	21 1d       	adc	r18, r1
 800:	82 2f       	mov	r24, r18
 802:	76 2f       	mov	r23, r22
 804:	6a 2f       	mov	r22, r26
 806:	11 24       	eor	r1, r1
 808:	9f 57       	subi	r25, 0x7F	; 127
 80a:	50 40       	sbci	r21, 0x00	; 0
 80c:	9a f0       	brmi	.+38     	; 0x834 <__mulsf3_pse+0x88>
 80e:	f1 f0       	breq	.+60     	; 0x84c <__mulsf3_pse+0xa0>
 810:	88 23       	and	r24, r24
 812:	4a f0       	brmi	.+18     	; 0x826 <__mulsf3_pse+0x7a>
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	bb 1f       	adc	r27, r27
 81a:	66 1f       	adc	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	91 50       	subi	r25, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	a9 f7       	brne	.-22     	; 0x810 <__mulsf3_pse+0x64>
 826:	9e 3f       	cpi	r25, 0xFE	; 254
 828:	51 05       	cpc	r21, r1
 82a:	80 f0       	brcs	.+32     	; 0x84c <__mulsf3_pse+0xa0>
 82c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__fp_inf>
 830:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_szero>
 834:	5f 3f       	cpi	r21, 0xFF	; 255
 836:	e4 f3       	brlt	.-8      	; 0x830 <__mulsf3_pse+0x84>
 838:	98 3e       	cpi	r25, 0xE8	; 232
 83a:	d4 f3       	brlt	.-12     	; 0x830 <__mulsf3_pse+0x84>
 83c:	86 95       	lsr	r24
 83e:	77 95       	ror	r23
 840:	67 95       	ror	r22
 842:	b7 95       	ror	r27
 844:	f7 95       	ror	r31
 846:	e7 95       	ror	r30
 848:	9f 5f       	subi	r25, 0xFF	; 255
 84a:	c1 f7       	brne	.-16     	; 0x83c <__mulsf3_pse+0x90>
 84c:	fe 2b       	or	r31, r30
 84e:	88 0f       	add	r24, r24
 850:	91 1d       	adc	r25, r1
 852:	96 95       	lsr	r25
 854:	87 95       	ror	r24
 856:	97 f9       	bld	r25, 7
 858:	08 95       	ret

0000085a <__fp_inf>:
 85a:	97 f9       	bld	r25, 7
 85c:	9f 67       	ori	r25, 0x7F	; 127
 85e:	80 e8       	ldi	r24, 0x80	; 128
 860:	70 e0       	ldi	r23, 0x00	; 0
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	08 95       	ret

00000866 <__fp_nan>:
 866:	9f ef       	ldi	r25, 0xFF	; 255
 868:	80 ec       	ldi	r24, 0xC0	; 192
 86a:	08 95       	ret

0000086c <__fp_pscA>:
 86c:	00 24       	eor	r0, r0
 86e:	0a 94       	dec	r0
 870:	16 16       	cp	r1, r22
 872:	17 06       	cpc	r1, r23
 874:	18 06       	cpc	r1, r24
 876:	09 06       	cpc	r0, r25
 878:	08 95       	ret

0000087a <__fp_pscB>:
 87a:	00 24       	eor	r0, r0
 87c:	0a 94       	dec	r0
 87e:	12 16       	cp	r1, r18
 880:	13 06       	cpc	r1, r19
 882:	14 06       	cpc	r1, r20
 884:	05 06       	cpc	r0, r21
 886:	08 95       	ret

00000888 <__fp_round>:
 888:	09 2e       	mov	r0, r25
 88a:	03 94       	inc	r0
 88c:	00 0c       	add	r0, r0
 88e:	11 f4       	brne	.+4      	; 0x894 <__fp_round+0xc>
 890:	88 23       	and	r24, r24
 892:	52 f0       	brmi	.+20     	; 0x8a8 <__fp_round+0x20>
 894:	bb 0f       	add	r27, r27
 896:	40 f4       	brcc	.+16     	; 0x8a8 <__fp_round+0x20>
 898:	bf 2b       	or	r27, r31
 89a:	11 f4       	brne	.+4      	; 0x8a0 <__fp_round+0x18>
 89c:	60 ff       	sbrs	r22, 0
 89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__fp_round+0x20>
 8a0:	6f 5f       	subi	r22, 0xFF	; 255
 8a2:	7f 4f       	sbci	r23, 0xFF	; 255
 8a4:	8f 4f       	sbci	r24, 0xFF	; 255
 8a6:	9f 4f       	sbci	r25, 0xFF	; 255
 8a8:	08 95       	ret

000008aa <_exit>:
 8aa:	f8 94       	cli

000008ac <__stop_program>:
 8ac:	ff cf       	rjmp	.-2      	; 0x8ac <__stop_program>
