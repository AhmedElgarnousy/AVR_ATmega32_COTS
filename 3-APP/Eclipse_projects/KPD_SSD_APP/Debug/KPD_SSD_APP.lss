
KPD_SSD_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000069e  00000712  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000016a4  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b47  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002917  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000040  00000000  00000000  00002968  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000532  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004cb  00000000  00000000  00002eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000115  00000000  00000000  000033a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  000034ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 30 03 	call	0x660	; 0x660 <main>
  7a:	0c 94 4d 03 	jmp	0x69a	; 0x69a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_u8SetPinValue+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_u8SetPinValue+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	8a 83       	std	Y+2, r24	; 0x02
  90:	6b 83       	std	Y+3, r22	; 0x03
  92:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  94:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_u8SetPinValue+0x1c>
  9c:	f1 c0       	rjmp	.+482    	; 0x280 <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_u8SetPinValue+0x24>
  a4:	71 c0       	rjmp	.+226    	; 0x188 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	88 2f       	mov	r24, r24
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_u8SetPinValue+0x32>
  b2:	52 c0       	rjmp	.+164    	; 0x158 <DIO_u8SetPinValue+0xd6>
  b4:	85 30       	cpi	r24, 0x05	; 5
  b6:	91 05       	cpc	r25, r1
  b8:	0c f0       	brlt	.+2      	; 0xbc <DIO_u8SetPinValue+0x3a>
  ba:	64 c0       	rjmp	.+200    	; 0x184 <DIO_u8SetPinValue+0x102>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	91 05       	cpc	r25, r1
  c0:	a9 f1       	breq	.+106    	; 0x12c <DIO_u8SetPinValue+0xaa>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	91 05       	cpc	r25, r1
  c6:	0c f0       	brlt	.+2      	; 0xca <DIO_u8SetPinValue+0x48>
  c8:	5d c0       	rjmp	.+186    	; 0x184 <DIO_u8SetPinValue+0x102>
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	19 f0       	breq	.+6      	; 0xd4 <DIO_u8SetPinValue+0x52>
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	b9 f0       	breq	.+46     	; 0x100 <DIO_u8SetPinValue+0x7e>
  d2:	58 c0       	rjmp	.+176    	; 0x184 <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  d4:	8b e3       	ldi	r24, 0x3B	; 59
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	48 2f       	mov	r20, r24
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	28 2f       	mov	r18, r24
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_u8SetPinValue+0x6c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	2a 95       	dec	r18
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_u8SetPinValue+0x68>
  f2:	24 2f       	mov	r18, r20
  f4:	28 2b       	or	r18, r24
  f6:	8b e3       	ldi	r24, 0x3B	; 59
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
  fe:	c2 c0       	rjmp	.+388    	; 0x284 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	80 81       	ld	r24, Z
 108:	48 2f       	mov	r20, r24
 10a:	8b 81       	ldd	r24, Y+3	; 0x03
 10c:	28 2f       	mov	r18, r24
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_u8SetPinValue+0x98>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_u8SetPinValue+0x94>
 11e:	24 2f       	mov	r18, r20
 120:	28 2b       	or	r18, r24
 122:	88 e3       	ldi	r24, 0x38	; 56
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
 12a:	ac c0       	rjmp	.+344    	; 0x284 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 12c:	85 e3       	ldi	r24, 0x35	; 53
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	80 81       	ld	r24, Z
 134:	48 2f       	mov	r20, r24
 136:	8b 81       	ldd	r24, Y+3	; 0x03
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_u8SetPinValue+0xc4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	2a 95       	dec	r18
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_u8SetPinValue+0xc0>
 14a:	24 2f       	mov	r18, r20
 14c:	28 2b       	or	r18, r24
 14e:	85 e3       	ldi	r24, 0x35	; 53
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	96 c0       	rjmp	.+300    	; 0x284 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 158:	82 e3       	ldi	r24, 0x32	; 50
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	48 2f       	mov	r20, r24
 162:	8b 81       	ldd	r24, Y+3	; 0x03
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_u8SetPinValue+0xf0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	2a 95       	dec	r18
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_u8SetPinValue+0xec>
 176:	24 2f       	mov	r18, r20
 178:	28 2b       	or	r18, r24
 17a:	82 e3       	ldi	r24, 0x32	; 50
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc 01       	movw	r30, r24
 180:	20 83       	st	Z, r18
 182:	80 c0       	rjmp	.+256    	; 0x284 <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 184:	19 82       	std	Y+1, r1	; 0x01
 186:	7e c0       	rjmp	.+252    	; 0x284 <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 188:	8c 81       	ldd	r24, Y+4	; 0x04
 18a:	88 23       	and	r24, r24
 18c:	09 f0       	breq	.+2      	; 0x190 <DIO_u8SetPinValue+0x10e>
 18e:	75 c0       	rjmp	.+234    	; 0x27a <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	91 05       	cpc	r25, r1
 19a:	09 f4       	brne	.+2      	; 0x19e <DIO_u8SetPinValue+0x11c>
 19c:	55 c0       	rjmp	.+170    	; 0x248 <DIO_u8SetPinValue+0x1c6>
 19e:	85 30       	cpi	r24, 0x05	; 5
 1a0:	91 05       	cpc	r25, r1
 1a2:	0c f0       	brlt	.+2      	; 0x1a6 <DIO_u8SetPinValue+0x124>
 1a4:	68 c0       	rjmp	.+208    	; 0x276 <DIO_u8SetPinValue+0x1f4>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	91 05       	cpc	r25, r1
 1aa:	b9 f1       	breq	.+110    	; 0x21a <DIO_u8SetPinValue+0x198>
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	91 05       	cpc	r25, r1
 1b0:	0c f0       	brlt	.+2      	; 0x1b4 <DIO_u8SetPinValue+0x132>
 1b2:	61 c0       	rjmp	.+194    	; 0x276 <DIO_u8SetPinValue+0x1f4>
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	19 f0       	breq	.+6      	; 0x1be <DIO_u8SetPinValue+0x13c>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	c1 f0       	breq	.+48     	; 0x1ec <DIO_u8SetPinValue+0x16a>
 1bc:	5c c0       	rjmp	.+184    	; 0x276 <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1be:	8b e3       	ldi	r24, 0x3B	; 59
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_u8SetPinValue+0x156>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	2a 95       	dec	r18
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_u8SetPinValue+0x152>
 1dc:	80 95       	com	r24
 1de:	24 2f       	mov	r18, r20
 1e0:	28 23       	and	r18, r24
 1e2:	8b e3       	ldi	r24, 0x3B	; 59
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
 1ea:	4c c0       	rjmp	.+152    	; 0x284 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1ec:	88 e3       	ldi	r24, 0x38	; 56
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	80 81       	ld	r24, Z
 1f4:	48 2f       	mov	r20, r24
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_u8SetPinValue+0x184>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	2a 95       	dec	r18
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_u8SetPinValue+0x180>
 20a:	80 95       	com	r24
 20c:	24 2f       	mov	r18, r20
 20e:	28 23       	and	r18, r24
 210:	88 e3       	ldi	r24, 0x38	; 56
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
 218:	35 c0       	rjmp	.+106    	; 0x284 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 21a:	85 e3       	ldi	r24, 0x35	; 53
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	48 2f       	mov	r20, r24
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	28 2f       	mov	r18, r24
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_u8SetPinValue+0x1b2>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	2a 95       	dec	r18
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_u8SetPinValue+0x1ae>
 238:	80 95       	com	r24
 23a:	24 2f       	mov	r18, r20
 23c:	28 23       	and	r18, r24
 23e:	85 e3       	ldi	r24, 0x35	; 53
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
 246:	1e c0       	rjmp	.+60     	; 0x284 <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 248:	82 e3       	ldi	r24, 0x32	; 50
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_u8SetPinValue+0x1e0>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	2a 95       	dec	r18
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_u8SetPinValue+0x1dc>
 266:	80 95       	com	r24
 268:	24 2f       	mov	r18, r20
 26a:	28 23       	and	r18, r24
 26c:	82 e3       	ldi	r24, 0x32	; 50
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
 274:	07 c0       	rjmp	.+14     	; 0x284 <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 276:	19 82       	std	Y+1, r1	; 0x01
 278:	05 c0       	rjmp	.+10     	; 0x284 <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 284:	89 81       	ldd	r24, Y+1	; 0x01

}
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <DIO_u8SetPortValue+0x6>
 29a:	0f 92       	push	r0
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	8a 83       	std	Y+2, r24	; 0x02
 2a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2a4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	88 2f       	mov	r24, r24
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	91 05       	cpc	r25, r1
 2b0:	01 f1       	breq	.+64     	; 0x2f2 <DIO_u8SetPortValue+0x5e>
 2b2:	85 30       	cpi	r24, 0x05	; 5
 2b4:	91 05       	cpc	r25, r1
 2b6:	1c f5       	brge	.+70     	; 0x2fe <DIO_u8SetPortValue+0x6a>
 2b8:	83 30       	cpi	r24, 0x03	; 3
 2ba:	91 05       	cpc	r25, r1
 2bc:	a1 f0       	breq	.+40     	; 0x2e6 <DIO_u8SetPortValue+0x52>
 2be:	84 30       	cpi	r24, 0x04	; 4
 2c0:	91 05       	cpc	r25, r1
 2c2:	ec f4       	brge	.+58     	; 0x2fe <DIO_u8SetPortValue+0x6a>
 2c4:	00 97       	sbiw	r24, 0x00	; 0
 2c6:	19 f0       	breq	.+6      	; 0x2ce <DIO_u8SetPortValue+0x3a>
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	39 f0       	breq	.+14     	; 0x2da <DIO_u8SetPortValue+0x46>
 2cc:	18 c0       	rjmp	.+48     	; 0x2fe <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2ce:	8b e3       	ldi	r24, 0x3B	; 59
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	2b 81       	ldd	r18, Y+3	; 0x03
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
 2d8:	15 c0       	rjmp	.+42     	; 0x304 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2da:	88 e3       	ldi	r24, 0x38	; 56
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	2b 81       	ldd	r18, Y+3	; 0x03
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
 2e4:	0f c0       	rjmp	.+30     	; 0x304 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2e6:	85 e3       	ldi	r24, 0x35	; 53
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	2b 81       	ldd	r18, Y+3	; 0x03
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
 2f0:	09 c0       	rjmp	.+18     	; 0x304 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2f2:	82 e3       	ldi	r24, 0x32	; 50
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	2b 81       	ldd	r18, Y+3	; 0x03
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 83       	st	Z, r18
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	89 83       	std	Y+1, r24	; 0x01
 302:	00 00       	nop
				}


	return Local_u8ErrorState;
 304:	89 81       	ldd	r24, Y+1	; 0x01

}
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	00 d0       	rcall	.+0      	; 0x318 <DIO_u8GetPinValue+0x6>
 318:	00 d0       	rcall	.+0      	; 0x31a <DIO_u8GetPinValue+0x8>
 31a:	0f 92       	push	r0
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	8a 83       	std	Y+2, r24	; 0x02
 322:	6b 83       	std	Y+3, r22	; 0x03
 324:	5d 83       	std	Y+5, r21	; 0x05
 326:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 328:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 32a:	8c 81       	ldd	r24, Y+4	; 0x04
 32c:	9d 81       	ldd	r25, Y+5	; 0x05
 32e:	89 2b       	or	r24, r25
 330:	09 f4       	brne	.+2      	; 0x334 <DIO_u8GetPinValue+0x22>
 332:	73 c0       	rjmp	.+230    	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	88 30       	cpi	r24, 0x08	; 8
 338:	08 f0       	brcs	.+2      	; 0x33c <DIO_u8GetPinValue+0x2a>
 33a:	6f c0       	rjmp	.+222    	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
				{
					switch(Copy_u8Port)
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	88 2f       	mov	r24, r24
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	91 05       	cpc	r25, r1
 346:	09 f4       	brne	.+2      	; 0x34a <DIO_u8GetPinValue+0x38>
 348:	4f c0       	rjmp	.+158    	; 0x3e8 <DIO_u8GetPinValue+0xd6>
 34a:	85 30       	cpi	r24, 0x05	; 5
 34c:	91 05       	cpc	r25, r1
 34e:	0c f0       	brlt	.+2      	; 0x352 <DIO_u8GetPinValue+0x40>
 350:	60 c0       	rjmp	.+192    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	91 05       	cpc	r25, r1
 356:	99 f1       	breq	.+102    	; 0x3be <DIO_u8GetPinValue+0xac>
 358:	84 30       	cpi	r24, 0x04	; 4
 35a:	91 05       	cpc	r25, r1
 35c:	0c f0       	brlt	.+2      	; 0x360 <DIO_u8GetPinValue+0x4e>
 35e:	59 c0       	rjmp	.+178    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	19 f0       	breq	.+6      	; 0x36a <DIO_u8GetPinValue+0x58>
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	b1 f0       	breq	.+44     	; 0x394 <DIO_u8GetPinValue+0x82>
 368:	54 c0       	rjmp	.+168    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 36a:	89 e3       	ldi	r24, 0x39	; 57
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	fc 01       	movw	r30, r24
 370:	80 81       	ld	r24, Z
 372:	88 2f       	mov	r24, r24
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	2b 81       	ldd	r18, Y+3	; 0x03
 378:	22 2f       	mov	r18, r18
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_u8GetPinValue+0x70>
 37e:	95 95       	asr	r25
 380:	87 95       	ror	r24
 382:	2a 95       	dec	r18
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_u8GetPinValue+0x6c>
 386:	28 2f       	mov	r18, r24
 388:	21 70       	andi	r18, 0x01	; 1
 38a:	8c 81       	ldd	r24, Y+4	; 0x04
 38c:	9d 81       	ldd	r25, Y+5	; 0x05
 38e:	fc 01       	movw	r30, r24
 390:	20 83       	st	Z, r18
 392:	42 c0       	rjmp	.+132    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 394:	86 e3       	ldi	r24, 0x36	; 54
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	fc 01       	movw	r30, r24
 39a:	80 81       	ld	r24, Z
 39c:	88 2f       	mov	r24, r24
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	2b 81       	ldd	r18, Y+3	; 0x03
 3a2:	22 2f       	mov	r18, r18
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_u8GetPinValue+0x9a>
 3a8:	95 95       	asr	r25
 3aa:	87 95       	ror	r24
 3ac:	2a 95       	dec	r18
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_u8GetPinValue+0x96>
 3b0:	28 2f       	mov	r18, r24
 3b2:	21 70       	andi	r18, 0x01	; 1
 3b4:	8c 81       	ldd	r24, Y+4	; 0x04
 3b6:	9d 81       	ldd	r25, Y+5	; 0x05
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
 3bc:	2d c0       	rjmp	.+90     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3be:	83 e3       	ldi	r24, 0x33	; 51
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	fc 01       	movw	r30, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	2b 81       	ldd	r18, Y+3	; 0x03
 3cc:	22 2f       	mov	r18, r18
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_u8GetPinValue+0xc4>
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	2a 95       	dec	r18
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_u8GetPinValue+0xc0>
 3da:	28 2f       	mov	r18, r24
 3dc:	21 70       	andi	r18, 0x01	; 1
 3de:	8c 81       	ldd	r24, Y+4	; 0x04
 3e0:	9d 81       	ldd	r25, Y+5	; 0x05
 3e2:	fc 01       	movw	r30, r24
 3e4:	20 83       	st	Z, r18
 3e6:	18 c0       	rjmp	.+48     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	fc 01       	movw	r30, r24
 3ee:	80 81       	ld	r24, Z
 3f0:	88 2f       	mov	r24, r24
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	2b 81       	ldd	r18, Y+3	; 0x03
 3f6:	22 2f       	mov	r18, r18
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__FUSE_REGION_LENGTH__>
 3fc:	95 95       	asr	r25
 3fe:	87 95       	ror	r24
 400:	2a 95       	dec	r18
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_u8GetPinValue+0xea>
 404:	28 2f       	mov	r18, r24
 406:	21 70       	andi	r18, 0x01	; 1
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	9d 81       	ldd	r25, Y+5	; 0x05
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
 410:	03 c0       	rjmp	.+6      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
					     default : Local_u8ErrorState=1; break;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	89 83       	std	Y+1, r24	; 0x01
 416:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 418:	02 c0       	rjmp	.+4      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 41e:	89 81       	ldd	r24, Y+1	; 0x01


}
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <KPD_u8GetPressedKey>:
#include"KPD_config.h"
#include"KPD_private.h"


u8 KPD_u8GetPressedKey(void)
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <KPD_u8GetPressedKey+0x6>
 436:	00 d0       	rcall	.+0      	; 0x438 <KPD_u8GetPressedKey+0x8>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	8b 83       	std	Y+3, r24	; 0x03
static u8 Local_u8KPDArr[KPD_COLUMN_NUM][KPD_ROW_NUM]=KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0;Local_u8ColumnIdx < KPD_COLUMN_NUM;Local_u8ColumnIdx++)
 440:	19 82       	std	Y+1, r1	; 0x01
 442:	59 c0       	rjmp	.+178    	; 0x4f6 <KPD_u8GetPressedKey+0xc6>
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	88 2f       	mov	r24, r24
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	80 5a       	subi	r24, 0xA0	; 160
 44c:	9f 4f       	sbci	r25, 0xFF	; 255
 44e:	fc 01       	movw	r30, r24
 450:	80 81       	ld	r24, Z
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	68 2f       	mov	r22, r24
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinValue>
	for(Local_u8RowIdx=0;Local_u8RowIdx<KPD_ROW_NUM;Local_u8RowIdx++)
 45c:	1a 82       	std	Y+2, r1	; 0x02
 45e:	39 c0       	rjmp	.+114    	; 0x4d2 <KPD_u8GetPressedKey+0xa2>
	{
		/*Read the current row*/
		DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	88 2f       	mov	r24, r24
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	8c 59       	subi	r24, 0x9C	; 156
 468:	9f 4f       	sbci	r25, 0xFF	; 255
 46a:	fc 01       	movw	r30, r24
 46c:	20 81       	ld	r18, Z
 46e:	ce 01       	movw	r24, r28
 470:	04 96       	adiw	r24, 0x04	; 4
 472:	ac 01       	movw	r20, r24
 474:	62 2f       	mov	r22, r18
 476:	84 e0       	ldi	r24, 0x04	; 4
 478:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8GetPinValue>

		 /*Check switch is pressed*/
		if(DIO_u8PIN_LOW==Local_u8PinState)
 47c:	8c 81       	ldd	r24, Y+4	; 0x04
 47e:	88 23       	and	r24, r24
 480:	29 f5       	brne	.+74     	; 0x4cc <KPD_u8GetPressedKey+0x9c>
		{
			Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	88 2f       	mov	r24, r24
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	22 0f       	add	r18, r18
 494:	33 1f       	adc	r19, r19
 496:	82 0f       	add	r24, r18
 498:	93 1f       	adc	r25, r19
 49a:	88 59       	subi	r24, 0x98	; 152
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	fc 01       	movw	r30, r24
 4a0:	80 81       	ld	r24, Z
 4a2:	8b 83       	std	Y+3, r24	; 0x03
			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW==Local_u8PinState)
 4a4:	0e c0       	rjmp	.+28     	; 0x4c2 <KPD_u8GetPressedKey+0x92>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	8c 59       	subi	r24, 0x9C	; 156
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 81       	ld	r18, Z
 4b4:	ce 01       	movw	r24, r28
 4b6:	04 96       	adiw	r24, 0x04	; 4
 4b8:	ac 01       	movw	r20, r24
 4ba:	62 2f       	mov	r22, r18
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8GetPinValue>
		 /*Check switch is pressed*/
		if(DIO_u8PIN_LOW==Local_u8PinState)
		{
			Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
			/*polling (busy waiting) until the key is released*/
			while(DIO_u8PIN_LOW==Local_u8PinState)
 4c2:	8c 81       	ldd	r24, Y+4	; 0x04
 4c4:	88 23       	and	r24, r24
 4c6:	79 f3       	breq	.-34     	; 0x4a6 <KPD_u8GetPressedKey+0x76>
			{
				DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIdx],&Local_u8PinState);
			}
			return Local_u8PressedKey;
 4c8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ca:	1a c0       	rjmp	.+52     	; 0x500 <KPD_u8GetPressedKey+0xd0>

for(Local_u8ColumnIdx=0;Local_u8ColumnIdx < KPD_COLUMN_NUM;Local_u8ColumnIdx++)
{
		/*Activate current column*/
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
	for(Local_u8RowIdx=0;Local_u8RowIdx<KPD_ROW_NUM;Local_u8RowIdx++)
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	8a 83       	std	Y+2, r24	; 0x02
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	20 f2       	brcs	.-120    	; 0x460 <KPD_u8GetPressedKey+0x30>
			return Local_u8PressedKey;
		}
	}

	/*Deactivate the current column  */
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	80 5a       	subi	r24, 0xA0	; 160
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	fc 01       	movw	r30, r24
 4e4:	80 81       	ld	r24, Z
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	68 2f       	mov	r22, r24
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	0e 94 41 00 	call	0x82	; 0x82 <DIO_u8SetPinValue>
u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY, Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
static u8 Local_u8KPDArr[KPD_COLUMN_NUM][KPD_ROW_NUM]=KPD_ARR_VAL;
static u8 Local_u8KPDColumnArr[KPD_COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
static u8 Local_u8KPDRowArr[KPD_ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

for(Local_u8ColumnIdx=0;Local_u8ColumnIdx < KPD_COLUMN_NUM;Local_u8ColumnIdx++)
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	89 83       	std	Y+1, r24	; 0x01
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	84 30       	cpi	r24, 0x04	; 4
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <KPD_u8GetPressedKey+0xce>
 4fc:	a3 cf       	rjmp	.-186    	; 0x444 <KPD_u8GetPressedKey+0x14>
	/*Deactivate the current column  */
	DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);

}

return Local_u8PressedKey;
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 516:	8a e3       	ldi	r24, 0x3A	; 58
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 51e:	87 e3       	ldi	r24, 0x37	; 55
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	2f e0       	ldi	r18, 0x0F	; 15
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18
	DDRC=PORTC_DIR;
 528:	84 e3       	ldi	r24, 0x34	; 52
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	2f ef       	ldi	r18, 0xFF	; 255
 52e:	fc 01       	movw	r30, r24
 530:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 532:	81 e3       	ldi	r24, 0x31	; 49
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	fc 01       	movw	r30, r24
 53a:	20 83       	st	Z, r18

	PORTA=PORTA_InitVal;
 53c:	8b e3       	ldi	r24, 0x3B	; 59
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	fc 01       	movw	r30, r24
 542:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 544:	88 e3       	ldi	r24, 0x38	; 56
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	20 ef       	ldi	r18, 0xF0	; 240
 54a:	fc 01       	movw	r30, r24
 54c:	20 83       	st	Z, r18
	PORTC=PORTC_InitVal;
 54e:	85 e3       	ldi	r24, 0x35	; 53
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	fc 01       	movw	r30, r24
 554:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 556:	82 e3       	ldi	r24, 0x32	; 50
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	fc 01       	movw	r30, r24
 55e:	20 83       	st	Z, r18
}
 560:	00 00       	nop
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <SSD_u8SetNumber>:


/*make Function for enable and disable the 7_seg for multiplexing */
//u8 SSD_u8Enable_SDD();
u8 SSD_u8SetNumber(u8 Copy_u8Number,SSD_t*Copy_u16Ptr)
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	00 d0       	rcall	.+0      	; 0x56e <SSD_u8SetNumber+0x6>
 56e:	00 d0       	rcall	.+0      	; 0x570 <SSD_u8SetNumber+0x8>
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	8a 83       	std	Y+2, r24	; 0x02
 576:	7c 83       	std	Y+4, r23	; 0x04
 578:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 57a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u16Ptr->COM_Type==COM_CATHODE)
 57c:	8b 81       	ldd	r24, Y+3	; 0x03
 57e:	9c 81       	ldd	r25, Y+4	; 0x04
 580:	fc 01       	movw	r30, r24
 582:	80 81       	ld	r24, Z
 584:	88 23       	and	r24, r24
 586:	71 f5       	brne	.+92     	; 0x5e4 <SSD_u8SetNumber+0x7c>
	{
		switch(Copy_u16Ptr->Port)
 588:	8b 81       	ldd	r24, Y+3	; 0x03
 58a:	9c 81       	ldd	r25, Y+4	; 0x04
 58c:	fc 01       	movw	r30, r24
 58e:	81 81       	ldd	r24, Z+1	; 0x01
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	84 30       	cpi	r24, 0x04	; 4
 596:	91 05       	cpc	r25, r1
 598:	e9 f0       	breq	.+58     	; 0x5d4 <SSD_u8SetNumber+0x6c>
 59a:	85 30       	cpi	r24, 0x05	; 5
 59c:	91 05       	cpc	r25, r1
 59e:	fc f4       	brge	.+62     	; 0x5de <SSD_u8SetNumber+0x76>
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	91 05       	cpc	r25, r1
 5a4:	91 f0       	breq	.+36     	; 0x5ca <SSD_u8SetNumber+0x62>
 5a6:	84 30       	cpi	r24, 0x04	; 4
 5a8:	91 05       	cpc	r25, r1
 5aa:	cc f4       	brge	.+50     	; 0x5de <SSD_u8SetNumber+0x76>
 5ac:	00 97       	sbiw	r24, 0x00	; 0
 5ae:	19 f0       	breq	.+6      	; 0x5b6 <SSD_u8SetNumber+0x4e>
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	31 f0       	breq	.+12     	; 0x5c0 <SSD_u8SetNumber+0x58>
 5b4:	14 c0       	rjmp	.+40     	; 0x5de <SSD_u8SetNumber+0x76>
		{
		case DIO_u8PORTA:/*DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTA,Copy_u8Number);
 5b6:	6a 81       	ldd	r22, Y+2	; 0x02
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
			 	 	break;
 5be:	48 c0       	rjmp	.+144    	; 0x650 <SSD_u8SetNumber+0xe8>
		case DIO_u8PORTB:/*DIO_u8SetPortDirection(DIO_u8PORTB,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTB,Copy_u8Number);
 5c0:	6a 81       	ldd	r22, Y+2	; 0x02
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
					break;
 5c8:	43 c0       	rjmp	.+134    	; 0x650 <SSD_u8SetNumber+0xe8>
		case DIO_u8PORTC:/*DIO_u8SetPortDirection(DIO_u8PORTC,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTC,Copy_u8Number);
 5ca:	6a 81       	ldd	r22, Y+2	; 0x02
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
					break;
 5d2:	3e c0       	rjmp	.+124    	; 0x650 <SSD_u8SetNumber+0xe8>
		case DIO_u8PORTD:/*DIO_u8SetPortDirection(DIO_u8PORTD,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTD,Copy_u8Number);
 5d4:	6a 81       	ldd	r22, Y+2	; 0x02
 5d6:	84 e0       	ldi	r24, 0x04	; 4
 5d8:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
					break;
 5dc:	39 c0       	rjmp	.+114    	; 0x650 <SSD_u8SetNumber+0xe8>
					default :Local_u8ErrorState=1;break;
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	89 83       	std	Y+1, r24	; 0x01
 5e2:	36 c0       	rjmp	.+108    	; 0x650 <SSD_u8SetNumber+0xe8>


	}
	else
	{
		switch(Copy_u16Ptr->EnablePort)
 5e4:	8b 81       	ldd	r24, Y+3	; 0x03
 5e6:	9c 81       	ldd	r25, Y+4	; 0x04
 5e8:	fc 01       	movw	r30, r24
 5ea:	82 81       	ldd	r24, Z+2	; 0x02
 5ec:	88 2f       	mov	r24, r24
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	84 30       	cpi	r24, 0x04	; 4
 5f2:	91 05       	cpc	r25, r1
 5f4:	19 f1       	breq	.+70     	; 0x63c <SSD_u8SetNumber+0xd4>
 5f6:	85 30       	cpi	r24, 0x05	; 5
 5f8:	91 05       	cpc	r25, r1
 5fa:	3c f5       	brge	.+78     	; 0x64a <SSD_u8SetNumber+0xe2>
 5fc:	83 30       	cpi	r24, 0x03	; 3
 5fe:	91 05       	cpc	r25, r1
 600:	b1 f0       	breq	.+44     	; 0x62e <SSD_u8SetNumber+0xc6>
 602:	84 30       	cpi	r24, 0x04	; 4
 604:	91 05       	cpc	r25, r1
 606:	0c f5       	brge	.+66     	; 0x64a <SSD_u8SetNumber+0xe2>
 608:	00 97       	sbiw	r24, 0x00	; 0
 60a:	19 f0       	breq	.+6      	; 0x612 <SSD_u8SetNumber+0xaa>
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	41 f0       	breq	.+16     	; 0x620 <SSD_u8SetNumber+0xb8>
 610:	1c c0       	rjmp	.+56     	; 0x64a <SSD_u8SetNumber+0xe2>
		{
		case DIO_u8PORTA:/*DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTA,~Copy_u8Number);
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	80 95       	com	r24
 616:	68 2f       	mov	r22, r24
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
			 	 	break;
 61e:	18 c0       	rjmp	.+48     	; 0x650 <SSD_u8SetNumber+0xe8>
		case DIO_u8PORTB:/*DIO_u8SetPortDirection(DIO_u8PORTB,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTB,~Copy_u8Number);
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	80 95       	com	r24
 624:	68 2f       	mov	r22, r24
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
					break;
 62c:	11 c0       	rjmp	.+34     	; 0x650 <SSD_u8SetNumber+0xe8>
		case DIO_u8PORTC:/*DIO_u8SetPortDirection(DIO_u8PORTC,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTC,~Copy_u8Number);
 62e:	8a 81       	ldd	r24, Y+2	; 0x02
 630:	80 95       	com	r24
 632:	68 2f       	mov	r22, r24
 634:	83 e0       	ldi	r24, 0x03	; 3
 636:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
					break;
 63a:	0a c0       	rjmp	.+20     	; 0x650 <SSD_u8SetNumber+0xe8>
		case DIO_u8PORTD:/*DIO_u8SetPortDirection(DIO_u8PORTD,DIO_u8PORT_OUTPUT);*/
			 DIO_u8SetPortValue(DIO_u8PORTD,~Copy_u8Number);
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	80 95       	com	r24
 640:	68 2f       	mov	r22, r24
 642:	84 e0       	ldi	r24, 0x04	; 4
 644:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPortValue>
					break;
 648:	03 c0       	rjmp	.+6      	; 0x650 <SSD_u8SetNumber+0xe8>
					default :Local_u8ErrorState=1;break;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	00 00       	nop
		}

	}
	return Local_u8ErrorState;
 650:	89 81       	ldd	r24, Y+1	; 0x01
}
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	df 91       	pop	r29
 65c:	cf 91       	pop	r28
 65e:	08 95       	ret

00000660 <main>:




void main(void)
{
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	00 d0       	rcall	.+0      	; 0x666 <main+0x6>
 666:	00 d0       	rcall	.+0      	; 0x668 <main+0x8>
 668:	0f 92       	push	r0
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62

	PORT_voidInit();
 66e:	0e 94 87 02 	call	0x50e	; 0x50e <PORT_voidInit>
	u8 Local_u8Key;
	SSD_t SSD={COM_ANODE,DIO_u8PORTC,DIO_u8PORTD,DIO_u8PIN0};
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	8a 83       	std	Y+2, r24	; 0x02
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	8b 83       	std	Y+3, r24	; 0x03
 67a:	84 e0       	ldi	r24, 0x04	; 4
 67c:	8c 83       	std	Y+4, r24	; 0x04
 67e:	1d 82       	std	Y+5, r1	; 0x05

	while(1)
	{
		u8 x=KPD_u8GetPressedKey();
 680:	0e 94 18 02 	call	0x430	; 0x430 <KPD_u8GetPressedKey>
 684:	89 83       	std	Y+1, r24	; 0x01
		if(x)
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	88 23       	and	r24, r24
 68a:	d1 f3       	breq	.-12     	; 0x680 <main+0x20>
		{
			SSD_u8SetNumber(SSD_u8_THREE,&SSD);
 68c:	ce 01       	movw	r24, r28
 68e:	02 96       	adiw	r24, 0x02	; 2
 690:	bc 01       	movw	r22, r24
 692:	8f e4       	ldi	r24, 0x4F	; 79
 694:	0e 94 b4 02 	call	0x568	; 0x568 <SSD_u8SetNumber>
	PORT_voidInit();
	u8 Local_u8Key;
	SSD_t SSD={COM_ANODE,DIO_u8PORTC,DIO_u8PORTD,DIO_u8PIN0};

	while(1)
	{
 698:	f3 cf       	rjmp	.-26     	; 0x680 <main+0x20>

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
