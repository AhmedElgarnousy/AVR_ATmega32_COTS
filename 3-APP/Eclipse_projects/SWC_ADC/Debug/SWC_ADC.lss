
SWC_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000009ce  00000a62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  00000a6a  2**0
                  ALLOC
  3 .stab         00001a28  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d72  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003206  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003218  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000060  00000000  00000000  00003258  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000558  00000000  00000000  000032b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004df  00000000  00000000  00003810  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000019a  00000000  00000000  00003cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  00003e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 04 	call	0x970	; 0x970 <main>
  8a:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
static u8 ADC_u8ISRSource;

u8 ADC_u8BusyState=IDLE;

void ADC_voidInit(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_REFERENCE_VOLTAGE==AVCC

	SET_BIT(ADMUX,ADMUX_REFS0);
  9a:	87 e2       	ldi	r24, 0x27	; 39
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	20 81       	ld	r18, Z
  a2:	87 e2       	ldi	r24, 0x27	; 39
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	20 64       	ori	r18, 0x40	; 64
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
	CLR_BIT(ADMUX,ADMUX_REFS1);
  ac:	87 e2       	ldi	r24, 0x27	; 39
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	20 81       	ld	r18, Z
  b4:	87 e2       	ldi	r24, 0x27	; 39
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f 77       	andi	r18, 0x7F	; 127
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
#endif

	/*set the adjust result left adjust 8bit resolution right adjust 10bit resolution*/
#if ADC_ADJUST_RESULT==LEFT_ADJUST_RESULT

	SET_BIT(ADMUX,ADMUX_ADLAR);
  be:	87 e2       	ldi	r24, 0x27	; 39
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	20 81       	ld	r18, Z
  c6:	87 e2       	ldi	r24, 0x27	; 39
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	20 62       	ori	r18, 0x20	; 32
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
#else
#error "Wrong Adjust Result "
#endif

	/*Set prescaler(Bit Masking) */
	ADCSRA &=ADC_PRESCALER_MASK;/*to make the first three bits equal zeros*/
  d0:	86 e2       	ldi	r24, 0x26	; 38
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	20 81       	ld	r18, Z
  d8:	86 e2       	ldi	r24, 0x26	; 38
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	28 7f       	andi	r18, 0xF8	; 248
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	ADCSRA |=ADC_PRESCALER_SELECT;
  e2:	86 e2       	ldi	r24, 0x26	; 38
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	20 81       	ld	r18, Z
  ea:	86 e2       	ldi	r24, 0x26	; 38
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	26 60       	ori	r18, 0x06	; 6
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18

	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  f4:	86 e2       	ldi	r24, 0x26	; 38
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	fc 01       	movw	r30, r24
  fa:	20 81       	ld	r18, Z
  fc:	86 e2       	ldi	r24, 0x26	; 38
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	20 68       	ori	r18, 0x80	; 128
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
}
 106:	00 00       	nop
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <ADC_u8StartConversionSynch>:

u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel,u16 *Copy_pu16Reading)
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	28 97       	sbiw	r28, 0x08	; 8
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	8e 83       	std	Y+6, r24	; 0x06
 124:	78 87       	std	Y+8, r23	; 0x08
 126:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter=0;
 128:	19 82       	std	Y+1, r1	; 0x01
 12a:	1a 82       	std	Y+2, r1	; 0x02
 12c:	1b 82       	std	Y+3, r1	; 0x03
 12e:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8ErrorState=OK;
 130:	1d 82       	std	Y+5, r1	; 0x05

	if(ADC_u8BusyState==IDLE)
 132:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <ADC_u8BusyState>
 136:	88 23       	and	r24, r24
 138:	09 f0       	breq	.+2      	; 0x13c <ADC_u8StartConversionSynch+0x2e>
 13a:	63 c0       	rjmp	.+198    	; 0x202 <ADC_u8StartConversionSynch+0xf4>
	{
		ADC_u8BusyState=BUSY;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <ADC_u8BusyState>

		/*Clear the MUX bits in ADMUX register*/
		ADMUX &=ADC_MULTIPLEXER_MASK;
 142:	87 e2       	ldi	r24, 0x27	; 39
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	20 81       	ld	r18, Z
 14a:	87 e2       	ldi	r24, 0x27	; 39
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	20 7e       	andi	r18, 0xE0	; 224
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18

		/*set the required channel into the MUX bits*/
		ADMUX |=Copy_u8Channel;
 154:	87 e2       	ldi	r24, 0x27	; 39
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	30 81       	ld	r19, Z
 15c:	87 e2       	ldi	r24, 0x27	; 39
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	2e 81       	ldd	r18, Y+6	; 0x06
 162:	23 2b       	or	r18, r19
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18

		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
 168:	86 e2       	ldi	r24, 0x26	; 38
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	20 81       	ld	r18, Z
 170:	86 e2       	ldi	r24, 0x26	; 38
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	20 64       	ori	r18, 0x40	; 64
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18

		/*Polling (busy waiting) until the conversion complete flag is set or counter reached timeout*/
		while( (GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT) )
 17a:	0b c0       	rjmp	.+22     	; 0x192 <ADC_u8StartConversionSynch+0x84>
		{
			Local_u32Counter++;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9a 81       	ldd	r25, Y+2	; 0x02
 180:	ab 81       	ldd	r26, Y+3	; 0x03
 182:	bc 81       	ldd	r27, Y+4	; 0x04
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	a1 1d       	adc	r26, r1
 188:	b1 1d       	adc	r27, r1
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	9a 83       	std	Y+2, r25	; 0x02
 18e:	ab 83       	std	Y+3, r26	; 0x03
 190:	bc 83       	std	Y+4, r27	; 0x04

		/*start conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*Polling (busy waiting) until the conversion complete flag is set or counter reached timeout*/
		while( (GET_BIT(ADCSRA,ADCSRA_ADIF)==0) && (Local_u32Counter!=ADC_u32TIMEOUT) )
 192:	86 e2       	ldi	r24, 0x26	; 38
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	82 95       	swap	r24
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	99 27       	eor	r25, r25
 1a6:	89 2b       	or	r24, r25
 1a8:	49 f4       	brne	.+18     	; 0x1bc <ADC_u8StartConversionSynch+0xae>
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	9a 81       	ldd	r25, Y+2	; 0x02
 1ae:	ab 81       	ldd	r26, Y+3	; 0x03
 1b0:	bc 81       	ldd	r27, Y+4	; 0x04
 1b2:	80 35       	cpi	r24, 0x50	; 80
 1b4:	93 4c       	sbci	r25, 0xC3	; 195
 1b6:	a1 05       	cpc	r26, r1
 1b8:	b1 05       	cpc	r27, r1
 1ba:	01 f7       	brne	.-64     	; 0x17c <ADC_u8StartConversionSynch+0x6e>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter==ADC_u32TIMEOUT)
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	ab 81       	ldd	r26, Y+3	; 0x03
 1c2:	bc 81       	ldd	r27, Y+4	; 0x04
 1c4:	80 35       	cpi	r24, 0x50	; 80
 1c6:	93 4c       	sbci	r25, 0xC3	; 195
 1c8:	a1 05       	cpc	r26, r1
 1ca:	b1 05       	cpc	r27, r1
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <ADC_u8StartConversionSynch+0xc6>
		{
			/*Loop is broken because the timeout is reached*/
			Local_u8ErrorState=NOK;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	8d 83       	std	Y+5, r24	; 0x05
 1d2:	1a c0       	rjmp	.+52     	; 0x208 <ADC_u8StartConversionSynch+0xfa>
		}
		else
		{
			/*Loop is broken because flag is raised */
			 /*clear the conversion complete flag*/
			 SET_BIT(ADCSRA,ADCSRA_ADIF);
 1d4:	86 e2       	ldi	r24, 0x26	; 38
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	20 81       	ld	r18, Z
 1dc:	86 e2       	ldi	r24, 0x26	; 38
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	20 61       	ori	r18, 0x10	; 16
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18

			#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
					*Copy_pu16Reading=ADCH;
 1e6:	85 e2       	ldi	r24, 0x25	; 37
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	80 81       	ld	r24, Z
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	8f 81       	ldd	r24, Y+7	; 0x07
 1f4:	98 85       	ldd	r25, Y+8	; 0x08
 1f6:	fc 01       	movw	r30, r24
 1f8:	31 83       	std	Z+1, r19	; 0x01
 1fa:	20 83       	st	Z, r18

					/*ADC finished return it to idle*/
					ADC_u8BusyState=IDLE;
 1fc:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ADC_u8BusyState>
 200:	03 c0       	rjmp	.+6      	; 0x208 <ADC_u8StartConversionSynch+0xfa>
			#endif
		}
	}
	else
	{
		ADC_u8BusyState=BUSY_FUNC;
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <ADC_u8BusyState>
	}
	return Local_u8ErrorState;
 208:	8d 81       	ldd	r24, Y+5	; 0x05
}
 20a:	28 96       	adiw	r28, 0x08	; 8
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	f8 94       	cli
 210:	de bf       	out	0x3e, r29	; 62
 212:	0f be       	out	0x3f, r0	; 63
 214:	cd bf       	out	0x3d, r28	; 61
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <ADC_u8StartConversionAsynch>:


u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel,u16* Copy_pu16Reading,void (*Copy_pvNotificationFunc)(void))
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 d0       	rcall	.+0      	; 0x222 <ADC_u8StartConversionAsynch+0x6>
 222:	00 d0       	rcall	.+0      	; 0x224 <ADC_u8StartConversionAsynch+0x8>
 224:	00 d0       	rcall	.+0      	; 0x226 <ADC_u8StartConversionAsynch+0xa>
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	8a 83       	std	Y+2, r24	; 0x02
 22c:	7c 83       	std	Y+4, r23	; 0x04
 22e:	6b 83       	std	Y+3, r22	; 0x03
 230:	5e 83       	std	Y+6, r21	; 0x06
 232:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=OK;
 234:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState==IDLE)
 236:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <ADC_u8BusyState>
 23a:	88 23       	and	r24, r24
 23c:	09 f0       	breq	.+2      	; 0x240 <ADC_u8StartConversionAsynch+0x24>
 23e:	47 c0       	rjmp	.+142    	; 0x2ce <ADC_u8StartConversionAsynch+0xb2>
	{

		if(Copy_pvNotificationFunc == NULL || Copy_pu16Reading == NULL)
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	9e 81       	ldd	r25, Y+6	; 0x06
 244:	89 2b       	or	r24, r25
 246:	21 f0       	breq	.+8      	; 0x250 <ADC_u8StartConversionAsynch+0x34>
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	9c 81       	ldd	r25, Y+4	; 0x04
 24c:	89 2b       	or	r24, r25
 24e:	19 f4       	brne	.+6      	; 0x256 <ADC_u8StartConversionAsynch+0x3a>
		{
			Local_u8ErrorState=NULL_POINTER;
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	3e c0       	rjmp	.+124    	; 0x2d2 <ADC_u8StartConversionAsynch+0xb6>
		}
		else
		{
			/*make ADC busy in order not to work until being idle */
			ADC_u8BusyState=BUSY;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <ADC_u8BusyState>

			/*Make ISR Source single channel asynchronous
			 * TO know from where ISR Coming because we have function ChainCoversionAsynch
			 * */
			ADC_u8ISRSource=SINGLE_CHANNEL_ASYNCH;
 25c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <ADC_u8ISRSource>

			/*Initialize the reading variable globally*/
			ADC_pu16Reading=Copy_pu16Reading;
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	9c 81       	ldd	r25, Y+4	; 0x04
 264:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 268:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>

			/*Initialize the call back notification function globally*/
			ADC_pvCallBackNotificationFunc=Copy_pvNotificationFunc;
 26c:	8d 81       	ldd	r24, Y+5	; 0x05
 26e:	9e 81       	ldd	r25, Y+6	; 0x06
 270:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <ADC_pvCallBackNotificationFunc+0x1>
 274:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ADC_pvCallBackNotificationFunc>

			/*Clear the MUX bits in ADMUX register*/
				ADMUX &=ADC_MULTIPLEXER_MASK;
 278:	87 e2       	ldi	r24, 0x27	; 39
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	20 81       	ld	r18, Z
 280:	87 e2       	ldi	r24, 0x27	; 39
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	20 7e       	andi	r18, 0xE0	; 224
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18

				/*set the required channel into the MUX bits*/
				ADMUX |=Copy_u8Channel;
 28a:	87 e2       	ldi	r24, 0x27	; 39
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	30 81       	ld	r19, Z
 292:	87 e2       	ldi	r24, 0x27	; 39
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2a 81       	ldd	r18, Y+2	; 0x02
 298:	23 2b       	or	r18, r19
 29a:	fc 01       	movw	r30, r24
 29c:	20 83       	st	Z, r18

				/*start conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADSC);
 29e:	86 e2       	ldi	r24, 0x26	; 38
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 81       	ld	r18, Z
 2a6:	86 e2       	ldi	r24, 0x26	; 38
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	20 64       	ori	r18, 0x40	; 64
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18

				/*ADC interrupt enable */
				SET_BIT(ADCSRA,ADCSRA_ADIE);
 2b0:	86 e2       	ldi	r24, 0x26	; 38
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 81       	ld	r18, Z
 2b8:	86 e2       	ldi	r24, 0x26	; 38
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	28 60       	ori	r18, 0x08	; 8
 2be:	fc 01       	movw	r30, r24
 2c0:	20 83       	st	Z, r18

				/*Set flag to indicate the ISR from where it comes*/
				SET_BIT(ADC_flag,0);
 2c2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <ADC_flag>
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <ADC_flag>
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <ADC_u8StartConversionAsynch+0xb6>
		 }
	}
	else
	{
		Local_u8ErrorState=BUSY_FUNC;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 2d2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2d4:	26 96       	adiw	r28, 0x06	; 6
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <ADC_u8StartChainAsynch>:




u8 ADC_u8StartChainAsynch(ADC_Chain_t *Copy_psChain)
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <ADC_u8StartChainAsynch+0x6>
 2ec:	0f 92       	push	r0
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	9b 83       	std	Y+3, r25	; 0x03
 2f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 2f6:	19 82       	std	Y+1, r1	; 0x01
		/*Check NULL Pointer*/
		if(Copy_psChain == NULL)
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	9b 81       	ldd	r25, Y+3	; 0x03
 2fc:	89 2b       	or	r24, r25
 2fe:	19 f4       	brne	.+6      	; 0x306 <ADC_u8StartChainAsynch+0x20>
		{
			Local_u8ErrorState=NULL_POINTER;
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	89 83       	std	Y+1, r24	; 0x01
 304:	61 c0       	rjmp	.+194    	; 0x3c8 <ADC_u8StartChainAsynch+0xe2>
		}
		else
		{
			/*Check ADC State*/
			if(ADC_u8BusyState==IDLE)
 306:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <ADC_u8BusyState>
 30a:	88 23       	and	r24, r24
 30c:	09 f0       	breq	.+2      	; 0x310 <ADC_u8StartChainAsynch+0x2a>
 30e:	5a c0       	rjmp	.+180    	; 0x3c4 <ADC_u8StartChainAsynch+0xde>
			{
				/*Make ADC Busy*/
				ADC_u8BusyState=BUSY;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <ADC_u8BusyState>

				/*Make ISR Source Chain  asynchronous*/
				 ADC_u8ISRSource=CHAIN_ASYNCH;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ADC_u8ISRSource>

				/*Initialize chain channel array*/
				ADC_pu8ChainChannelArr=Copy_psChain->Channel;
 31c:	8a 81       	ldd	r24, Y+2	; 0x02
 31e:	9b 81       	ldd	r25, Y+3	; 0x03
 320:	fc 01       	movw	r30, r24
 322:	80 81       	ld	r24, Z
 324:	91 81       	ldd	r25, Z+1	; 0x01
 326:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <ADC_pu8ChainChannelArr+0x1>
 32a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <ADC_pu8ChainChannelArr>

				/*Initialize Result  array*/
				ADC_pu16ChainResultArr=Copy_psChain->Result;
 32e:	8a 81       	ldd	r24, Y+2	; 0x02
 330:	9b 81       	ldd	r25, Y+3	; 0x03
 332:	fc 01       	movw	r30, r24
 334:	82 81       	ldd	r24, Z+2	; 0x02
 336:	93 81       	ldd	r25, Z+3	; 0x03
 338:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <ADC_pu16ChainResultArr+0x1>
 33c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <ADC_pu16ChainResultArr>

				/*Initialize size  */
				ADC_u8ChainSize=Copy_psChain->size;
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	9b 81       	ldd	r25, Y+3	; 0x03
 344:	fc 01       	movw	r30, r24
 346:	84 81       	ldd	r24, Z+4	; 0x04
 348:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ADC_u8ChainSize>

				/*Initialize chain channel array*/
				ADC_pvCallBackNotificationFunc=Copy_psChain->pvNotificationFunc;
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	9b 81       	ldd	r25, Y+3	; 0x03
 350:	fc 01       	movw	r30, r24
 352:	85 81       	ldd	r24, Z+5	; 0x05
 354:	96 81       	ldd	r25, Z+6	; 0x06
 356:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <ADC_pvCallBackNotificationFunc+0x1>
 35a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <ADC_pvCallBackNotificationFunc>

				/*Initialize current conversion index*/
				ADC_u8ChainConversionIndex=0;
 35e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ADC_u8ChainConversionIndex>

				/*Clear the MUX bits in ADMUX register*/
				ADMUX &=ADC_MULTIPLEXER_MASK;
 362:	87 e2       	ldi	r24, 0x27	; 39
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	fc 01       	movw	r30, r24
 368:	20 81       	ld	r18, Z
 36a:	87 e2       	ldi	r24, 0x27	; 39
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	20 7e       	andi	r18, 0xE0	; 224
 370:	fc 01       	movw	r30, r24
 372:	20 83       	st	Z, r18

				/*set the required channel into the MUX bits*/
				ADMUX |=ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
 374:	87 e2       	ldi	r24, 0x27	; 39
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	40 81       	ld	r20, Z
 37c:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <ADC_pu8ChainChannelArr>
 380:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <ADC_pu8ChainChannelArr+0x1>
 384:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ADC_u8ChainConversionIndex>
 388:	88 2f       	mov	r24, r24
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	82 0f       	add	r24, r18
 38e:	93 1f       	adc	r25, r19
 390:	fc 01       	movw	r30, r24
 392:	20 81       	ld	r18, Z
 394:	87 e2       	ldi	r24, 0x27	; 39
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	24 2b       	or	r18, r20
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18

				//start conversion of 1st channel
				SET_BIT(ADCSRA,ADCSRA_ADSC);
 39e:	86 e2       	ldi	r24, 0x26	; 38
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 81       	ld	r18, Z
 3a6:	86 e2       	ldi	r24, 0x26	; 38
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	20 64       	ori	r18, 0x40	; 64
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18

				//enable interrupt
				SET_BIT(ADCSRA,ADCSRA_ADIE);
 3b0:	86 e2       	ldi	r24, 0x26	; 38
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	fc 01       	movw	r30, r24
 3b6:	20 81       	ld	r18, Z
 3b8:	86 e2       	ldi	r24, 0x26	; 38
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	28 60       	ori	r18, 0x08	; 8
 3be:	fc 01       	movw	r30, r24
 3c0:	20 83       	st	Z, r18
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <ADC_u8StartChainAsynch+0xe2>

			}
			else
			{
				Local_u8ErrorState=BUSY_FUNC;
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	89 83       	std	Y+1, r24	; 0x01
			}
		}

return Local_u8ErrorState;
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
}
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <__vector_16>:
*/


void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
 400:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ADC_u8ISRSource>
 404:	88 23       	and	r24, r24
 406:	f9 f4       	brne	.+62     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
	{
			/*Read ADC Result */
			#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
					*ADC_pu16Reading=ADCH;
 408:	85 e2       	ldi	r24, 0x25	; 37
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	fc 01       	movw	r30, r24
 40e:	20 81       	ld	r18, Z
 410:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 414:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 418:	22 2f       	mov	r18, r18
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	fc 01       	movw	r30, r24
 41e:	31 83       	std	Z+1, r19	; 0x01
 420:	20 83       	st	Z, r18
			#else
			#error "Wrong Resolution Selection"
			#endif

				/*Make ADC state be IDLE because it finished*/
					ADC_u8BusyState=IDLE;
 422:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ADC_u8BusyState>

				/*Invoke the call back notification*/
				ADC_pvCallBackNotificationFunc();
 426:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_pvCallBackNotificationFunc>
 42a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <ADC_pvCallBackNotificationFunc+0x1>
 42e:	fc 01       	movw	r30, r24
 430:	09 95       	icall

				/*Disable the ADC Conversion complete interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
 432:	86 e2       	ldi	r24, 0x26	; 38
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	20 81       	ld	r18, Z
 43a:	86 e2       	ldi	r24, 0x26	; 38
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	27 7f       	andi	r18, 0xF7	; 247
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
				/*Start the conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADIE);
			}
	}

}
 444:	5e c0       	rjmp	.+188    	; 0x502 <__FUSE_REGION_LENGTH__+0x102>

				/*Disable the ADC Conversion complete interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
	}

	else if(ADC_u8ISRSource==CHAIN_ASYNCH)
 446:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <ADC_u8ISRSource>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	09 f0       	breq	.+2      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
 44e:	59 c0       	rjmp	.+178    	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
	{
			/*Read the current conversion*/
			#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
					ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex]=ADCH;
 450:	85 e2       	ldi	r24, 0x25	; 37
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	fc 01       	movw	r30, r24
 456:	40 81       	ld	r20, Z
 458:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <ADC_pu16ChainResultArr>
 45c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <ADC_pu16ChainResultArr+0x1>
 460:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ADC_u8ChainConversionIndex>
 464:	88 2f       	mov	r24, r24
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	82 0f       	add	r24, r18
 46e:	93 1f       	adc	r25, r19
 470:	24 2f       	mov	r18, r20
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	fc 01       	movw	r30, r24
 476:	31 83       	std	Z+1, r19	; 0x01
 478:	20 83       	st	Z, r18
			#else
			#error "Wrong Resolution Selection"
			#endif

			/*increment chain index*/
					ADC_u8ChainConversionIndex++;
 47a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ADC_u8ChainConversionIndex>
 47e:	8f 5f       	subi	r24, 0xFF	; 255
 480:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <ADC_u8ChainConversionIndex>

			/*Check the size */
			if(ADC_u8ChainConversionIndex==ADC_u8ChainSize)
 484:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <ADC_u8ChainConversionIndex>
 488:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ADC_u8ChainSize>
 48c:	98 17       	cp	r25, r24
 48e:	91 f4       	brne	.+36     	; 0x4b4 <__FUSE_REGION_LENGTH__+0xb4>
			{
				/*ADC is now idle*/
				ADC_u8BusyState=IDLE;
 490:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <ADC_u8BusyState>

				/*invoke the call back  notification Function*/
				ADC_pvCallBackNotificationFunc();
 494:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <ADC_pvCallBackNotificationFunc>
 498:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <ADC_pvCallBackNotificationFunc+0x1>
 49c:	fc 01       	movw	r30, r24
 49e:	09 95       	icall

				/*Disable ADC conversion complete interrupt*/
				CLR_BIT(ADCSRA,ADCSRA_ADIE);
 4a0:	86 e2       	ldi	r24, 0x26	; 38
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 81       	ld	r18, Z
 4a8:	86 e2       	ldi	r24, 0x26	; 38
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	27 7f       	andi	r18, 0xF7	; 247
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
				/*Start the conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADIE);
			}
	}

}
 4b2:	27 c0       	rjmp	.+78     	; 0x502 <__FUSE_REGION_LENGTH__+0x102>
			}
			else
			{
				/*Chain is not finished*/
				/*Set the new required channel */
				ADMUX &=ADC_MULTIPLEXER_MASK;
 4b4:	87 e2       	ldi	r24, 0x27	; 39
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 81       	ld	r18, Z
 4bc:	87 e2       	ldi	r24, 0x27	; 39
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	20 7e       	andi	r18, 0xE0	; 224
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
				ADMUX |=ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
 4c6:	87 e2       	ldi	r24, 0x27	; 39
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	fc 01       	movw	r30, r24
 4cc:	40 81       	ld	r20, Z
 4ce:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <ADC_pu8ChainChannelArr>
 4d2:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <ADC_pu8ChainChannelArr+0x1>
 4d6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <ADC_u8ChainConversionIndex>
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	82 0f       	add	r24, r18
 4e0:	93 1f       	adc	r25, r19
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 81       	ld	r18, Z
 4e6:	87 e2       	ldi	r24, 0x27	; 39
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	24 2b       	or	r18, r20
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18

				/*Start the conversion*/
				SET_BIT(ADCSRA,ADCSRA_ADIE);
 4f0:	86 e2       	ldi	r24, 0x26	; 38
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 81       	ld	r18, Z
 4f8:	86 e2       	ldi	r24, 0x26	; 38
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	28 60       	ori	r18, 0x08	; 8
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
			}
	}

}
 502:	00 00       	nop
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	00 d0       	rcall	.+0      	; 0x530 <DIO_u8SetPinValue+0x6>
 530:	00 d0       	rcall	.+0      	; 0x532 <DIO_u8SetPinValue+0x8>
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	8a 83       	std	Y+2, r24	; 0x02
 538:	6b 83       	std	Y+3, r22	; 0x03
 53a:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
 53c:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	88 30       	cpi	r24, 0x08	; 8
 542:	08 f0       	brcs	.+2      	; 0x546 <DIO_u8SetPinValue+0x1c>
 544:	f1 c0       	rjmp	.+482    	; 0x728 <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
 546:	8c 81       	ldd	r24, Y+4	; 0x04
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	09 f0       	breq	.+2      	; 0x54e <DIO_u8SetPinValue+0x24>
 54c:	71 c0       	rjmp	.+226    	; 0x630 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
 54e:	8a 81       	ldd	r24, Y+2	; 0x02
 550:	88 2f       	mov	r24, r24
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	84 30       	cpi	r24, 0x04	; 4
 556:	91 05       	cpc	r25, r1
 558:	09 f4       	brne	.+2      	; 0x55c <DIO_u8SetPinValue+0x32>
 55a:	52 c0       	rjmp	.+164    	; 0x600 <DIO_u8SetPinValue+0xd6>
 55c:	85 30       	cpi	r24, 0x05	; 5
 55e:	91 05       	cpc	r25, r1
 560:	0c f0       	brlt	.+2      	; 0x564 <DIO_u8SetPinValue+0x3a>
 562:	64 c0       	rjmp	.+200    	; 0x62c <DIO_u8SetPinValue+0x102>
 564:	83 30       	cpi	r24, 0x03	; 3
 566:	91 05       	cpc	r25, r1
 568:	a9 f1       	breq	.+106    	; 0x5d4 <DIO_u8SetPinValue+0xaa>
 56a:	84 30       	cpi	r24, 0x04	; 4
 56c:	91 05       	cpc	r25, r1
 56e:	0c f0       	brlt	.+2      	; 0x572 <DIO_u8SetPinValue+0x48>
 570:	5d c0       	rjmp	.+186    	; 0x62c <DIO_u8SetPinValue+0x102>
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	19 f0       	breq	.+6      	; 0x57c <DIO_u8SetPinValue+0x52>
 576:	01 97       	sbiw	r24, 0x01	; 1
 578:	b9 f0       	breq	.+46     	; 0x5a8 <DIO_u8SetPinValue+0x7e>
 57a:	58 c0       	rjmp	.+176    	; 0x62c <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 57c:	8b e3       	ldi	r24, 0x3B	; 59
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	fc 01       	movw	r30, r24
 582:	80 81       	ld	r24, Z
 584:	48 2f       	mov	r20, r24
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_u8SetPinValue+0x6c>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	2a 95       	dec	r18
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_u8SetPinValue+0x68>
 59a:	24 2f       	mov	r18, r20
 59c:	28 2b       	or	r18, r24
 59e:	8b e3       	ldi	r24, 0x3B	; 59
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	fc 01       	movw	r30, r24
 5a4:	20 83       	st	Z, r18
 5a6:	c2 c0       	rjmp	.+388    	; 0x72c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 5a8:	88 e3       	ldi	r24, 0x38	; 56
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	fc 01       	movw	r30, r24
 5ae:	80 81       	ld	r24, Z
 5b0:	48 2f       	mov	r20, r24
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	28 2f       	mov	r18, r24
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_u8SetPinValue+0x98>
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	2a 95       	dec	r18
 5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_u8SetPinValue+0x94>
 5c6:	24 2f       	mov	r18, r20
 5c8:	28 2b       	or	r18, r24
 5ca:	88 e3       	ldi	r24, 0x38	; 56
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
 5d2:	ac c0       	rjmp	.+344    	; 0x72c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 5d4:	85 e3       	ldi	r24, 0x35	; 53
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	fc 01       	movw	r30, r24
 5da:	80 81       	ld	r24, Z
 5dc:	48 2f       	mov	r20, r24
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_u8SetPinValue+0xc4>
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	2a 95       	dec	r18
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_u8SetPinValue+0xc0>
 5f2:	24 2f       	mov	r18, r20
 5f4:	28 2b       	or	r18, r24
 5f6:	85 e3       	ldi	r24, 0x35	; 53
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	fc 01       	movw	r30, r24
 5fc:	20 83       	st	Z, r18
 5fe:	96 c0       	rjmp	.+300    	; 0x72c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 600:	82 e3       	ldi	r24, 0x32	; 50
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	48 2f       	mov	r20, r24
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	28 2f       	mov	r18, r24
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 c0       	rjmp	.+4      	; 0x61a <DIO_u8SetPinValue+0xf0>
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	2a 95       	dec	r18
 61c:	e2 f7       	brpl	.-8      	; 0x616 <DIO_u8SetPinValue+0xec>
 61e:	24 2f       	mov	r18, r20
 620:	28 2b       	or	r18, r24
 622:	82 e3       	ldi	r24, 0x32	; 50
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
 62a:	80 c0       	rjmp	.+256    	; 0x72c <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 62c:	19 82       	std	Y+1, r1	; 0x01
 62e:	7e c0       	rjmp	.+252    	; 0x72c <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 630:	8c 81       	ldd	r24, Y+4	; 0x04
 632:	88 23       	and	r24, r24
 634:	09 f0       	breq	.+2      	; 0x638 <DIO_u8SetPinValue+0x10e>
 636:	75 c0       	rjmp	.+234    	; 0x722 <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	88 2f       	mov	r24, r24
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	84 30       	cpi	r24, 0x04	; 4
 640:	91 05       	cpc	r25, r1
 642:	09 f4       	brne	.+2      	; 0x646 <DIO_u8SetPinValue+0x11c>
 644:	55 c0       	rjmp	.+170    	; 0x6f0 <DIO_u8SetPinValue+0x1c6>
 646:	85 30       	cpi	r24, 0x05	; 5
 648:	91 05       	cpc	r25, r1
 64a:	0c f0       	brlt	.+2      	; 0x64e <DIO_u8SetPinValue+0x124>
 64c:	68 c0       	rjmp	.+208    	; 0x71e <DIO_u8SetPinValue+0x1f4>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	91 05       	cpc	r25, r1
 652:	b9 f1       	breq	.+110    	; 0x6c2 <DIO_u8SetPinValue+0x198>
 654:	84 30       	cpi	r24, 0x04	; 4
 656:	91 05       	cpc	r25, r1
 658:	0c f0       	brlt	.+2      	; 0x65c <DIO_u8SetPinValue+0x132>
 65a:	61 c0       	rjmp	.+194    	; 0x71e <DIO_u8SetPinValue+0x1f4>
 65c:	00 97       	sbiw	r24, 0x00	; 0
 65e:	19 f0       	breq	.+6      	; 0x666 <DIO_u8SetPinValue+0x13c>
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	c1 f0       	breq	.+48     	; 0x694 <DIO_u8SetPinValue+0x16a>
 664:	5c c0       	rjmp	.+184    	; 0x71e <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 666:	8b e3       	ldi	r24, 0x3B	; 59
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	fc 01       	movw	r30, r24
 66c:	80 81       	ld	r24, Z
 66e:	48 2f       	mov	r20, r24
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	28 2f       	mov	r18, r24
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_u8SetPinValue+0x156>
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	2a 95       	dec	r18
 682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_u8SetPinValue+0x152>
 684:	80 95       	com	r24
 686:	24 2f       	mov	r18, r20
 688:	28 23       	and	r18, r24
 68a:	8b e3       	ldi	r24, 0x3B	; 59
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	fc 01       	movw	r30, r24
 690:	20 83       	st	Z, r18
 692:	4c c0       	rjmp	.+152    	; 0x72c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 694:	88 e3       	ldi	r24, 0x38	; 56
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	fc 01       	movw	r30, r24
 69a:	80 81       	ld	r24, Z
 69c:	48 2f       	mov	r20, r24
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	28 2f       	mov	r18, r24
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_u8SetPinValue+0x184>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	2a 95       	dec	r18
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_u8SetPinValue+0x180>
 6b2:	80 95       	com	r24
 6b4:	24 2f       	mov	r18, r20
 6b6:	28 23       	and	r18, r24
 6b8:	88 e3       	ldi	r24, 0x38	; 56
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
 6c0:	35 c0       	rjmp	.+106    	; 0x72c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 6c2:	85 e3       	ldi	r24, 0x35	; 53
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	fc 01       	movw	r30, r24
 6c8:	80 81       	ld	r24, Z
 6ca:	48 2f       	mov	r20, r24
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_u8SetPinValue+0x1b2>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	2a 95       	dec	r18
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_u8SetPinValue+0x1ae>
 6e0:	80 95       	com	r24
 6e2:	24 2f       	mov	r18, r20
 6e4:	28 23       	and	r18, r24
 6e6:	85 e3       	ldi	r24, 0x35	; 53
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	fc 01       	movw	r30, r24
 6ec:	20 83       	st	Z, r18
 6ee:	1e c0       	rjmp	.+60     	; 0x72c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 6f0:	82 e3       	ldi	r24, 0x32	; 50
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	fc 01       	movw	r30, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	48 2f       	mov	r20, r24
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	28 2f       	mov	r18, r24
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_u8SetPinValue+0x1e0>
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	2a 95       	dec	r18
 70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_u8SetPinValue+0x1dc>
 70e:	80 95       	com	r24
 710:	24 2f       	mov	r18, r20
 712:	28 23       	and	r18, r24
 714:	82 e3       	ldi	r24, 0x32	; 50
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	fc 01       	movw	r30, r24
 71a:	20 83       	st	Z, r18
 71c:	07 c0       	rjmp	.+14     	; 0x72c <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 71e:	19 82       	std	Y+1, r1	; 0x01
 720:	05 c0       	rjmp	.+10     	; 0x72c <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	89 83       	std	Y+1, r24	; 0x01
 726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 72c:	89 81       	ldd	r24, Y+1	; 0x01

}
 72e:	0f 90       	pop	r0
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	00 d0       	rcall	.+0      	; 0x742 <DIO_u8SetPortValue+0x6>
 742:	0f 92       	push	r0
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	8a 83       	std	Y+2, r24	; 0x02
 74a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 74c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	88 2f       	mov	r24, r24
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	84 30       	cpi	r24, 0x04	; 4
 756:	91 05       	cpc	r25, r1
 758:	01 f1       	breq	.+64     	; 0x79a <DIO_u8SetPortValue+0x5e>
 75a:	85 30       	cpi	r24, 0x05	; 5
 75c:	91 05       	cpc	r25, r1
 75e:	1c f5       	brge	.+70     	; 0x7a6 <DIO_u8SetPortValue+0x6a>
 760:	83 30       	cpi	r24, 0x03	; 3
 762:	91 05       	cpc	r25, r1
 764:	a1 f0       	breq	.+40     	; 0x78e <DIO_u8SetPortValue+0x52>
 766:	84 30       	cpi	r24, 0x04	; 4
 768:	91 05       	cpc	r25, r1
 76a:	ec f4       	brge	.+58     	; 0x7a6 <DIO_u8SetPortValue+0x6a>
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	19 f0       	breq	.+6      	; 0x776 <DIO_u8SetPortValue+0x3a>
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	39 f0       	breq	.+14     	; 0x782 <DIO_u8SetPortValue+0x46>
 774:	18 c0       	rjmp	.+48     	; 0x7a6 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 776:	8b e3       	ldi	r24, 0x3B	; 59
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	2b 81       	ldd	r18, Y+3	; 0x03
 77c:	fc 01       	movw	r30, r24
 77e:	20 83       	st	Z, r18
 780:	15 c0       	rjmp	.+42     	; 0x7ac <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 782:	88 e3       	ldi	r24, 0x38	; 56
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	2b 81       	ldd	r18, Y+3	; 0x03
 788:	fc 01       	movw	r30, r24
 78a:	20 83       	st	Z, r18
 78c:	0f c0       	rjmp	.+30     	; 0x7ac <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 78e:	85 e3       	ldi	r24, 0x35	; 53
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	2b 81       	ldd	r18, Y+3	; 0x03
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
 798:	09 c0       	rjmp	.+18     	; 0x7ac <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 79a:	82 e3       	ldi	r24, 0x32	; 50
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	2b 81       	ldd	r18, Y+3	; 0x03
 7a0:	fc 01       	movw	r30, r24
 7a2:	20 83       	st	Z, r18
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	89 83       	std	Y+1, r24	; 0x01
 7aa:	00 00       	nop
				}


	return Local_u8ErrorState;
 7ac:	89 81       	ldd	r24, Y+1	; 0x01

}
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	0f 90       	pop	r0
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	00 d0       	rcall	.+0      	; 0x7c0 <DIO_u8GetPinValue+0x6>
 7c0:	00 d0       	rcall	.+0      	; 0x7c2 <DIO_u8GetPinValue+0x8>
 7c2:	0f 92       	push	r0
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
 7c8:	8a 83       	std	Y+2, r24	; 0x02
 7ca:	6b 83       	std	Y+3, r22	; 0x03
 7cc:	5d 83       	std	Y+5, r21	; 0x05
 7ce:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 7d0:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 7d2:	8c 81       	ldd	r24, Y+4	; 0x04
 7d4:	9d 81       	ldd	r25, Y+5	; 0x05
 7d6:	89 2b       	or	r24, r25
 7d8:	09 f4       	brne	.+2      	; 0x7dc <DIO_u8GetPinValue+0x22>
 7da:	73 c0       	rjmp	.+230    	; 0x8c2 <__stack+0x63>
 7dc:	8b 81       	ldd	r24, Y+3	; 0x03
 7de:	88 30       	cpi	r24, 0x08	; 8
 7e0:	08 f0       	brcs	.+2      	; 0x7e4 <DIO_u8GetPinValue+0x2a>
 7e2:	6f c0       	rjmp	.+222    	; 0x8c2 <__stack+0x63>
				{
					switch(Copy_u8Port)
 7e4:	8a 81       	ldd	r24, Y+2	; 0x02
 7e6:	88 2f       	mov	r24, r24
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	84 30       	cpi	r24, 0x04	; 4
 7ec:	91 05       	cpc	r25, r1
 7ee:	09 f4       	brne	.+2      	; 0x7f2 <DIO_u8GetPinValue+0x38>
 7f0:	4f c0       	rjmp	.+158    	; 0x890 <__stack+0x31>
 7f2:	85 30       	cpi	r24, 0x05	; 5
 7f4:	91 05       	cpc	r25, r1
 7f6:	0c f0       	brlt	.+2      	; 0x7fa <DIO_u8GetPinValue+0x40>
 7f8:	60 c0       	rjmp	.+192    	; 0x8ba <__stack+0x5b>
 7fa:	83 30       	cpi	r24, 0x03	; 3
 7fc:	91 05       	cpc	r25, r1
 7fe:	99 f1       	breq	.+102    	; 0x866 <__stack+0x7>
 800:	84 30       	cpi	r24, 0x04	; 4
 802:	91 05       	cpc	r25, r1
 804:	0c f0       	brlt	.+2      	; 0x808 <DIO_u8GetPinValue+0x4e>
 806:	59 c0       	rjmp	.+178    	; 0x8ba <__stack+0x5b>
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	19 f0       	breq	.+6      	; 0x812 <DIO_u8GetPinValue+0x58>
 80c:	01 97       	sbiw	r24, 0x01	; 1
 80e:	b1 f0       	breq	.+44     	; 0x83c <DIO_u8GetPinValue+0x82>
 810:	54 c0       	rjmp	.+168    	; 0x8ba <__stack+0x5b>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 812:	89 e3       	ldi	r24, 0x39	; 57
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	fc 01       	movw	r30, r24
 818:	80 81       	ld	r24, Z
 81a:	88 2f       	mov	r24, r24
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	2b 81       	ldd	r18, Y+3	; 0x03
 820:	22 2f       	mov	r18, r18
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_u8GetPinValue+0x70>
 826:	95 95       	asr	r25
 828:	87 95       	ror	r24
 82a:	2a 95       	dec	r18
 82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_u8GetPinValue+0x6c>
 82e:	28 2f       	mov	r18, r24
 830:	21 70       	andi	r18, 0x01	; 1
 832:	8c 81       	ldd	r24, Y+4	; 0x04
 834:	9d 81       	ldd	r25, Y+5	; 0x05
 836:	fc 01       	movw	r30, r24
 838:	20 83       	st	Z, r18
 83a:	42 c0       	rjmp	.+132    	; 0x8c0 <__stack+0x61>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 83c:	86 e3       	ldi	r24, 0x36	; 54
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	fc 01       	movw	r30, r24
 842:	80 81       	ld	r24, Z
 844:	88 2f       	mov	r24, r24
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	2b 81       	ldd	r18, Y+3	; 0x03
 84a:	22 2f       	mov	r18, r18
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_u8GetPinValue+0x9a>
 850:	95 95       	asr	r25
 852:	87 95       	ror	r24
 854:	2a 95       	dec	r18
 856:	e2 f7       	brpl	.-8      	; 0x850 <DIO_u8GetPinValue+0x96>
 858:	28 2f       	mov	r18, r24
 85a:	21 70       	andi	r18, 0x01	; 1
 85c:	8c 81       	ldd	r24, Y+4	; 0x04
 85e:	9d 81       	ldd	r25, Y+5	; 0x05
 860:	fc 01       	movw	r30, r24
 862:	20 83       	st	Z, r18
 864:	2d c0       	rjmp	.+90     	; 0x8c0 <__stack+0x61>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 866:	83 e3       	ldi	r24, 0x33	; 51
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	fc 01       	movw	r30, r24
 86c:	80 81       	ld	r24, Z
 86e:	88 2f       	mov	r24, r24
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	2b 81       	ldd	r18, Y+3	; 0x03
 874:	22 2f       	mov	r18, r18
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
 87a:	95 95       	asr	r25
 87c:	87 95       	ror	r24
 87e:	2a 95       	dec	r18
 880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
 882:	28 2f       	mov	r18, r24
 884:	21 70       	andi	r18, 0x01	; 1
 886:	8c 81       	ldd	r24, Y+4	; 0x04
 888:	9d 81       	ldd	r25, Y+5	; 0x05
 88a:	fc 01       	movw	r30, r24
 88c:	20 83       	st	Z, r18
 88e:	18 c0       	rjmp	.+48     	; 0x8c0 <__stack+0x61>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 890:	80 e3       	ldi	r24, 0x30	; 48
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	fc 01       	movw	r30, r24
 896:	80 81       	ld	r24, Z
 898:	88 2f       	mov	r24, r24
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	2b 81       	ldd	r18, Y+3	; 0x03
 89e:	22 2f       	mov	r18, r18
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	95 95       	asr	r25
 8a6:	87 95       	ror	r24
 8a8:	2a 95       	dec	r18
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	28 2f       	mov	r18, r24
 8ae:	21 70       	andi	r18, 0x01	; 1
 8b0:	8c 81       	ldd	r24, Y+4	; 0x04
 8b2:	9d 81       	ldd	r25, Y+5	; 0x05
 8b4:	fc 01       	movw	r30, r24
 8b6:	20 83       	st	Z, r18
 8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__stack+0x61>
					     default : Local_u8ErrorState=1; break;
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	89 83       	std	Y+1, r24	; 0x01
 8be:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 8c6:	89 81       	ldd	r24, Y+1	; 0x01


}
 8c8:	0f 90       	pop	r0
 8ca:	0f 90       	pop	r0
 8cc:	0f 90       	pop	r0
 8ce:	0f 90       	pop	r0
 8d0:	0f 90       	pop	r0
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret

000008d8 <GIE_voidEnable>:
#include"GIE_interface.h"
#include"GIE_register.h"


void GIE_voidEnable(void)
{
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 8e0:	8f e5       	ldi	r24, 0x5F	; 95
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	fc 01       	movw	r30, r24
 8e6:	20 81       	ld	r18, Z
 8e8:	8f e5       	ldi	r24, 0x5F	; 95
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	20 68       	ori	r18, 0x80	; 128
 8ee:	fc 01       	movw	r30, r24
 8f0:	20 83       	st	Z, r18
	
}
 8f2:	00 00       	nop
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	08 95       	ret

000008fa <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	cd b7       	in	r28, 0x3d	; 61
 900:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,SREG_I);
 902:	8f e5       	ldi	r24, 0x5F	; 95
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	fc 01       	movw	r30, r24
 908:	20 81       	ld	r18, Z
 90a:	8f e5       	ldi	r24, 0x5F	; 95
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	2f 77       	andi	r18, 0x7F	; 127
 910:	fc 01       	movw	r30, r24
 912:	20 83       	st	Z, r18
	
 914:	00 00       	nop
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	08 95       	ret

0000091c <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
 920:	cd b7       	in	r28, 0x3d	; 61
 922:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 924:	8a e3       	ldi	r24, 0x3A	; 58
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	21 e0       	ldi	r18, 0x01	; 1
 92a:	fc 01       	movw	r30, r24
 92c:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
 92e:	87 e3       	ldi	r24, 0x37	; 55
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	fc 01       	movw	r30, r24
 934:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 936:	84 e3       	ldi	r24, 0x34	; 52
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	2f ef       	ldi	r18, 0xFF	; 255
 93c:	fc 01       	movw	r30, r24
 93e:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 940:	81 e3       	ldi	r24, 0x31	; 49
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	fc 01       	movw	r30, r24
 946:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 948:	8b e3       	ldi	r24, 0x3B	; 59
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	fc 01       	movw	r30, r24
 94e:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 950:	88 e3       	ldi	r24, 0x38	; 56
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	fc 01       	movw	r30, r24
 956:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 958:	85 e3       	ldi	r24, 0x35	; 53
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	fc 01       	movw	r30, r24
 95e:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 960:	82 e3       	ldi	r24, 0x32	; 50
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	fc 01       	movw	r30, r24
 966:	10 82       	st	Z, r1
}
 968:	00 00       	nop
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <main>:
u8 APP_u8ChainSynchResultArr[];

ADC_ChainSynch_t Chain1={APP_u8ChainSynchChannelArr,APP_u8ChainSynchResultArr,3};

void main()
{
 970:	cf 93       	push	r28
 972:	df 93       	push	r29
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 978:	0e 94 8e 04 	call	0x91c	; 0x91c <PORT_voidInit>
	ADC_voidInit();
 97c:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>

	while(1)
	{
		GIE_voidEnable();
 980:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <GIE_voidEnable>
 984:	fd cf       	rjmp	.-6      	; 0x980 <main+0x10>

00000986 <APP_voidNotificationSingle>:


}

void APP_voidNotificationSingle (void)
{
 986:	cf 93       	push	r28
 988:	df 93       	push	r29
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62

	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,App_u16ADCReading);
 98e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <App_u16ADCReading>
 992:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <App_u16ADCReading+0x1>
 996:	48 2f       	mov	r20, r24
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_u8SetPinValue>
}
 9a0:	00 00       	nop
 9a2:	df 91       	pop	r29
 9a4:	cf 91       	pop	r28
 9a6:	08 95       	ret

000009a8 <APP_voidNotificationChain>:

void APP_voidNotificationChain (void)
{
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
	//DIO_u8SetPortValue(DIO_u8PORTA,App_u16ADCReading);
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,App_u16ADCReading);
 9b0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <App_u16ADCReading>
 9b4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <App_u16ADCReading+0x1>
 9b8:	48 2f       	mov	r20, r24
 9ba:	60 e0       	ldi	r22, 0x00	; 0
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_u8SetPinValue>
}
 9c2:	00 00       	nop
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	08 95       	ret

000009ca <_exit>:
 9ca:	f8 94       	cli

000009cc <__stop_program>:
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <__stop_program>
