
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000a80  00000b14  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000b14  2**0
                  ALLOC
  3 .stab         0000195c  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000107f  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000034ef  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003500  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000100  00000000  00000000  00003540  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000616  00000000  00000000  00003640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000543  00000000  00000000  00003c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000541  00000000  00000000  00004199  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  000046da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c6 04 	call	0x98c	; 0x98c <main>
  74:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8SetPinValue+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8SetPinValue+0x8>
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	8a 83       	std	Y+2, r24	; 0x02
  8a:	6b 83       	std	Y+3, r22	; 0x03
  8c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  8e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  90:	8b 81       	ldd	r24, Y+3	; 0x03
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_u8SetPinValue+0x1c>
  96:	f3 c0       	rjmp	.+486    	; 0x27e <DIO_u8SetPinValue+0x202>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  98:	8c 81       	ldd	r24, Y+4	; 0x04
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	72 c0       	rjmp	.+228    	; 0x184 <DIO_u8SetPinValue+0x108>
		{
		switch(Copy_u8Port)
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	88 2f       	mov	r24, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	91 05       	cpc	r25, r1
  aa:	09 f4       	brne	.+2      	; 0xae <DIO_u8SetPinValue+0x32>
  ac:	52 c0       	rjmp	.+164    	; 0x152 <DIO_u8SetPinValue+0xd6>
  ae:	85 30       	cpi	r24, 0x05	; 5
  b0:	91 05       	cpc	r25, r1
  b2:	0c f0       	brlt	.+2      	; 0xb6 <DIO_u8SetPinValue+0x3a>
  b4:	64 c0       	rjmp	.+200    	; 0x17e <DIO_u8SetPinValue+0x102>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	91 05       	cpc	r25, r1
  ba:	a9 f1       	breq	.+106    	; 0x126 <DIO_u8SetPinValue+0xaa>
  bc:	84 30       	cpi	r24, 0x04	; 4
  be:	91 05       	cpc	r25, r1
  c0:	0c f0       	brlt	.+2      	; 0xc4 <DIO_u8SetPinValue+0x48>
  c2:	5d c0       	rjmp	.+186    	; 0x17e <DIO_u8SetPinValue+0x102>
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	19 f0       	breq	.+6      	; 0xce <DIO_u8SetPinValue+0x52>
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	b9 f0       	breq	.+46     	; 0xfa <DIO_u8SetPinValue+0x7e>
  cc:	58 c0       	rjmp	.+176    	; 0x17e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  ce:	8b e3       	ldi	r24, 0x3B	; 59
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	28 2f       	mov	r18, r24
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_u8SetPinValue+0x6c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	2a 95       	dec	r18
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_u8SetPinValue+0x68>
  ec:	24 2f       	mov	r18, r20
  ee:	28 2b       	or	r18, r24
  f0:	8b e3       	ldi	r24, 0x3B	; 59
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
  f8:	c4 c0       	rjmp	.+392    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_u8SetPinValue+0x98>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_u8SetPinValue+0x94>
 118:	24 2f       	mov	r18, r20
 11a:	28 2b       	or	r18, r24
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	ae c0       	rjmp	.+348    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 126:	85 e3       	ldi	r24, 0x35	; 53
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	80 81       	ld	r24, Z
 12e:	48 2f       	mov	r20, r24
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_u8SetPinValue+0xc4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	2a 95       	dec	r18
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_u8SetPinValue+0xc0>
 144:	24 2f       	mov	r18, r20
 146:	28 2b       	or	r18, r24
 148:	85 e3       	ldi	r24, 0x35	; 53
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	98 c0       	rjmp	.+304    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 152:	82 e3       	ldi	r24, 0x32	; 50
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	fc 01       	movw	r30, r24
 158:	80 81       	ld	r24, Z
 15a:	48 2f       	mov	r20, r24
 15c:	8b 81       	ldd	r24, Y+3	; 0x03
 15e:	28 2f       	mov	r18, r24
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8SetPinValue+0xf0>
 168:	88 0f       	add	r24, r24
 16a:	99 1f       	adc	r25, r25
 16c:	2a 95       	dec	r18
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_u8SetPinValue+0xec>
 170:	24 2f       	mov	r18, r20
 172:	28 2b       	or	r18, r24
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
 17c:	82 c0       	rjmp	.+260    	; 0x282 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	89 83       	std	Y+1, r24	; 0x01
 182:	7f c0       	rjmp	.+254    	; 0x282 <DIO_u8SetPinValue+0x206>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	88 23       	and	r24, r24
 188:	09 f0       	breq	.+2      	; 0x18c <DIO_u8SetPinValue+0x110>
 18a:	76 c0       	rjmp	.+236    	; 0x278 <DIO_u8SetPinValue+0x1fc>
		{
			switch(Copy_u8Port)
 18c:	8a 81       	ldd	r24, Y+2	; 0x02
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	84 30       	cpi	r24, 0x04	; 4
 194:	91 05       	cpc	r25, r1
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_u8SetPinValue+0x11e>
 198:	55 c0       	rjmp	.+170    	; 0x244 <DIO_u8SetPinValue+0x1c8>
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	91 05       	cpc	r25, r1
 19e:	0c f0       	brlt	.+2      	; 0x1a2 <DIO_u8SetPinValue+0x126>
 1a0:	68 c0       	rjmp	.+208    	; 0x272 <DIO_u8SetPinValue+0x1f6>
 1a2:	83 30       	cpi	r24, 0x03	; 3
 1a4:	91 05       	cpc	r25, r1
 1a6:	b9 f1       	breq	.+110    	; 0x216 <DIO_u8SetPinValue+0x19a>
 1a8:	84 30       	cpi	r24, 0x04	; 4
 1aa:	91 05       	cpc	r25, r1
 1ac:	0c f0       	brlt	.+2      	; 0x1b0 <DIO_u8SetPinValue+0x134>
 1ae:	61 c0       	rjmp	.+194    	; 0x272 <DIO_u8SetPinValue+0x1f6>
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	19 f0       	breq	.+6      	; 0x1ba <DIO_u8SetPinValue+0x13e>
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <DIO_u8SetPinValue+0x16c>
 1b8:	5c c0       	rjmp	.+184    	; 0x272 <DIO_u8SetPinValue+0x1f6>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1ba:	8b e3       	ldi	r24, 0x3B	; 59
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	48 2f       	mov	r20, r24
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_u8SetPinValue+0x158>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	2a 95       	dec	r18
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_u8SetPinValue+0x154>
 1d8:	80 95       	com	r24
 1da:	24 2f       	mov	r18, r20
 1dc:	28 23       	and	r18, r24
 1de:	8b e3       	ldi	r24, 0x3B	; 59
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
 1e6:	4d c0       	rjmp	.+154    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1e8:	88 e3       	ldi	r24, 0x38	; 56
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_u8SetPinValue+0x186>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_u8SetPinValue+0x182>
 206:	80 95       	com	r24
 208:	24 2f       	mov	r18, r20
 20a:	28 23       	and	r18, r24
 20c:	88 e3       	ldi	r24, 0x38	; 56
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
 214:	36 c0       	rjmp	.+108    	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 216:	85 e3       	ldi	r24, 0x35	; 53
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	fc 01       	movw	r30, r24
 21c:	80 81       	ld	r24, Z
 21e:	48 2f       	mov	r20, r24
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	28 2f       	mov	r18, r24
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_u8SetPinValue+0x1b4>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	2a 95       	dec	r18
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_u8SetPinValue+0x1b0>
 234:	80 95       	com	r24
 236:	24 2f       	mov	r18, r20
 238:	28 23       	and	r18, r24
 23a:	85 e3       	ldi	r24, 0x35	; 53
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	20 83       	st	Z, r18
 242:	1f c0       	rjmp	.+62     	; 0x282 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 244:	82 e3       	ldi	r24, 0x32	; 50
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_u8SetPinValue+0x1e2>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	2a 95       	dec	r18
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_u8SetPinValue+0x1de>
 262:	80 95       	com	r24
 264:	24 2f       	mov	r18, r20
 266:	28 23       	and	r18, r24
 268:	82 e3       	ldi	r24, 0x32	; 50
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	20 83       	st	Z, r18
 270:	08 c0       	rjmp	.+16     	; 0x282 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	89 83       	std	Y+1, r24	; 0x01
 276:	05 c0       	rjmp	.+10     	; 0x282 <DIO_u8SetPinValue+0x206>


		}
		else
		{
		Local_u8ErrorState=1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_u8SetPinValue+0x206>
		}


}
else{
	 Local_u8ErrorState=1;
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 282:	89 81       	ldd	r24, Y+1	; 0x01

}
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	00 d0       	rcall	.+0      	; 0x298 <DIO_u8SetPortValue+0x6>
 298:	0f 92       	push	r0
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	8a 83       	std	Y+2, r24	; 0x02
 2a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2a2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	88 2f       	mov	r24, r24
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	91 05       	cpc	r25, r1
 2ae:	01 f1       	breq	.+64     	; 0x2f0 <DIO_u8SetPortValue+0x5e>
 2b0:	85 30       	cpi	r24, 0x05	; 5
 2b2:	91 05       	cpc	r25, r1
 2b4:	1c f5       	brge	.+70     	; 0x2fc <DIO_u8SetPortValue+0x6a>
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	91 05       	cpc	r25, r1
 2ba:	a1 f0       	breq	.+40     	; 0x2e4 <DIO_u8SetPortValue+0x52>
 2bc:	84 30       	cpi	r24, 0x04	; 4
 2be:	91 05       	cpc	r25, r1
 2c0:	ec f4       	brge	.+58     	; 0x2fc <DIO_u8SetPortValue+0x6a>
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	19 f0       	breq	.+6      	; 0x2cc <DIO_u8SetPortValue+0x3a>
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	39 f0       	breq	.+14     	; 0x2d8 <DIO_u8SetPortValue+0x46>
 2ca:	18 c0       	rjmp	.+48     	; 0x2fc <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2cc:	8b e3       	ldi	r24, 0x3B	; 59
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	2b 81       	ldd	r18, Y+3	; 0x03
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
 2d6:	15 c0       	rjmp	.+42     	; 0x302 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2d8:	88 e3       	ldi	r24, 0x38	; 56
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	2b 81       	ldd	r18, Y+3	; 0x03
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2e4:	85 e3       	ldi	r24, 0x35	; 53
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	2b 81       	ldd	r18, Y+3	; 0x03
 2ea:	fc 01       	movw	r30, r24
 2ec:	20 83       	st	Z, r18
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2f0:	82 e3       	ldi	r24, 0x32	; 50
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	2b 81       	ldd	r18, Y+3	; 0x03
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	89 83       	std	Y+1, r24	; 0x01
 300:	00 00       	nop
				}


	return Local_u8ErrorState;
 302:	89 81       	ldd	r24, Y+1	; 0x01

}
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	00 d0       	rcall	.+0      	; 0x316 <DIO_u8GetPinValue+0x6>
 316:	00 d0       	rcall	.+0      	; 0x318 <DIO_u8GetPinValue+0x8>
 318:	0f 92       	push	r0
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	8a 83       	std	Y+2, r24	; 0x02
 320:	6b 83       	std	Y+3, r22	; 0x03
 322:	5d 83       	std	Y+5, r21	; 0x05
 324:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 326:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 328:	8c 81       	ldd	r24, Y+4	; 0x04
 32a:	9d 81       	ldd	r25, Y+5	; 0x05
 32c:	89 2b       	or	r24, r25
 32e:	09 f4       	brne	.+2      	; 0x332 <DIO_u8GetPinValue+0x22>
 330:	73 c0       	rjmp	.+230    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	88 30       	cpi	r24, 0x08	; 8
 336:	08 f0       	brcs	.+2      	; 0x33a <DIO_u8GetPinValue+0x2a>
 338:	6f c0       	rjmp	.+222    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
				{
					switch(Copy_u8Port)
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	88 2f       	mov	r24, r24
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	84 30       	cpi	r24, 0x04	; 4
 342:	91 05       	cpc	r25, r1
 344:	09 f4       	brne	.+2      	; 0x348 <DIO_u8GetPinValue+0x38>
 346:	4f c0       	rjmp	.+158    	; 0x3e6 <DIO_u8GetPinValue+0xd6>
 348:	85 30       	cpi	r24, 0x05	; 5
 34a:	91 05       	cpc	r25, r1
 34c:	0c f0       	brlt	.+2      	; 0x350 <DIO_u8GetPinValue+0x40>
 34e:	60 c0       	rjmp	.+192    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 350:	83 30       	cpi	r24, 0x03	; 3
 352:	91 05       	cpc	r25, r1
 354:	99 f1       	breq	.+102    	; 0x3bc <DIO_u8GetPinValue+0xac>
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	91 05       	cpc	r25, r1
 35a:	0c f0       	brlt	.+2      	; 0x35e <DIO_u8GetPinValue+0x4e>
 35c:	59 c0       	rjmp	.+178    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	19 f0       	breq	.+6      	; 0x368 <DIO_u8GetPinValue+0x58>
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	b1 f0       	breq	.+44     	; 0x392 <DIO_u8GetPinValue+0x82>
 366:	54 c0       	rjmp	.+168    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 368:	89 e3       	ldi	r24, 0x39	; 57
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	fc 01       	movw	r30, r24
 36e:	80 81       	ld	r24, Z
 370:	88 2f       	mov	r24, r24
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	2b 81       	ldd	r18, Y+3	; 0x03
 376:	22 2f       	mov	r18, r18
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8GetPinValue+0x70>
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	2a 95       	dec	r18
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8GetPinValue+0x6c>
 384:	28 2f       	mov	r18, r24
 386:	21 70       	andi	r18, 0x01	; 1
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	9d 81       	ldd	r25, Y+5	; 0x05
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
 390:	42 c0       	rjmp	.+132    	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 392:	86 e3       	ldi	r24, 0x36	; 54
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	fc 01       	movw	r30, r24
 398:	80 81       	ld	r24, Z
 39a:	88 2f       	mov	r24, r24
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	2b 81       	ldd	r18, Y+3	; 0x03
 3a0:	22 2f       	mov	r18, r18
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8GetPinValue+0x9a>
 3a6:	95 95       	asr	r25
 3a8:	87 95       	ror	r24
 3aa:	2a 95       	dec	r18
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8GetPinValue+0x96>
 3ae:	28 2f       	mov	r18, r24
 3b0:	21 70       	andi	r18, 0x01	; 1
 3b2:	8c 81       	ldd	r24, Y+4	; 0x04
 3b4:	9d 81       	ldd	r25, Y+5	; 0x05
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
 3ba:	2d c0       	rjmp	.+90     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3bc:	83 e3       	ldi	r24, 0x33	; 51
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	80 81       	ld	r24, Z
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ca:	22 2f       	mov	r18, r18
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8GetPinValue+0xc4>
 3d0:	95 95       	asr	r25
 3d2:	87 95       	ror	r24
 3d4:	2a 95       	dec	r18
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8GetPinValue+0xc0>
 3d8:	28 2f       	mov	r18, r24
 3da:	21 70       	andi	r18, 0x01	; 1
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	9d 81       	ldd	r25, Y+5	; 0x05
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
 3e4:	18 c0       	rjmp	.+48     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3e6:	80 e3       	ldi	r24, 0x30	; 48
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	fc 01       	movw	r30, r24
 3ec:	80 81       	ld	r24, Z
 3ee:	88 2f       	mov	r24, r24
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	2b 81       	ldd	r18, Y+3	; 0x03
 3f4:	22 2f       	mov	r18, r18
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_u8GetPinValue+0xee>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	2a 95       	dec	r18
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_u8GetPinValue+0xea>
 402:	28 2f       	mov	r18, r24
 404:	21 70       	andi	r18, 0x01	; 1
 406:	8c 81       	ldd	r24, Y+4	; 0x04
 408:	9d 81       	ldd	r25, Y+5	; 0x05
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
					     default : Local_u8ErrorState=1; break;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	89 83       	std	Y+1, r24	; 0x01
 414:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 416:	02 c0       	rjmp	.+4      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 41c:	89 81       	ldd	r24, Y+1	; 0x01


}
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 436:	8a e3       	ldi	r24, 0x3A	; 58
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 43e:	87 e3       	ldi	r24, 0x37	; 55
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	fc 01       	movw	r30, r24
 444:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 446:	84 e3       	ldi	r24, 0x34	; 52
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	fc 01       	movw	r30, r24
 44c:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
 44e:	81 e3       	ldi	r24, 0x31	; 49
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	20 e3       	ldi	r18, 0x30	; 48
 454:	fc 01       	movw	r30, r24
 456:	20 83       	st	Z, r18

	PORTA=PORTA_InitVal;
 458:	8b e3       	ldi	r24, 0x3B	; 59
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	fc 01       	movw	r30, r24
 45e:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 460:	88 e3       	ldi	r24, 0x38	; 56
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 468:	85 e3       	ldi	r24, 0x35	; 53
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	fc 01       	movw	r30, r24
 46e:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 470:	82 e3       	ldi	r24, 0x32	; 50
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	fc 01       	movw	r30, r24
 476:	10 82       	st	Z, r1
}
 478:	00 00       	nop
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <map>:
#include "Servo_config.h"
#include "Servo_private.h"


s32 map(s32 Copy_s32InputMin,s32 Copy_s32InputMax,s32 Copy_s32OutputMin,s32 Copy_s32OutputMax,s32 Copy_s32InputVal)
{
 480:	af 92       	push	r10
 482:	bf 92       	push	r11
 484:	cf 92       	push	r12
 486:	df 92       	push	r13
 488:	ef 92       	push	r14
 48a:	ff 92       	push	r15
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
 498:	a4 97       	sbiw	r28, 0x24	; 36
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	6d 83       	std	Y+5, r22	; 0x05
 4a6:	7e 83       	std	Y+6, r23	; 0x06
 4a8:	8f 83       	std	Y+7, r24	; 0x07
 4aa:	98 87       	std	Y+8, r25	; 0x08
 4ac:	29 87       	std	Y+9, r18	; 0x09
 4ae:	3a 87       	std	Y+10, r19	; 0x0a
 4b0:	4b 87       	std	Y+11, r20	; 0x0b
 4b2:	5c 87       	std	Y+12, r21	; 0x0c
 4b4:	ed 86       	std	Y+13, r14	; 0x0d
 4b6:	fe 86       	std	Y+14, r15	; 0x0e
 4b8:	0f 87       	std	Y+15, r16	; 0x0f
 4ba:	18 8b       	std	Y+16, r17	; 0x10
 4bc:	a9 8a       	std	Y+17, r10	; 0x11
 4be:	ba 8a       	std	Y+18, r11	; 0x12
 4c0:	cb 8a       	std	Y+19, r12	; 0x13
 4c2:	dc 8a       	std	Y+20, r13	; 0x14
	s32 Local_s32outputVal;
	Local_s32outputVal=Copy_s32OutputMax-Copy_s32OutputMin;
 4c4:	49 89       	ldd	r20, Y+17	; 0x11
 4c6:	5a 89       	ldd	r21, Y+18	; 0x12
 4c8:	6b 89       	ldd	r22, Y+19	; 0x13
 4ca:	7c 89       	ldd	r23, Y+20	; 0x14
 4cc:	8d 85       	ldd	r24, Y+13	; 0x0d
 4ce:	9e 85       	ldd	r25, Y+14	; 0x0e
 4d0:	af 85       	ldd	r26, Y+15	; 0x0f
 4d2:	b8 89       	ldd	r27, Y+16	; 0x10
 4d4:	8a 01       	movw	r16, r20
 4d6:	9b 01       	movw	r18, r22
 4d8:	08 1b       	sub	r16, r24
 4da:	19 0b       	sbc	r17, r25
 4dc:	2a 0b       	sbc	r18, r26
 4de:	3b 0b       	sbc	r19, r27
 4e0:	d9 01       	movw	r26, r18
 4e2:	c8 01       	movw	r24, r16
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	9a 83       	std	Y+2, r25	; 0x02
 4e8:	ab 83       	std	Y+3, r26	; 0x03
 4ea:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32outputVal *=(Copy_s32InputVal-Copy_s32InputMin);
 4ec:	49 a9       	ldd	r20, Y+49	; 0x31
 4ee:	5a a9       	ldd	r21, Y+50	; 0x32
 4f0:	6b a9       	ldd	r22, Y+51	; 0x33
 4f2:	7c a9       	ldd	r23, Y+52	; 0x34
 4f4:	8d 81       	ldd	r24, Y+5	; 0x05
 4f6:	9e 81       	ldd	r25, Y+6	; 0x06
 4f8:	af 81       	ldd	r26, Y+7	; 0x07
 4fa:	b8 85       	ldd	r27, Y+8	; 0x08
 4fc:	8a 01       	movw	r16, r20
 4fe:	9b 01       	movw	r18, r22
 500:	08 1b       	sub	r16, r24
 502:	19 0b       	sbc	r17, r25
 504:	2a 0b       	sbc	r18, r26
 506:	3b 0b       	sbc	r19, r27
 508:	0d 8b       	std	Y+21, r16	; 0x15
 50a:	1e 8b       	std	Y+22, r17	; 0x16
 50c:	2f 8b       	std	Y+23, r18	; 0x17
 50e:	38 8f       	std	Y+24, r19	; 0x18
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	9a 81       	ldd	r25, Y+2	; 0x02
 514:	ab 81       	ldd	r26, Y+3	; 0x03
 516:	bc 81       	ldd	r27, Y+4	; 0x04
 518:	9c 01       	movw	r18, r24
 51a:	ad 01       	movw	r20, r26
 51c:	6d 89       	ldd	r22, Y+21	; 0x15
 51e:	7e 89       	ldd	r23, Y+22	; 0x16
 520:	8f 89       	ldd	r24, Y+23	; 0x17
 522:	98 8d       	ldd	r25, Y+24	; 0x18
 524:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__mulsi3>
 528:	6d 8f       	std	Y+29, r22	; 0x1d
 52a:	7e 8f       	std	Y+30, r23	; 0x1e
 52c:	8f 8f       	std	Y+31, r24	; 0x1f
 52e:	98 a3       	std	Y+32, r25	; 0x20
 530:	8d 8d       	ldd	r24, Y+29	; 0x1d
 532:	9e 8d       	ldd	r25, Y+30	; 0x1e
 534:	af 8d       	ldd	r26, Y+31	; 0x1f
 536:	b8 a1       	ldd	r27, Y+32	; 0x20
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	9a 83       	std	Y+2, r25	; 0x02
 53c:	ab 83       	std	Y+3, r26	; 0x03
 53e:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32outputVal /=Copy_s32InputMax-Copy_s32InputMin;
 540:	49 85       	ldd	r20, Y+9	; 0x09
 542:	5a 85       	ldd	r21, Y+10	; 0x0a
 544:	6b 85       	ldd	r22, Y+11	; 0x0b
 546:	7c 85       	ldd	r23, Y+12	; 0x0c
 548:	8d 81       	ldd	r24, Y+5	; 0x05
 54a:	9e 81       	ldd	r25, Y+6	; 0x06
 54c:	af 81       	ldd	r26, Y+7	; 0x07
 54e:	b8 85       	ldd	r27, Y+8	; 0x08
 550:	8a 01       	movw	r16, r20
 552:	9b 01       	movw	r18, r22
 554:	08 1b       	sub	r16, r24
 556:	19 0b       	sbc	r17, r25
 558:	2a 0b       	sbc	r18, r26
 55a:	3b 0b       	sbc	r19, r27
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	9a 81       	ldd	r25, Y+2	; 0x02
 560:	ab 81       	ldd	r26, Y+3	; 0x03
 562:	bc 81       	ldd	r27, Y+4	; 0x04
 564:	89 a3       	std	Y+33, r24	; 0x21
 566:	9a a3       	std	Y+34, r25	; 0x22
 568:	ab a3       	std	Y+35, r26	; 0x23
 56a:	bc a3       	std	Y+36, r27	; 0x24
 56c:	69 a1       	ldd	r22, Y+33	; 0x21
 56e:	7a a1       	ldd	r23, Y+34	; 0x22
 570:	8b a1       	ldd	r24, Y+35	; 0x23
 572:	9c a1       	ldd	r25, Y+36	; 0x24
 574:	a9 01       	movw	r20, r18
 576:	98 01       	movw	r18, r16
 578:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__divmodsi4>
 57c:	da 01       	movw	r26, r20
 57e:	c9 01       	movw	r24, r18
 580:	89 83       	std	Y+1, r24	; 0x01
 582:	9a 83       	std	Y+2, r25	; 0x02
 584:	ab 83       	std	Y+3, r26	; 0x03
 586:	bc 83       	std	Y+4, r27	; 0x04
	 Local_s32outputVal +=Copy_s32OutputMin;
 588:	49 81       	ldd	r20, Y+1	; 0x01
 58a:	5a 81       	ldd	r21, Y+2	; 0x02
 58c:	6b 81       	ldd	r22, Y+3	; 0x03
 58e:	7c 81       	ldd	r23, Y+4	; 0x04
 590:	8d 85       	ldd	r24, Y+13	; 0x0d
 592:	9e 85       	ldd	r25, Y+14	; 0x0e
 594:	af 85       	ldd	r26, Y+15	; 0x0f
 596:	b8 89       	ldd	r27, Y+16	; 0x10
 598:	84 0f       	add	r24, r20
 59a:	95 1f       	adc	r25, r21
 59c:	a6 1f       	adc	r26, r22
 59e:	b7 1f       	adc	r27, r23
 5a0:	89 83       	std	Y+1, r24	; 0x01
 5a2:	9a 83       	std	Y+2, r25	; 0x02
 5a4:	ab 83       	std	Y+3, r26	; 0x03
 5a6:	bc 83       	std	Y+4, r27	; 0x04

	return Local_s32outputVal;
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	9a 81       	ldd	r25, Y+2	; 0x02
 5ac:	ab 81       	ldd	r26, Y+3	; 0x03
 5ae:	bc 81       	ldd	r27, Y+4	; 0x04
 5b0:	89 8f       	std	Y+25, r24	; 0x19
 5b2:	9a 8f       	std	Y+26, r25	; 0x1a
 5b4:	ab 8f       	std	Y+27, r26	; 0x1b
 5b6:	bc 8f       	std	Y+28, r27	; 0x1c
	}
 5b8:	69 8d       	ldd	r22, Y+25	; 0x19
 5ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
 5bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5be:	9c 8d       	ldd	r25, Y+28	; 0x1c
 5c0:	a4 96       	adiw	r28, 0x24	; 36
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	df 91       	pop	r29
 5ce:	cf 91       	pop	r28
 5d0:	1f 91       	pop	r17
 5d2:	0f 91       	pop	r16
 5d4:	ff 90       	pop	r15
 5d6:	ef 90       	pop	r14
 5d8:	df 90       	pop	r13
 5da:	cf 90       	pop	r12
 5dc:	bf 90       	pop	r11
 5de:	af 90       	pop	r10
 5e0:	08 95       	ret

000005e2 <Servo_u8ServoRotate>:
 * 		2msec for 180 degree
 *
 * */

u8 Servo_u8ServoRotate(u8 Copy_u8ChannalID, u8 Copy_u8Degree)
{
 5e2:	af 92       	push	r10
 5e4:	bf 92       	push	r11
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	2f 97       	sbiw	r28, 0x0f	; 15
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	8e 83       	std	Y+6, r24	; 0x06
 608:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState=OK;
 60a:	19 82       	std	Y+1, r1	; 0x01
	u16 Local_u16CompMatchChannelA,Local_u16CompMatchChannelB;
	
	if(Copy_u8Degree >= 0 && Copy_u8Degree <= 180)
 60c:	8f 81       	ldd	r24, Y+7	; 0x07
 60e:	85 3b       	cpi	r24, 0xB5	; 181
 610:	08 f0       	brcs	.+2      	; 0x614 <Servo_u8ServoRotate+0x32>
 612:	7c c0       	rjmp	.+248    	; 0x70c <Servo_u8ServoRotate+0x12a>
	{
		switch(Copy_u8ChannalID )
 614:	8e 81       	ldd	r24, Y+6	; 0x06
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	91 05       	cpc	r25, r1
 61e:	19 f0       	breq	.+6      	; 0x626 <Servo_u8ServoRotate+0x44>
 620:	02 97       	sbiw	r24, 0x02	; 2
 622:	c9 f1       	breq	.+114    	; 0x696 <Servo_u8ServoRotate+0xb4>
 624:	70 c0       	rjmp	.+224    	; 0x706 <Servo_u8ServoRotate+0x124>
		{
		case OC1A:	Local_u16CompMatchChannelA = map(0,180,1000,2000,Copy_u8Degree);
 626:	8f 81       	ldd	r24, Y+7	; 0x07
 628:	88 2f       	mov	r24, r24
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	a0 e0       	ldi	r26, 0x00	; 0
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	2b 2f       	mov	r18, r27
 632:	2f 93       	push	r18
 634:	2a 2f       	mov	r18, r26
 636:	2f 93       	push	r18
 638:	29 2f       	mov	r18, r25
 63a:	2f 93       	push	r18
 63c:	8f 93       	push	r24
 63e:	0f 2e       	mov	r0, r31
 640:	f0 ed       	ldi	r31, 0xD0	; 208
 642:	af 2e       	mov	r10, r31
 644:	f7 e0       	ldi	r31, 0x07	; 7
 646:	bf 2e       	mov	r11, r31
 648:	c1 2c       	mov	r12, r1
 64a:	d1 2c       	mov	r13, r1
 64c:	f0 2d       	mov	r31, r0
 64e:	18 ee       	ldi	r17, 0xE8	; 232
 650:	e1 2e       	mov	r14, r17
 652:	13 e0       	ldi	r17, 0x03	; 3
 654:	f1 2e       	mov	r15, r17
 656:	00 e0       	ldi	r16, 0x00	; 0
 658:	10 e0       	ldi	r17, 0x00	; 0
 65a:	24 eb       	ldi	r18, 0xB4	; 180
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	60 e0       	ldi	r22, 0x00	; 0
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	cb 01       	movw	r24, r22
 668:	0e 94 40 02 	call	0x480	; 0x480 <map>
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	68 87       	std	Y+8, r22	; 0x08
 676:	79 87       	std	Y+9, r23	; 0x09
 678:	8a 87       	std	Y+10, r24	; 0x0a
 67a:	9b 87       	std	Y+11, r25	; 0x0b
 67c:	88 85       	ldd	r24, Y+8	; 0x08
 67e:	99 85       	ldd	r25, Y+9	; 0x09
 680:	9d 83       	std	Y+5, r25	; 0x05
 682:	8c 83       	std	Y+4, r24	; 0x04
					TIMER1_voidSetChannelACompMatch(Local_u16CompMatchChannelA);
 684:	8c 81       	ldd	r24, Y+4	; 0x04
 686:	9d 81       	ldd	r25, Y+5	; 0x05
 688:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TIMER1_voidSetChannelACompMatch>
					TIMER1_voidSetICR(20000); break;
 68c:	80 e2       	ldi	r24, 0x20	; 32
 68e:	9e e4       	ldi	r25, 0x4E	; 78
 690:	0e 94 55 04 	call	0x8aa	; 0x8aa <TIMER1_voidSetICR>
 694:	3d c0       	rjmp	.+122    	; 0x710 <Servo_u8ServoRotate+0x12e>

		case OC1B:	Local_u16CompMatchChannelB = map(0,180,1000,2000,Copy_u8Degree);
 696:	8f 81       	ldd	r24, Y+7	; 0x07
 698:	88 2f       	mov	r24, r24
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	a0 e0       	ldi	r26, 0x00	; 0
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	2b 2f       	mov	r18, r27
 6a2:	2f 93       	push	r18
 6a4:	2a 2f       	mov	r18, r26
 6a6:	2f 93       	push	r18
 6a8:	29 2f       	mov	r18, r25
 6aa:	2f 93       	push	r18
 6ac:	8f 93       	push	r24
 6ae:	0f 2e       	mov	r0, r31
 6b0:	f0 ed       	ldi	r31, 0xD0	; 208
 6b2:	af 2e       	mov	r10, r31
 6b4:	f7 e0       	ldi	r31, 0x07	; 7
 6b6:	bf 2e       	mov	r11, r31
 6b8:	c1 2c       	mov	r12, r1
 6ba:	d1 2c       	mov	r13, r1
 6bc:	f0 2d       	mov	r31, r0
 6be:	18 ee       	ldi	r17, 0xE8	; 232
 6c0:	e1 2e       	mov	r14, r17
 6c2:	13 e0       	ldi	r17, 0x03	; 3
 6c4:	f1 2e       	mov	r15, r17
 6c6:	00 e0       	ldi	r16, 0x00	; 0
 6c8:	10 e0       	ldi	r17, 0x00	; 0
 6ca:	24 eb       	ldi	r18, 0xB4	; 180
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	40 e0       	ldi	r20, 0x00	; 0
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	70 e0       	ldi	r23, 0x00	; 0
 6d6:	cb 01       	movw	r24, r22
 6d8:	0e 94 40 02 	call	0x480	; 0x480 <map>
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	6c 87       	std	Y+12, r22	; 0x0c
 6e6:	7d 87       	std	Y+13, r23	; 0x0d
 6e8:	8e 87       	std	Y+14, r24	; 0x0e
 6ea:	9f 87       	std	Y+15, r25	; 0x0f
 6ec:	8c 85       	ldd	r24, Y+12	; 0x0c
 6ee:	9d 85       	ldd	r25, Y+13	; 0x0d
 6f0:	9b 83       	std	Y+3, r25	; 0x03
 6f2:	8a 83       	std	Y+2, r24	; 0x02
					TIMER1_voidSetChannelBCompMatch(Local_u16CompMatchChannelB);
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	9b 81       	ldd	r25, Y+3	; 0x03
 6f8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <TIMER1_voidSetChannelBCompMatch>
					TIMER1_voidSetICR(20000); break;
 6fc:	80 e2       	ldi	r24, 0x20	; 32
 6fe:	9e e4       	ldi	r25, 0x4E	; 78
 700:	0e 94 55 04 	call	0x8aa	; 0x8aa <TIMER1_voidSetICR>
 704:	05 c0       	rjmp	.+10     	; 0x710 <Servo_u8ServoRotate+0x12e>

		default : Local_u8ErrorState=NOK; break;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	89 83       	std	Y+1, r24	; 0x01
 70a:	02 c0       	rjmp	.+4      	; 0x710 <Servo_u8ServoRotate+0x12e>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Local_u8ErrorState;
 710:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 712:	2f 96       	adiw	r28, 0x0f	; 15
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	df 90       	pop	r13
 72c:	cf 90       	pop	r12
 72e:	bf 90       	pop	r11
 730:	af 90       	pop	r10
 732:	08 95       	ret

00000734 <TIMER0_voidInit>:


static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TIMSK,TIMSK_OCIE0);

#elif	WAVE_GENERATION_MODE == FAST_PWM

	/*choose fastPWM Mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
 73c:	83 e5       	ldi	r24, 0x53	; 83
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	fc 01       	movw	r30, r24
 742:	20 81       	ld	r18, Z
 744:	83 e5       	ldi	r24, 0x53	; 83
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	20 64       	ori	r18, 0x40	; 64
 74a:	fc 01       	movw	r30, r24
 74c:	20 83       	st	Z, r18
	SET_BIT(TCCR0,TCCR0_WGM01);
 74e:	83 e5       	ldi	r24, 0x53	; 83
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	fc 01       	movw	r30, r24
 754:	20 81       	ld	r18, Z
 756:	83 e5       	ldi	r24, 0x53	; 83
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	28 60       	ori	r18, 0x08	; 8
 75c:	fc 01       	movw	r30, r24
 75e:	20 83       	st	Z, r18
		SET_BIT(TCCR0,TCCR0_COM00);

		#elif COMP_OUT_MODE == NON_INVERTING_MODE

		/*Choose Non_Inverting mode*/
		SET_BIT(TCCR0,TCCR0_COM01);
 760:	83 e5       	ldi	r24, 0x53	; 83
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	fc 01       	movw	r30, r24
 766:	20 81       	ld	r18, Z
 768:	83 e5       	ldi	r24, 0x53	; 83
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	20 62       	ori	r18, 0x20	; 32
 76e:	fc 01       	movw	r30, r24
 770:	20 83       	st	Z, r18
		CLR_BIT(TCCR0,TCCR0_COM00);
 772:	83 e5       	ldi	r24, 0x53	; 83
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	fc 01       	movw	r30, r24
 778:	20 81       	ld	r18, Z
 77a:	83 e5       	ldi	r24, 0x53	; 83
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	2f 7e       	andi	r18, 0xEF	; 239
 780:	fc 01       	movw	r30, r24
 782:	20 83       	st	Z, r18
#endif



		/*Set prescaler(Bit Masking) */
		TCCR0 &=TIMER_PRESC_MASK;
 784:	83 e5       	ldi	r24, 0x53	; 83
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	fc 01       	movw	r30, r24
 78a:	20 81       	ld	r18, Z
 78c:	83 e5       	ldi	r24, 0x53	; 83
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	28 7f       	andi	r18, 0xF8	; 248
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
		TCCR0 |=CLK_PRESCALER;
 796:	83 e5       	ldi	r24, 0x53	; 83
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	fc 01       	movw	r30, r24
 79c:	20 81       	ld	r18, Z
 79e:	83 e5       	ldi	r24, 0x53	; 83
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	23 60       	ori	r18, 0x03	; 3
 7a4:	fc 01       	movw	r30, r24
 7a6:	20 83       	st	Z, r18


}
 7a8:	00 00       	nop
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <TIMER0_voidSetCompMatchValue>:

void TIMER0_voidSetCompMatchValue(u8 Copy_u8Value)
{
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	0f 92       	push	r0
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
 7ba:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Value;
 7bc:	8c e5       	ldi	r24, 0x5C	; 92
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	29 81       	ldd	r18, Y+1	; 0x01
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18
}
 7c6:	00 00       	nop
 7c8:	0f 90       	pop	r0
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	08 95       	ret

000007d0 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <TIMER0_u8SetCallBack+0x6>
 7d6:	0f 92       	push	r0
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
 7dc:	9b 83       	std	Y+3, r25	; 0x03
 7de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 7e0:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_pvCallBackFunc!=NULL)
 7e2:	8a 81       	ldd	r24, Y+2	; 0x02
 7e4:	9b 81       	ldd	r25, Y+3	; 0x03
 7e6:	89 2b       	or	r24, r25
 7e8:	39 f0       	breq	.+14     	; 0x7f8 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc=Copy_pvCallBackFunc;
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	9b 81       	ldd	r25, Y+3	; 0x03
 7ee:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 7f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 7fc:	89 81       	ldd	r24, Y+1	; 0x01
}
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	0f 90       	pop	r0
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <TIMER1_voidInit>:


void TIMER1_voidInit()

{
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
	/*Compare Output Mode, fast PWM, non inverted */
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
 812:	8f e4       	ldi	r24, 0x4F	; 79
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	fc 01       	movw	r30, r24
 818:	20 81       	ld	r18, Z
 81a:	8f e4       	ldi	r24, 0x4F	; 79
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	20 68       	ori	r18, 0x80	; 128
 820:	fc 01       	movw	r30, r24
 822:	20 83       	st	Z, r18
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
 824:	8f e4       	ldi	r24, 0x4F	; 79
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	fc 01       	movw	r30, r24
 82a:	20 81       	ld	r18, Z
 82c:	8f e4       	ldi	r24, 0x4F	; 79
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	2f 7b       	andi	r18, 0xBF	; 191
 832:	fc 01       	movw	r30, r24
 834:	20 83       	st	Z, r18

		/*Waveform generation mode , Fast PWM*/
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
 836:	8f e4       	ldi	r24, 0x4F	; 79
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	fc 01       	movw	r30, r24
 83c:	20 81       	ld	r18, Z
 83e:	8f e4       	ldi	r24, 0x4F	; 79
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	2e 7f       	andi	r18, 0xFE	; 254
 844:	fc 01       	movw	r30, r24
 846:	20 83       	st	Z, r18
		SET_BIT(TCCR1A,TCCR1A_WGM11);
 848:	8f e4       	ldi	r24, 0x4F	; 79
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	fc 01       	movw	r30, r24
 84e:	20 81       	ld	r18, Z
 850:	8f e4       	ldi	r24, 0x4F	; 79
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	22 60       	ori	r18, 0x02	; 2
 856:	fc 01       	movw	r30, r24
 858:	20 83       	st	Z, r18
		SET_BIT(TCCR1B,TCCR1B_WGM12);
 85a:	8e e4       	ldi	r24, 0x4E	; 78
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	fc 01       	movw	r30, r24
 860:	20 81       	ld	r18, Z
 862:	8e e4       	ldi	r24, 0x4E	; 78
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	28 60       	ori	r18, 0x08	; 8
 868:	fc 01       	movw	r30, r24
 86a:	20 83       	st	Z, r18
		SET_BIT(TCCR1B,TCCR1B_WGM13);
 86c:	8e e4       	ldi	r24, 0x4E	; 78
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	fc 01       	movw	r30, r24
 872:	20 81       	ld	r18, Z
 874:	8e e4       	ldi	r24, 0x4E	; 78
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	20 61       	ori	r18, 0x10	; 16
 87a:	fc 01       	movw	r30, r24
 87c:	20 83       	st	Z, r18

		/*Prescaler */
		TCCR1B &=TIMER_PRESC_MASK;
 87e:	8e e4       	ldi	r24, 0x4E	; 78
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	fc 01       	movw	r30, r24
 884:	20 81       	ld	r18, Z
 886:	8e e4       	ldi	r24, 0x4E	; 78
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	28 7f       	andi	r18, 0xF8	; 248
 88c:	fc 01       	movw	r30, r24
 88e:	20 83       	st	Z, r18
		TCCR1B |= DIVIDE_BY_8;
 890:	8e e4       	ldi	r24, 0x4E	; 78
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	fc 01       	movw	r30, r24
 896:	20 81       	ld	r18, Z
 898:	8e e4       	ldi	r24, 0x4E	; 78
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	22 60       	ori	r18, 0x02	; 2
 89e:	fc 01       	movw	r30, r24
 8a0:	20 83       	st	Z, r18
}
 8a2:	00 00       	nop
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(u16 Copy_u16TopValue)
{
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	00 d0       	rcall	.+0      	; 0x8b0 <TIMER1_voidSetICR+0x6>
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	9a 83       	std	Y+2, r25	; 0x02
 8b6:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TopValue;
 8b8:	86 e4       	ldi	r24, 0x46	; 70
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	29 81       	ldd	r18, Y+1	; 0x01
 8be:	3a 81       	ldd	r19, Y+2	; 0x02
 8c0:	fc 01       	movw	r30, r24
 8c2:	31 83       	std	Z+1, r19	; 0x01
 8c4:	20 83       	st	Z, r18

}
 8c6:	00 00       	nop
 8c8:	0f 90       	pop	r0
 8ca:	0f 90       	pop	r0
 8cc:	df 91       	pop	r29
 8ce:	cf 91       	pop	r28
 8d0:	08 95       	ret

000008d2 <TIMER1_voidSetChannelACompMatch>:
void TIMER1_voidSetChannelACompMatch(u16 Copy_u16ChannelACompMatch)
{
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	00 d0       	rcall	.+0      	; 0x8d8 <TIMER1_voidSetChannelACompMatch+0x6>
 8d8:	cd b7       	in	r28, 0x3d	; 61
 8da:	de b7       	in	r29, 0x3e	; 62
 8dc:	9a 83       	std	Y+2, r25	; 0x02
 8de:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16ChannelACompMatch;
 8e0:	8a e4       	ldi	r24, 0x4A	; 74
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	29 81       	ldd	r18, Y+1	; 0x01
 8e6:	3a 81       	ldd	r19, Y+2	; 0x02
 8e8:	fc 01       	movw	r30, r24
 8ea:	31 83       	std	Z+1, r19	; 0x01
 8ec:	20 83       	st	Z, r18
}
 8ee:	00 00       	nop
 8f0:	0f 90       	pop	r0
 8f2:	0f 90       	pop	r0
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	08 95       	ret

000008fa <TIMER1_voidSetChannelBCompMatch>:

void TIMER1_voidSetChannelBCompMatch(u16 Copy_u16ChannelBCompMatch)
{
 8fa:	cf 93       	push	r28
 8fc:	df 93       	push	r29
 8fe:	00 d0       	rcall	.+0      	; 0x900 <TIMER1_voidSetChannelBCompMatch+0x6>
 900:	cd b7       	in	r28, 0x3d	; 61
 902:	de b7       	in	r29, 0x3e	; 62
 904:	9a 83       	std	Y+2, r25	; 0x02
 906:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16ChannelBCompMatch;
 908:	88 e4       	ldi	r24, 0x48	; 72
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	29 81       	ldd	r18, Y+1	; 0x01
 90e:	3a 81       	ldd	r19, Y+2	; 0x02
 910:	fc 01       	movw	r30, r24
 912:	31 83       	std	Z+1, r19	; 0x01
 914:	20 83       	st	Z, r18
}
 916:	00 00       	nop
 918:	0f 90       	pop	r0
 91a:	0f 90       	pop	r0
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 922:	1f 92       	push	r1
 924:	0f 92       	push	r0
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	0f 92       	push	r0
 92a:	11 24       	eor	r1, r1
 92c:	2f 93       	push	r18
 92e:	3f 93       	push	r19
 930:	4f 93       	push	r20
 932:	5f 93       	push	r21
 934:	6f 93       	push	r22
 936:	7f 93       	push	r23
 938:	8f 93       	push	r24
 93a:	9f 93       	push	r25
 93c:	af 93       	push	r26
 93e:	bf 93       	push	r27
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
 944:	cf 93       	push	r28
 946:	df 93       	push	r29
 948:	cd b7       	in	r28, 0x3d	; 61
 94a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!=NULL)
 94c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 950:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 954:	89 2b       	or	r24, r25
 956:	31 f0       	breq	.+12     	; 0x964 <__vector_10+0x42>
	{
		TIMER0_pvCallBackFunc();
 958:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 95c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 960:	fc 01       	movw	r30, r24
 962:	09 95       	icall
	}

}
 964:	00 00       	nop
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	ff 91       	pop	r31
 96c:	ef 91       	pop	r30
 96e:	bf 91       	pop	r27
 970:	af 91       	pop	r26
 972:	9f 91       	pop	r25
 974:	8f 91       	pop	r24
 976:	7f 91       	pop	r23
 978:	6f 91       	pop	r22
 97a:	5f 91       	pop	r21
 97c:	4f 91       	pop	r20
 97e:	3f 91       	pop	r19
 980:	2f 91       	pop	r18
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <main>:
#include "util/delay.h"

#include "Servo_interface.h"

void main()
{
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 994:	0e 94 17 02 	call	0x42e	; 0x42e <PORT_voidInit>
	TIMER1_voidInit();
 998:	0e 94 05 04 	call	0x80a	; 0x80a <TIMER1_voidInit>


	while(1)
	{
		//Servo_u8ServoRotate(OC1B,55.5);
		Servo_u8ServoRotate(OC1A,55.5);
 99c:	67 e3       	ldi	r22, 0x37	; 55
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Servo_u8ServoRotate>
 9a4:	fb cf       	rjmp	.-10     	; 0x99c <main+0x10>

000009a6 <__mulsi3>:
 9a6:	db 01       	movw	r26, r22
 9a8:	8f 93       	push	r24
 9aa:	9f 93       	push	r25
 9ac:	0e 94 02 05 	call	0xa04	; 0xa04 <__muluhisi3>
 9b0:	bf 91       	pop	r27
 9b2:	af 91       	pop	r26
 9b4:	a2 9f       	mul	r26, r18
 9b6:	80 0d       	add	r24, r0
 9b8:	91 1d       	adc	r25, r1
 9ba:	a3 9f       	mul	r26, r19
 9bc:	90 0d       	add	r25, r0
 9be:	b2 9f       	mul	r27, r18
 9c0:	90 0d       	add	r25, r0
 9c2:	11 24       	eor	r1, r1
 9c4:	08 95       	ret

000009c6 <__divmodsi4>:
 9c6:	05 2e       	mov	r0, r21
 9c8:	97 fb       	bst	r25, 7
 9ca:	1e f4       	brtc	.+6      	; 0x9d2 <__divmodsi4+0xc>
 9cc:	00 94       	com	r0
 9ce:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__negsi2>
 9d2:	57 fd       	sbrc	r21, 7
 9d4:	07 d0       	rcall	.+14     	; 0x9e4 <__divmodsi4_neg2>
 9d6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__udivmodsi4>
 9da:	07 fc       	sbrc	r0, 7
 9dc:	03 d0       	rcall	.+6      	; 0x9e4 <__divmodsi4_neg2>
 9de:	4e f4       	brtc	.+18     	; 0x9f2 <__divmodsi4_exit>
 9e0:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__negsi2>

000009e4 <__divmodsi4_neg2>:
 9e4:	50 95       	com	r21
 9e6:	40 95       	com	r20
 9e8:	30 95       	com	r19
 9ea:	21 95       	neg	r18
 9ec:	3f 4f       	sbci	r19, 0xFF	; 255
 9ee:	4f 4f       	sbci	r20, 0xFF	; 255
 9f0:	5f 4f       	sbci	r21, 0xFF	; 255

000009f2 <__divmodsi4_exit>:
 9f2:	08 95       	ret

000009f4 <__negsi2>:
 9f4:	90 95       	com	r25
 9f6:	80 95       	com	r24
 9f8:	70 95       	com	r23
 9fa:	61 95       	neg	r22
 9fc:	7f 4f       	sbci	r23, 0xFF	; 255
 9fe:	8f 4f       	sbci	r24, 0xFF	; 255
 a00:	9f 4f       	sbci	r25, 0xFF	; 255
 a02:	08 95       	ret

00000a04 <__muluhisi3>:
 a04:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__umulhisi3>
 a08:	a5 9f       	mul	r26, r21
 a0a:	90 0d       	add	r25, r0
 a0c:	b4 9f       	mul	r27, r20
 a0e:	90 0d       	add	r25, r0
 a10:	a4 9f       	mul	r26, r20
 a12:	80 0d       	add	r24, r0
 a14:	91 1d       	adc	r25, r1
 a16:	11 24       	eor	r1, r1
 a18:	08 95       	ret

00000a1a <__udivmodsi4>:
 a1a:	a1 e2       	ldi	r26, 0x21	; 33
 a1c:	1a 2e       	mov	r1, r26
 a1e:	aa 1b       	sub	r26, r26
 a20:	bb 1b       	sub	r27, r27
 a22:	fd 01       	movw	r30, r26
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <__udivmodsi4_ep>

00000a26 <__udivmodsi4_loop>:
 a26:	aa 1f       	adc	r26, r26
 a28:	bb 1f       	adc	r27, r27
 a2a:	ee 1f       	adc	r30, r30
 a2c:	ff 1f       	adc	r31, r31
 a2e:	a2 17       	cp	r26, r18
 a30:	b3 07       	cpc	r27, r19
 a32:	e4 07       	cpc	r30, r20
 a34:	f5 07       	cpc	r31, r21
 a36:	20 f0       	brcs	.+8      	; 0xa40 <__udivmodsi4_ep>
 a38:	a2 1b       	sub	r26, r18
 a3a:	b3 0b       	sbc	r27, r19
 a3c:	e4 0b       	sbc	r30, r20
 a3e:	f5 0b       	sbc	r31, r21

00000a40 <__udivmodsi4_ep>:
 a40:	66 1f       	adc	r22, r22
 a42:	77 1f       	adc	r23, r23
 a44:	88 1f       	adc	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	1a 94       	dec	r1
 a4a:	69 f7       	brne	.-38     	; 0xa26 <__udivmodsi4_loop>
 a4c:	60 95       	com	r22
 a4e:	70 95       	com	r23
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	9b 01       	movw	r18, r22
 a56:	ac 01       	movw	r20, r24
 a58:	bd 01       	movw	r22, r26
 a5a:	cf 01       	movw	r24, r30
 a5c:	08 95       	ret

00000a5e <__umulhisi3>:
 a5e:	a2 9f       	mul	r26, r18
 a60:	b0 01       	movw	r22, r0
 a62:	b3 9f       	mul	r27, r19
 a64:	c0 01       	movw	r24, r0
 a66:	a3 9f       	mul	r26, r19
 a68:	70 0d       	add	r23, r0
 a6a:	81 1d       	adc	r24, r1
 a6c:	11 24       	eor	r1, r1
 a6e:	91 1d       	adc	r25, r1
 a70:	b2 9f       	mul	r27, r18
 a72:	70 0d       	add	r23, r0
 a74:	81 1d       	adc	r24, r1
 a76:	11 24       	eor	r1, r1
 a78:	91 1d       	adc	r25, r1
 a7a:	08 95       	ret

00000a7c <_exit>:
 a7c:	f8 94       	cli

00000a7e <__stop_program>:
 a7e:	ff cf       	rjmp	.-2      	; 0xa7e <__stop_program>
