
BUZZER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e5c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000e5c  00000ed0  2**0
                  ALLOC, LOAD, DATA
  2 .stab         000012f0  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000dfc  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002fbc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00003010  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  000039f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00003a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 39 02 	call	0x472	; 0x472 <main>
  64:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_u8SetPinValue+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_u8SetPinValue+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	8a 83       	std	Y+2, r24	; 0x02
  7a:	6b 83       	std	Y+3, r22	; 0x03
  7c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
  7e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
  80:	8b 81       	ldd	r24, Y+3	; 0x03
  82:	88 30       	cpi	r24, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_u8SetPinValue+0x1c>
  86:	f3 c0       	rjmp	.+486    	; 0x26e <DIO_u8SetPinValue+0x202>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
  88:	8c 81       	ldd	r24, Y+4	; 0x04
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	09 f0       	breq	.+2      	; 0x90 <DIO_u8SetPinValue+0x24>
  8e:	72 c0       	rjmp	.+228    	; 0x174 <DIO_u8SetPinValue+0x108>
		{
		switch(Copy_u8Port)
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	84 30       	cpi	r24, 0x04	; 4
  98:	91 05       	cpc	r25, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_u8SetPinValue+0x32>
  9c:	52 c0       	rjmp	.+164    	; 0x142 <DIO_u8SetPinValue+0xd6>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	91 05       	cpc	r25, r1
  a2:	0c f0       	brlt	.+2      	; 0xa6 <DIO_u8SetPinValue+0x3a>
  a4:	64 c0       	rjmp	.+200    	; 0x16e <DIO_u8SetPinValue+0x102>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	91 05       	cpc	r25, r1
  aa:	a9 f1       	breq	.+106    	; 0x116 <DIO_u8SetPinValue+0xaa>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	91 05       	cpc	r25, r1
  b0:	0c f0       	brlt	.+2      	; 0xb4 <DIO_u8SetPinValue+0x48>
  b2:	5d c0       	rjmp	.+186    	; 0x16e <DIO_u8SetPinValue+0x102>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	19 f0       	breq	.+6      	; 0xbe <DIO_u8SetPinValue+0x52>
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	b9 f0       	breq	.+46     	; 0xea <DIO_u8SetPinValue+0x7e>
  bc:	58 c0       	rjmp	.+176    	; 0x16e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
  be:	8b e3       	ldi	r24, 0x3B	; 59
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	80 81       	ld	r24, Z
  c6:	48 2f       	mov	r20, r24
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	28 2f       	mov	r18, r24
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_u8SetPinValue+0x6c>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	2a 95       	dec	r18
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_u8SetPinValue+0x68>
  dc:	24 2f       	mov	r18, r20
  de:	28 2b       	or	r18, r24
  e0:	8b e3       	ldi	r24, 0x3B	; 59
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	c4 c0       	rjmp	.+392    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	fc 01       	movw	r30, r24
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_u8SetPinValue+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	2a 95       	dec	r18
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_u8SetPinValue+0x94>
 108:	24 2f       	mov	r18, r20
 10a:	28 2b       	or	r18, r24
 10c:	88 e3       	ldi	r24, 0x38	; 56
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	ae c0       	rjmp	.+348    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 116:	85 e3       	ldi	r24, 0x35	; 53
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fc 01       	movw	r30, r24
 11c:	80 81       	ld	r24, Z
 11e:	48 2f       	mov	r20, r24
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	28 2f       	mov	r18, r24
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xc0>
 134:	24 2f       	mov	r18, r20
 136:	28 2b       	or	r18, r24
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	98 c0       	rjmp	.+304    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 142:	82 e3       	ldi	r24, 0x32	; 50
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	48 2f       	mov	r20, r24
 14c:	8b 81       	ldd	r24, Y+3	; 0x03
 14e:	28 2f       	mov	r18, r24
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_u8SetPinValue+0xf0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_u8SetPinValue+0xec>
 160:	24 2f       	mov	r18, r20
 162:	28 2b       	or	r18, r24
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	82 c0       	rjmp	.+260    	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	7f c0       	rjmp	.+254    	; 0x272 <DIO_u8SetPinValue+0x206>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 174:	8c 81       	ldd	r24, Y+4	; 0x04
 176:	88 23       	and	r24, r24
 178:	09 f0       	breq	.+2      	; 0x17c <DIO_u8SetPinValue+0x110>
 17a:	76 c0       	rjmp	.+236    	; 0x268 <DIO_u8SetPinValue+0x1fc>
		{
			switch(Copy_u8Port)
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	88 2f       	mov	r24, r24
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	91 05       	cpc	r25, r1
 186:	09 f4       	brne	.+2      	; 0x18a <DIO_u8SetPinValue+0x11e>
 188:	55 c0       	rjmp	.+170    	; 0x234 <DIO_u8SetPinValue+0x1c8>
 18a:	85 30       	cpi	r24, 0x05	; 5
 18c:	91 05       	cpc	r25, r1
 18e:	0c f0       	brlt	.+2      	; 0x192 <DIO_u8SetPinValue+0x126>
 190:	68 c0       	rjmp	.+208    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	91 05       	cpc	r25, r1
 196:	b9 f1       	breq	.+110    	; 0x206 <DIO_u8SetPinValue+0x19a>
 198:	84 30       	cpi	r24, 0x04	; 4
 19a:	91 05       	cpc	r25, r1
 19c:	0c f0       	brlt	.+2      	; 0x1a0 <DIO_u8SetPinValue+0x134>
 19e:	61 c0       	rjmp	.+194    	; 0x262 <DIO_u8SetPinValue+0x1f6>
 1a0:	00 97       	sbiw	r24, 0x00	; 0
 1a2:	19 f0       	breq	.+6      	; 0x1aa <DIO_u8SetPinValue+0x13e>
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	c1 f0       	breq	.+48     	; 0x1d8 <DIO_u8SetPinValue+0x16c>
 1a8:	5c c0       	rjmp	.+184    	; 0x262 <DIO_u8SetPinValue+0x1f6>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 1aa:	8b e3       	ldi	r24, 0x3B	; 59
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	48 2f       	mov	r20, r24
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_u8SetPinValue+0x158>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	2a 95       	dec	r18
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_u8SetPinValue+0x154>
 1c8:	80 95       	com	r24
 1ca:	24 2f       	mov	r18, r20
 1cc:	28 23       	and	r18, r24
 1ce:	8b e3       	ldi	r24, 0x3B	; 59
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	4d c0       	rjmp	.+154    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 1d8:	88 e3       	ldi	r24, 0x38	; 56
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	48 2f       	mov	r20, r24
 1e2:	8b 81       	ldd	r24, Y+3	; 0x03
 1e4:	28 2f       	mov	r18, r24
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_u8SetPinValue+0x186>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	2a 95       	dec	r18
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_u8SetPinValue+0x182>
 1f6:	80 95       	com	r24
 1f8:	24 2f       	mov	r18, r20
 1fa:	28 23       	and	r18, r24
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	36 c0       	rjmp	.+108    	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 206:	85 e3       	ldi	r24, 0x35	; 53
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_u8SetPinValue+0x1b4>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_u8SetPinValue+0x1b0>
 224:	80 95       	com	r24
 226:	24 2f       	mov	r18, r20
 228:	28 23       	and	r18, r24
 22a:	85 e3       	ldi	r24, 0x35	; 53
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
 232:	1f c0       	rjmp	.+62     	; 0x272 <DIO_u8SetPinValue+0x206>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 234:	82 e3       	ldi	r24, 0x32	; 50
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	48 2f       	mov	r20, r24
 23e:	8b 81       	ldd	r24, Y+3	; 0x03
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_u8SetPinValue+0x1e2>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	2a 95       	dec	r18
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_u8SetPinValue+0x1de>
 252:	80 95       	com	r24
 254:	24 2f       	mov	r18, r20
 256:	28 23       	and	r18, r24
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	08 c0       	rjmp	.+16     	; 0x272 <DIO_u8SetPinValue+0x206>
			default :Local_u8ErrorState=1;break;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	89 83       	std	Y+1, r24	; 0x01
 266:	05 c0       	rjmp	.+10     	; 0x272 <DIO_u8SetPinValue+0x206>


		}
		else
		{
		Local_u8ErrorState=1;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 83       	std	Y+1, r24	; 0x01
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x206>
		}


}
else{
	 Local_u8ErrorState=1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 272:	89 81       	ldd	r24, Y+1	; 0x01

}
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	00 d0       	rcall	.+0      	; 0x288 <DIO_u8SetPortValue+0x6>
 288:	0f 92       	push	r0
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	8a 83       	std	Y+2, r24	; 0x02
 290:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 292:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	91 05       	cpc	r25, r1
 29e:	01 f1       	breq	.+64     	; 0x2e0 <DIO_u8SetPortValue+0x5e>
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	91 05       	cpc	r25, r1
 2a4:	1c f5       	brge	.+70     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	91 05       	cpc	r25, r1
 2aa:	a1 f0       	breq	.+40     	; 0x2d4 <DIO_u8SetPortValue+0x52>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	91 05       	cpc	r25, r1
 2b0:	ec f4       	brge	.+58     	; 0x2ec <DIO_u8SetPortValue+0x6a>
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	19 f0       	breq	.+6      	; 0x2bc <DIO_u8SetPortValue+0x3a>
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	39 f0       	breq	.+14     	; 0x2c8 <DIO_u8SetPortValue+0x46>
 2ba:	18 c0       	rjmp	.+48     	; 0x2ec <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 2bc:	8b e3       	ldi	r24, 0x3B	; 59
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2b 81       	ldd	r18, Y+3	; 0x03
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
 2c6:	15 c0       	rjmp	.+42     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 2c8:	88 e3       	ldi	r24, 0x38	; 56
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	2b 81       	ldd	r18, Y+3	; 0x03
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 2d4:	85 e3       	ldi	r24, 0x35	; 53
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2b 81       	ldd	r18, Y+3	; 0x03
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 2e0:	82 e3       	ldi	r24, 0x32	; 50
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	2b 81       	ldd	r18, Y+3	; 0x03
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	00 00       	nop
				}


	return Local_u8ErrorState;
 2f2:	89 81       	ldd	r24, Y+1	; 0x01

}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	00 d0       	rcall	.+0      	; 0x306 <DIO_u8GetPinValue+0x6>
 306:	00 d0       	rcall	.+0      	; 0x308 <DIO_u8GetPinValue+0x8>
 308:	0f 92       	push	r0
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	6b 83       	std	Y+3, r22	; 0x03
 312:	5d 83       	std	Y+5, r21	; 0x05
 314:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 316:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 318:	8c 81       	ldd	r24, Y+4	; 0x04
 31a:	9d 81       	ldd	r25, Y+5	; 0x05
 31c:	89 2b       	or	r24, r25
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_u8GetPinValue+0x22>
 320:	73 c0       	rjmp	.+230    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	88 30       	cpi	r24, 0x08	; 8
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_u8GetPinValue+0x2a>
 328:	6f c0       	rjmp	.+222    	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
				{
					switch(Copy_u8Port)
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	84 30       	cpi	r24, 0x04	; 4
 332:	91 05       	cpc	r25, r1
 334:	09 f4       	brne	.+2      	; 0x338 <DIO_u8GetPinValue+0x38>
 336:	4f c0       	rjmp	.+158    	; 0x3d6 <DIO_u8GetPinValue+0xd6>
 338:	85 30       	cpi	r24, 0x05	; 5
 33a:	91 05       	cpc	r25, r1
 33c:	0c f0       	brlt	.+2      	; 0x340 <DIO_u8GetPinValue+0x40>
 33e:	60 c0       	rjmp	.+192    	; 0x400 <__FUSE_REGION_LENGTH__>
 340:	83 30       	cpi	r24, 0x03	; 3
 342:	91 05       	cpc	r25, r1
 344:	99 f1       	breq	.+102    	; 0x3ac <DIO_u8GetPinValue+0xac>
 346:	84 30       	cpi	r24, 0x04	; 4
 348:	91 05       	cpc	r25, r1
 34a:	0c f0       	brlt	.+2      	; 0x34e <DIO_u8GetPinValue+0x4e>
 34c:	59 c0       	rjmp	.+178    	; 0x400 <__FUSE_REGION_LENGTH__>
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	19 f0       	breq	.+6      	; 0x358 <DIO_u8GetPinValue+0x58>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	b1 f0       	breq	.+44     	; 0x382 <DIO_u8GetPinValue+0x82>
 356:	54 c0       	rjmp	.+168    	; 0x400 <__FUSE_REGION_LENGTH__>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 358:	89 e3       	ldi	r24, 0x39	; 57
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	80 81       	ld	r24, Z
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	2b 81       	ldd	r18, Y+3	; 0x03
 366:	22 2f       	mov	r18, r18
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_u8GetPinValue+0x70>
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	2a 95       	dec	r18
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_u8GetPinValue+0x6c>
 374:	28 2f       	mov	r18, r24
 376:	21 70       	andi	r18, 0x01	; 1
 378:	8c 81       	ldd	r24, Y+4	; 0x04
 37a:	9d 81       	ldd	r25, Y+5	; 0x05
 37c:	fc 01       	movw	r30, r24
 37e:	20 83       	st	Z, r18
 380:	42 c0       	rjmp	.+132    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 382:	86 e3       	ldi	r24, 0x36	; 54
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	2b 81       	ldd	r18, Y+3	; 0x03
 390:	22 2f       	mov	r18, r18
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_u8GetPinValue+0x9a>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	2a 95       	dec	r18
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_u8GetPinValue+0x96>
 39e:	28 2f       	mov	r18, r24
 3a0:	21 70       	andi	r18, 0x01	; 1
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18
 3aa:	2d c0       	rjmp	.+90     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 3ac:	83 e3       	ldi	r24, 0x33	; 51
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	fc 01       	movw	r30, r24
 3b2:	80 81       	ld	r24, Z
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	2b 81       	ldd	r18, Y+3	; 0x03
 3ba:	22 2f       	mov	r18, r18
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_u8GetPinValue+0xc4>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	2a 95       	dec	r18
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_u8GetPinValue+0xc0>
 3c8:	28 2f       	mov	r18, r24
 3ca:	21 70       	andi	r18, 0x01	; 1
 3cc:	8c 81       	ldd	r24, Y+4	; 0x04
 3ce:	9d 81       	ldd	r25, Y+5	; 0x05
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	18 c0       	rjmp	.+48     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 3d6:	80 e3       	ldi	r24, 0x30	; 48
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	80 81       	ld	r24, Z
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	2b 81       	ldd	r18, Y+3	; 0x03
 3e4:	22 2f       	mov	r18, r18
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8GetPinValue+0xee>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	2a 95       	dec	r18
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8GetPinValue+0xea>
 3f2:	28 2f       	mov	r18, r24
 3f4:	21 70       	andi	r18, 0x01	; 1
 3f6:	8c 81       	ldd	r24, Y+4	; 0x04
 3f8:	9d 81       	ldd	r25, Y+5	; 0x05
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
 3fe:	03 c0       	rjmp	.+6      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
					     default : Local_u8ErrorState=1; break;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 406:	02 c0       	rjmp	.+4      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 40c:	89 81       	ldd	r24, Y+1	; 0x01


}
 40e:	0f 90       	pop	r0
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	08 95       	ret

0000041e <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 426:	8a e3       	ldi	r24, 0x3A	; 58
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	21 e0       	ldi	r18, 0x01	; 1
 42c:	fc 01       	movw	r30, r24
 42e:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
 430:	87 e3       	ldi	r24, 0x37	; 55
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	fc 01       	movw	r30, r24
 436:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 438:	84 e3       	ldi	r24, 0x34	; 52
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	27 e0       	ldi	r18, 0x07	; 7
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 442:	81 e3       	ldi	r24, 0x31	; 49
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	fc 01       	movw	r30, r24
 448:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 44a:	8b e3       	ldi	r24, 0x3B	; 59
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	fc 01       	movw	r30, r24
 450:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 452:	88 e3       	ldi	r24, 0x38	; 56
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	fc 01       	movw	r30, r24
 458:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 45a:	85 e3       	ldi	r24, 0x35	; 53
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	fc 01       	movw	r30, r24
 460:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 462:	82 e3       	ldi	r24, 0x32	; 50
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	fc 01       	movw	r30, r24
 468:	10 82       	st	Z, r1
}
 46a:	00 00       	nop
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <main>:

#include "DIO_interface.h"
#include "PORT_interface.h"

void main()
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	c8 59       	subi	r28, 0x98	; 152
 47c:	d1 09       	sbc	r29, r1
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	de bf       	out	0x3e, r29	; 62
 484:	0f be       	out	0x3f, r0	; 63
 486:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
 488:	0e 94 0f 02 	call	0x41e	; 0x41e <PORT_voidInit>

	while(1)
	{
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	a8 e4       	ldi	r26, 0x48	; 72
 49c:	b2 e4       	ldi	r27, 0x42	; 66
 49e:	89 a3       	std	Y+33, r24	; 0x21
 4a0:	9a a3       	std	Y+34, r25	; 0x22
 4a2:	ab a3       	std	Y+35, r26	; 0x23
 4a4:	bc a3       	std	Y+36, r27	; 0x24
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 4a6:	2b ea       	ldi	r18, 0xAB	; 171
 4a8:	3a ea       	ldi	r19, 0xAA	; 170
 4aa:	4a e2       	ldi	r20, 0x2A	; 42
 4ac:	50 e4       	ldi	r21, 0x40	; 64
 4ae:	69 a1       	ldd	r22, Y+33	; 0x21
 4b0:	7a a1       	ldd	r23, Y+34	; 0x22
 4b2:	8b a1       	ldd	r24, Y+35	; 0x23
 4b4:	9c a1       	ldd	r25, Y+36	; 0x24
 4b6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__mulsf3>
 4ba:	2d 96       	adiw	r28, 0x0d	; 13
 4bc:	6c af       	std	Y+60, r22	; 0x3c
 4be:	7d af       	std	Y+61, r23	; 0x3d
 4c0:	8e af       	std	Y+62, r24	; 0x3e
 4c2:	9f af       	std	Y+63, r25	; 0x3f
 4c4:	2d 97       	sbiw	r28, 0x0d	; 13
 4c6:	2d 96       	adiw	r28, 0x0d	; 13
 4c8:	8c ad       	ldd	r24, Y+60	; 0x3c
 4ca:	9d ad       	ldd	r25, Y+61	; 0x3d
 4cc:	ae ad       	ldd	r26, Y+62	; 0x3e
 4ce:	bf ad       	ldd	r27, Y+63	; 0x3f
 4d0:	2d 97       	sbiw	r28, 0x0d	; 13
 4d2:	8d a3       	std	Y+37, r24	; 0x25
 4d4:	9e a3       	std	Y+38, r25	; 0x26
 4d6:	af a3       	std	Y+39, r26	; 0x27
 4d8:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
 4da:	89 a1       	ldd	r24, Y+33	; 0x21
 4dc:	9a a1       	ldd	r25, Y+34	; 0x22
 4de:	ab a1       	ldd	r26, Y+35	; 0x23
 4e0:	bc a1       	ldd	r27, Y+36	; 0x24
 4e2:	61 96       	adiw	r28, 0x11	; 17
 4e4:	8c af       	std	Y+60, r24	; 0x3c
 4e6:	9d af       	std	Y+61, r25	; 0x3d
 4e8:	ae af       	std	Y+62, r26	; 0x3e
 4ea:	bf af       	std	Y+63, r27	; 0x3f
 4ec:	61 97       	sbiw	r28, 0x11	; 17
 4ee:	61 96       	adiw	r28, 0x11	; 17
 4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
 4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
 4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
 4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
 4f8:	61 97       	sbiw	r28, 0x11	; 17
 4fa:	61 96       	adiw	r28, 0x11	; 17
 4fc:	6c ad       	ldd	r22, Y+60	; 0x3c
 4fe:	7d ad       	ldd	r23, Y+61	; 0x3d
 500:	8e ad       	ldd	r24, Y+62	; 0x3e
 502:	9f ad       	ldd	r25, Y+63	; 0x3f
 504:	61 97       	sbiw	r28, 0x11	; 17
 506:	0e 94 33 05 	call	0xa66	; 0xa66 <__addsf3>
 50a:	65 96       	adiw	r28, 0x15	; 21
 50c:	6c af       	std	Y+60, r22	; 0x3c
 50e:	7d af       	std	Y+61, r23	; 0x3d
 510:	8e af       	std	Y+62, r24	; 0x3e
 512:	9f af       	std	Y+63, r25	; 0x3f
 514:	65 97       	sbiw	r28, 0x15	; 21
 516:	65 96       	adiw	r28, 0x15	; 21
 518:	8c ad       	ldd	r24, Y+60	; 0x3c
 51a:	9d ad       	ldd	r25, Y+61	; 0x3d
 51c:	ae ad       	ldd	r26, Y+62	; 0x3e
 51e:	bf ad       	ldd	r27, Y+63	; 0x3f
 520:	65 97       	sbiw	r28, 0x15	; 21
 522:	89 a7       	std	Y+41, r24	; 0x29
 524:	9a a7       	std	Y+42, r25	; 0x2a
 526:	ab a7       	std	Y+43, r26	; 0x2b
 528:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
 52a:	20 e0       	ldi	r18, 0x00	; 0
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	40 e8       	ldi	r20, 0x80	; 128
 530:	5f e3       	ldi	r21, 0x3F	; 63
 532:	6d a1       	ldd	r22, Y+37	; 0x25
 534:	7e a1       	ldd	r23, Y+38	; 0x26
 536:	8f a1       	ldd	r24, Y+39	; 0x27
 538:	98 a5       	ldd	r25, Y+40	; 0x28
 53a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__cmpsf2>
 53e:	88 23       	and	r24, r24
 540:	1c f4       	brge	.+6      	; 0x548 <main+0xd6>
		__ticks = 1;
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	8d a7       	std	Y+45, r24	; 0x2d
 546:	fc c0       	rjmp	.+504    	; 0x740 <main+0x2ce>
	else if (__tmp2 > 65535)
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	3f ef       	ldi	r19, 0xFF	; 255
 54c:	4f e7       	ldi	r20, 0x7F	; 127
 54e:	57 e4       	ldi	r21, 0x47	; 71
 550:	69 a5       	ldd	r22, Y+41	; 0x29
 552:	7a a5       	ldd	r23, Y+42	; 0x2a
 554:	8b a5       	ldd	r24, Y+43	; 0x2b
 556:	9c a5       	ldd	r25, Y+44	; 0x2c
 558:	0e 94 ba 06 	call	0xd74	; 0xd74 <__gesf2>
 55c:	18 16       	cp	r1, r24
 55e:	0c f0       	brlt	.+2      	; 0x562 <main+0xf0>
 560:	b5 c0       	rjmp	.+362    	; 0x6cc <main+0x25a>
	{
		_delay_ms(__us / 1000.0);
 562:	20 e0       	ldi	r18, 0x00	; 0
 564:	30 e0       	ldi	r19, 0x00	; 0
 566:	4a e7       	ldi	r20, 0x7A	; 122
 568:	54 e4       	ldi	r21, 0x44	; 68
 56a:	69 a1       	ldd	r22, Y+33	; 0x21
 56c:	7a a1       	ldd	r23, Y+34	; 0x22
 56e:	8b a1       	ldd	r24, Y+35	; 0x23
 570:	9c a1       	ldd	r25, Y+36	; 0x24
 572:	0e 94 a4 05 	call	0xb48	; 0xb48 <__divsf3>
 576:	69 96       	adiw	r28, 0x19	; 25
 578:	6c af       	std	Y+60, r22	; 0x3c
 57a:	7d af       	std	Y+61, r23	; 0x3d
 57c:	8e af       	std	Y+62, r24	; 0x3e
 57e:	9f af       	std	Y+63, r25	; 0x3f
 580:	69 97       	sbiw	r28, 0x19	; 25
 582:	69 96       	adiw	r28, 0x19	; 25
 584:	8c ad       	ldd	r24, Y+60	; 0x3c
 586:	9d ad       	ldd	r25, Y+61	; 0x3d
 588:	ae ad       	ldd	r26, Y+62	; 0x3e
 58a:	bf ad       	ldd	r27, Y+63	; 0x3f
 58c:	69 97       	sbiw	r28, 0x19	; 25
 58e:	8e a7       	std	Y+46, r24	; 0x2e
 590:	9f a7       	std	Y+47, r25	; 0x2f
 592:	a8 ab       	std	Y+48, r26	; 0x30
 594:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 596:	20 e0       	ldi	r18, 0x00	; 0
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	4a ef       	ldi	r20, 0xFA	; 250
 59c:	54 e4       	ldi	r21, 0x44	; 68
 59e:	6e a5       	ldd	r22, Y+46	; 0x2e
 5a0:	7f a5       	ldd	r23, Y+47	; 0x2f
 5a2:	88 a9       	ldd	r24, Y+48	; 0x30
 5a4:	99 a9       	ldd	r25, Y+49	; 0x31
 5a6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__mulsf3>
 5aa:	6d 96       	adiw	r28, 0x1d	; 29
 5ac:	6c af       	std	Y+60, r22	; 0x3c
 5ae:	7d af       	std	Y+61, r23	; 0x3d
 5b0:	8e af       	std	Y+62, r24	; 0x3e
 5b2:	9f af       	std	Y+63, r25	; 0x3f
 5b4:	6d 97       	sbiw	r28, 0x1d	; 29
 5b6:	6d 96       	adiw	r28, 0x1d	; 29
 5b8:	8c ad       	ldd	r24, Y+60	; 0x3c
 5ba:	9d ad       	ldd	r25, Y+61	; 0x3d
 5bc:	ae ad       	ldd	r26, Y+62	; 0x3e
 5be:	bf ad       	ldd	r27, Y+63	; 0x3f
 5c0:	6d 97       	sbiw	r28, 0x1d	; 29
 5c2:	8a ab       	std	Y+50, r24	; 0x32
 5c4:	9b ab       	std	Y+51, r25	; 0x33
 5c6:	ac ab       	std	Y+52, r26	; 0x34
 5c8:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	40 e8       	ldi	r20, 0x80	; 128
 5d0:	5f e3       	ldi	r21, 0x3F	; 63
 5d2:	6a a9       	ldd	r22, Y+50	; 0x32
 5d4:	7b a9       	ldd	r23, Y+51	; 0x33
 5d6:	8c a9       	ldd	r24, Y+52	; 0x34
 5d8:	9d a9       	ldd	r25, Y+53	; 0x35
 5da:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__cmpsf2>
 5de:	88 23       	and	r24, r24
 5e0:	2c f4       	brge	.+10     	; 0x5ec <main+0x17a>
		__ticks = 1;
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	9f ab       	std	Y+55, r25	; 0x37
 5e8:	8e ab       	std	Y+54, r24	; 0x36
 5ea:	65 c0       	rjmp	.+202    	; 0x6b6 <main+0x244>
	else if (__tmp > 65535)
 5ec:	20 e0       	ldi	r18, 0x00	; 0
 5ee:	3f ef       	ldi	r19, 0xFF	; 255
 5f0:	4f e7       	ldi	r20, 0x7F	; 127
 5f2:	57 e4       	ldi	r21, 0x47	; 71
 5f4:	6a a9       	ldd	r22, Y+50	; 0x32
 5f6:	7b a9       	ldd	r23, Y+51	; 0x33
 5f8:	8c a9       	ldd	r24, Y+52	; 0x34
 5fa:	9d a9       	ldd	r25, Y+53	; 0x35
 5fc:	0e 94 ba 06 	call	0xd74	; 0xd74 <__gesf2>
 600:	18 16       	cp	r1, r24
 602:	0c f0       	brlt	.+2      	; 0x606 <main+0x194>
 604:	46 c0       	rjmp	.+140    	; 0x692 <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 606:	20 e0       	ldi	r18, 0x00	; 0
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	40 e2       	ldi	r20, 0x20	; 32
 60c:	51 e4       	ldi	r21, 0x41	; 65
 60e:	6e a5       	ldd	r22, Y+46	; 0x2e
 610:	7f a5       	ldd	r23, Y+47	; 0x2f
 612:	88 a9       	ldd	r24, Y+48	; 0x30
 614:	99 a9       	ldd	r25, Y+49	; 0x31
 616:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__mulsf3>
 61a:	a1 96       	adiw	r28, 0x21	; 33
 61c:	6c af       	std	Y+60, r22	; 0x3c
 61e:	7d af       	std	Y+61, r23	; 0x3d
 620:	8e af       	std	Y+62, r24	; 0x3e
 622:	9f af       	std	Y+63, r25	; 0x3f
 624:	a1 97       	sbiw	r28, 0x21	; 33
 626:	a1 96       	adiw	r28, 0x21	; 33
 628:	8c ad       	ldd	r24, Y+60	; 0x3c
 62a:	9d ad       	ldd	r25, Y+61	; 0x3d
 62c:	ae ad       	ldd	r26, Y+62	; 0x3e
 62e:	bf ad       	ldd	r27, Y+63	; 0x3f
 630:	a1 97       	sbiw	r28, 0x21	; 33
 632:	29 96       	adiw	r28, 0x09	; 9
 634:	8c af       	std	Y+60, r24	; 0x3c
 636:	9d af       	std	Y+61, r25	; 0x3d
 638:	ae af       	std	Y+62, r26	; 0x3e
 63a:	bf af       	std	Y+63, r27	; 0x3f
 63c:	29 97       	sbiw	r28, 0x09	; 9
 63e:	29 96       	adiw	r28, 0x09	; 9
 640:	6c ad       	ldd	r22, Y+60	; 0x3c
 642:	7d ad       	ldd	r23, Y+61	; 0x3d
 644:	8e ad       	ldd	r24, Y+62	; 0x3e
 646:	9f ad       	ldd	r25, Y+63	; 0x3f
 648:	29 97       	sbiw	r28, 0x09	; 9
 64a:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 64e:	a5 96       	adiw	r28, 0x25	; 37
 650:	6c af       	std	Y+60, r22	; 0x3c
 652:	7d af       	std	Y+61, r23	; 0x3d
 654:	8e af       	std	Y+62, r24	; 0x3e
 656:	9f af       	std	Y+63, r25	; 0x3f
 658:	a5 97       	sbiw	r28, 0x25	; 37
 65a:	a3 96       	adiw	r28, 0x23	; 35
 65c:	ae ad       	ldd	r26, Y+62	; 0x3e
 65e:	bf ad       	ldd	r27, Y+63	; 0x3f
 660:	a3 97       	sbiw	r28, 0x23	; 35
 662:	bf ab       	std	Y+55, r27	; 0x37
 664:	ae ab       	std	Y+54, r26	; 0x36
		while(__ticks)
 666:	10 c0       	rjmp	.+32     	; 0x688 <main+0x216>
 668:	88 ec       	ldi	r24, 0xC8	; 200
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	99 af       	std	Y+57, r25	; 0x39
 66e:	88 af       	std	Y+56, r24	; 0x38
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 670:	88 ad       	ldd	r24, Y+56	; 0x38
 672:	99 ad       	ldd	r25, Y+57	; 0x39
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <main+0x202>
 678:	99 af       	std	Y+57, r25	; 0x39
 67a:	88 af       	std	Y+56, r24	; 0x38
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 67c:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 67e:	8e a9       	ldd	r24, Y+54	; 0x36
 680:	9f a9       	ldd	r25, Y+55	; 0x37
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	9f ab       	std	Y+55, r25	; 0x37
 686:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 688:	8e a9       	ldd	r24, Y+54	; 0x36
 68a:	9f a9       	ldd	r25, Y+55	; 0x37
 68c:	89 2b       	or	r24, r25
 68e:	61 f7       	brne	.-40     	; 0x668 <main+0x1f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 690:	57 c0       	rjmp	.+174    	; 0x740 <main+0x2ce>
	}
	else
		__ticks = (uint16_t)__tmp;
 692:	6a a9       	ldd	r22, Y+50	; 0x32
 694:	7b a9       	ldd	r23, Y+51	; 0x33
 696:	8c a9       	ldd	r24, Y+52	; 0x34
 698:	9d a9       	ldd	r25, Y+53	; 0x35
 69a:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 69e:	a9 96       	adiw	r28, 0x29	; 41
 6a0:	6c af       	std	Y+60, r22	; 0x3c
 6a2:	7d af       	std	Y+61, r23	; 0x3d
 6a4:	8e af       	std	Y+62, r24	; 0x3e
 6a6:	9f af       	std	Y+63, r25	; 0x3f
 6a8:	a9 97       	sbiw	r28, 0x29	; 41
 6aa:	a7 96       	adiw	r28, 0x27	; 39
 6ac:	ee ad       	ldd	r30, Y+62	; 0x3e
 6ae:	ff ad       	ldd	r31, Y+63	; 0x3f
 6b0:	a7 97       	sbiw	r28, 0x27	; 39
 6b2:	ff ab       	std	Y+55, r31	; 0x37
 6b4:	ee ab       	std	Y+54, r30	; 0x36
 6b6:	8e a9       	ldd	r24, Y+54	; 0x36
 6b8:	9f a9       	ldd	r25, Y+55	; 0x37
 6ba:	9b af       	std	Y+59, r25	; 0x3b
 6bc:	8a af       	std	Y+58, r24	; 0x3a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6be:	8a ad       	ldd	r24, Y+58	; 0x3a
 6c0:	9b ad       	ldd	r25, Y+59	; 0x3b
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <main+0x250>
 6c6:	9b af       	std	Y+59, r25	; 0x3b
 6c8:	8a af       	std	Y+58, r24	; 0x3a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 6ca:	3a c0       	rjmp	.+116    	; 0x740 <main+0x2ce>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	4f e7       	ldi	r20, 0x7F	; 127
 6d2:	53 e4       	ldi	r21, 0x43	; 67
 6d4:	6d a1       	ldd	r22, Y+37	; 0x25
 6d6:	7e a1       	ldd	r23, Y+38	; 0x26
 6d8:	8f a1       	ldd	r24, Y+39	; 0x27
 6da:	98 a5       	ldd	r25, Y+40	; 0x28
 6dc:	0e 94 ba 06 	call	0xd74	; 0xd74 <__gesf2>
 6e0:	18 16       	cp	r1, r24
 6e2:	f4 f4       	brge	.+60     	; 0x720 <main+0x2ae>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 6e4:	69 a5       	ldd	r22, Y+41	; 0x29
 6e6:	7a a5       	ldd	r23, Y+42	; 0x2a
 6e8:	8b a5       	ldd	r24, Y+43	; 0x2b
 6ea:	9c a5       	ldd	r25, Y+44	; 0x2c
 6ec:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 6f0:	ad 96       	adiw	r28, 0x2d	; 45
 6f2:	6c af       	std	Y+60, r22	; 0x3c
 6f4:	7d af       	std	Y+61, r23	; 0x3d
 6f6:	8e af       	std	Y+62, r24	; 0x3e
 6f8:	9f af       	std	Y+63, r25	; 0x3f
 6fa:	ad 97       	sbiw	r28, 0x2d	; 45
 6fc:	ab 96       	adiw	r28, 0x2b	; 43
 6fe:	8e ad       	ldd	r24, Y+62	; 0x3e
 700:	9f ad       	ldd	r25, Y+63	; 0x3f
 702:	ab 97       	sbiw	r28, 0x2b	; 43
 704:	9d af       	std	Y+61, r25	; 0x3d
 706:	8c af       	std	Y+60, r24	; 0x3c
 708:	8c ad       	ldd	r24, Y+60	; 0x3c
 70a:	9d ad       	ldd	r25, Y+61	; 0x3d
 70c:	9f af       	std	Y+63, r25	; 0x3f
 70e:	8e af       	std	Y+62, r24	; 0x3e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 710:	8e ad       	ldd	r24, Y+62	; 0x3e
 712:	9f ad       	ldd	r25, Y+63	; 0x3f
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <main+0x2a2>
 718:	9f af       	std	Y+63, r25	; 0x3f
 71a:	8e af       	std	Y+62, r24	; 0x3e
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 71c:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
 71e:	24 c0       	rjmp	.+72     	; 0x768 <main+0x2f6>
	}
	else
		__ticks = (uint8_t)__tmp;
 720:	6d a1       	ldd	r22, Y+37	; 0x25
 722:	7e a1       	ldd	r23, Y+38	; 0x26
 724:	8f a1       	ldd	r24, Y+39	; 0x27
 726:	98 a5       	ldd	r25, Y+40	; 0x28
 728:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 72c:	e1 96       	adiw	r28, 0x31	; 49
 72e:	6c af       	std	Y+60, r22	; 0x3c
 730:	7d af       	std	Y+61, r23	; 0x3d
 732:	8e af       	std	Y+62, r24	; 0x3e
 734:	9f af       	std	Y+63, r25	; 0x3f
 736:	e1 97       	sbiw	r28, 0x31	; 49
 738:	ae 96       	adiw	r28, 0x2e	; 46
 73a:	9f ad       	ldd	r25, Y+63	; 0x3f
 73c:	ae 97       	sbiw	r28, 0x2e	; 46
 73e:	9d a7       	std	Y+45, r25	; 0x2d
 740:	2d a5       	ldd	r18, Y+45	; 0x2d
 742:	ce 01       	movw	r24, r28
 744:	80 5c       	subi	r24, 0xC0	; 192
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	dc 01       	movw	r26, r24
 74a:	2c 93       	st	X, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 74c:	ce 01       	movw	r24, r28
 74e:	80 5c       	subi	r24, 0xC0	; 192
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	fc 01       	movw	r30, r24
 754:	80 81       	ld	r24, Z
 756:	28 2f       	mov	r18, r24
 758:	2a 95       	dec	r18
 75a:	f1 f7       	brne	.-4      	; 0x758 <main+0x2e6>
 75c:	ce 01       	movw	r24, r28
 75e:	80 5c       	subi	r24, 0xC0	; 192
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	dc 01       	movw	r26, r24
 764:	2c 93       	st	X, r18
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
}
 766:	00 00       	nop
		_delay_us(50);
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_u8SetPinValue>
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	a8 e4       	ldi	r26, 0x48	; 72
 778:	b2 e4       	ldi	r27, 0x42	; 66
 77a:	89 83       	std	Y+1, r24	; 0x01
 77c:	9a 83       	std	Y+2, r25	; 0x02
 77e:	ab 83       	std	Y+3, r26	; 0x03
 780:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 782:	2b ea       	ldi	r18, 0xAB	; 171
 784:	3a ea       	ldi	r19, 0xAA	; 170
 786:	4a e2       	ldi	r20, 0x2A	; 42
 788:	50 e4       	ldi	r21, 0x40	; 64
 78a:	69 81       	ldd	r22, Y+1	; 0x01
 78c:	7a 81       	ldd	r23, Y+2	; 0x02
 78e:	8b 81       	ldd	r24, Y+3	; 0x03
 790:	9c 81       	ldd	r25, Y+4	; 0x04
 792:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__mulsf3>
 796:	e5 96       	adiw	r28, 0x35	; 53
 798:	6c af       	std	Y+60, r22	; 0x3c
 79a:	7d af       	std	Y+61, r23	; 0x3d
 79c:	8e af       	std	Y+62, r24	; 0x3e
 79e:	9f af       	std	Y+63, r25	; 0x3f
 7a0:	e5 97       	sbiw	r28, 0x35	; 53
 7a2:	e5 96       	adiw	r28, 0x35	; 53
 7a4:	8c ad       	ldd	r24, Y+60	; 0x3c
 7a6:	9d ad       	ldd	r25, Y+61	; 0x3d
 7a8:	ae ad       	ldd	r26, Y+62	; 0x3e
 7aa:	bf ad       	ldd	r27, Y+63	; 0x3f
 7ac:	e5 97       	sbiw	r28, 0x35	; 53
 7ae:	8d 83       	std	Y+5, r24	; 0x05
 7b0:	9e 83       	std	Y+6, r25	; 0x06
 7b2:	af 83       	std	Y+7, r26	; 0x07
 7b4:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
 7b6:	89 81       	ldd	r24, Y+1	; 0x01
 7b8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ba:	ab 81       	ldd	r26, Y+3	; 0x03
 7bc:	bc 81       	ldd	r27, Y+4	; 0x04
 7be:	e9 96       	adiw	r28, 0x39	; 57
 7c0:	8c af       	std	Y+60, r24	; 0x3c
 7c2:	9d af       	std	Y+61, r25	; 0x3d
 7c4:	ae af       	std	Y+62, r26	; 0x3e
 7c6:	bf af       	std	Y+63, r27	; 0x3f
 7c8:	e9 97       	sbiw	r28, 0x39	; 57
 7ca:	e9 96       	adiw	r28, 0x39	; 57
 7cc:	2c ad       	ldd	r18, Y+60	; 0x3c
 7ce:	3d ad       	ldd	r19, Y+61	; 0x3d
 7d0:	4e ad       	ldd	r20, Y+62	; 0x3e
 7d2:	5f ad       	ldd	r21, Y+63	; 0x3f
 7d4:	e9 97       	sbiw	r28, 0x39	; 57
 7d6:	e9 96       	adiw	r28, 0x39	; 57
 7d8:	6c ad       	ldd	r22, Y+60	; 0x3c
 7da:	7d ad       	ldd	r23, Y+61	; 0x3d
 7dc:	8e ad       	ldd	r24, Y+62	; 0x3e
 7de:	9f ad       	ldd	r25, Y+63	; 0x3f
 7e0:	e9 97       	sbiw	r28, 0x39	; 57
 7e2:	0e 94 33 05 	call	0xa66	; 0xa66 <__addsf3>
 7e6:	ed 96       	adiw	r28, 0x3d	; 61
 7e8:	6c af       	std	Y+60, r22	; 0x3c
 7ea:	7d af       	std	Y+61, r23	; 0x3d
 7ec:	8e af       	std	Y+62, r24	; 0x3e
 7ee:	9f af       	std	Y+63, r25	; 0x3f
 7f0:	ed 97       	sbiw	r28, 0x3d	; 61
 7f2:	ed 96       	adiw	r28, 0x3d	; 61
 7f4:	8c ad       	ldd	r24, Y+60	; 0x3c
 7f6:	9d ad       	ldd	r25, Y+61	; 0x3d
 7f8:	ae ad       	ldd	r26, Y+62	; 0x3e
 7fa:	bf ad       	ldd	r27, Y+63	; 0x3f
 7fc:	ed 97       	sbiw	r28, 0x3d	; 61
 7fe:	89 87       	std	Y+9, r24	; 0x09
 800:	9a 87       	std	Y+10, r25	; 0x0a
 802:	ab 87       	std	Y+11, r26	; 0x0b
 804:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 806:	20 e0       	ldi	r18, 0x00	; 0
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	40 e8       	ldi	r20, 0x80	; 128
 80c:	5f e3       	ldi	r21, 0x3F	; 63
 80e:	6d 81       	ldd	r22, Y+5	; 0x05
 810:	7e 81       	ldd	r23, Y+6	; 0x06
 812:	8f 81       	ldd	r24, Y+7	; 0x07
 814:	98 85       	ldd	r25, Y+8	; 0x08
 816:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__cmpsf2>
 81a:	88 23       	and	r24, r24
 81c:	1c f4       	brge	.+6      	; 0x824 <main+0x3b2>
		__ticks = 1;
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	8d 87       	std	Y+13, r24	; 0x0d
 822:	18 c1       	rjmp	.+560    	; 0xa54 <__stack+0x1f5>
	else if (__tmp2 > 65535)
 824:	20 e0       	ldi	r18, 0x00	; 0
 826:	3f ef       	ldi	r19, 0xFF	; 255
 828:	4f e7       	ldi	r20, 0x7F	; 127
 82a:	57 e4       	ldi	r21, 0x47	; 71
 82c:	69 85       	ldd	r22, Y+9	; 0x09
 82e:	7a 85       	ldd	r23, Y+10	; 0x0a
 830:	8b 85       	ldd	r24, Y+11	; 0x0b
 832:	9c 85       	ldd	r25, Y+12	; 0x0c
 834:	0e 94 ba 06 	call	0xd74	; 0xd74 <__gesf2>
 838:	18 16       	cp	r1, r24
 83a:	0c f0       	brlt	.+2      	; 0x83e <main+0x3cc>
 83c:	c9 c0       	rjmp	.+402    	; 0x9d0 <__stack+0x171>
	{
		_delay_ms(__us / 1000.0);
 83e:	20 e0       	ldi	r18, 0x00	; 0
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	4a e7       	ldi	r20, 0x7A	; 122
 844:	54 e4       	ldi	r21, 0x44	; 68
 846:	69 81       	ldd	r22, Y+1	; 0x01
 848:	7a 81       	ldd	r23, Y+2	; 0x02
 84a:	8b 81       	ldd	r24, Y+3	; 0x03
 84c:	9c 81       	ldd	r25, Y+4	; 0x04
 84e:	0e 94 a4 05 	call	0xb48	; 0xb48 <__divsf3>
 852:	c3 58       	subi	r28, 0x83	; 131
 854:	df 4f       	sbci	r29, 0xFF	; 255
 856:	68 83       	st	Y, r22
 858:	79 83       	std	Y+1, r23	; 0x01
 85a:	8a 83       	std	Y+2, r24	; 0x02
 85c:	9b 83       	std	Y+3, r25	; 0x03
 85e:	cd 57       	subi	r28, 0x7D	; 125
 860:	d0 40       	sbci	r29, 0x00	; 0
 862:	c3 58       	subi	r28, 0x83	; 131
 864:	df 4f       	sbci	r29, 0xFF	; 255
 866:	88 81       	ld	r24, Y
 868:	99 81       	ldd	r25, Y+1	; 0x01
 86a:	aa 81       	ldd	r26, Y+2	; 0x02
 86c:	bb 81       	ldd	r27, Y+3	; 0x03
 86e:	cd 57       	subi	r28, 0x7D	; 125
 870:	d0 40       	sbci	r29, 0x00	; 0
 872:	8e 87       	std	Y+14, r24	; 0x0e
 874:	9f 87       	std	Y+15, r25	; 0x0f
 876:	a8 8b       	std	Y+16, r26	; 0x10
 878:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 87a:	20 e0       	ldi	r18, 0x00	; 0
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	4a ef       	ldi	r20, 0xFA	; 250
 880:	54 e4       	ldi	r21, 0x44	; 68
 882:	6e 85       	ldd	r22, Y+14	; 0x0e
 884:	7f 85       	ldd	r23, Y+15	; 0x0f
 886:	88 89       	ldd	r24, Y+16	; 0x10
 888:	99 89       	ldd	r25, Y+17	; 0x11
 88a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__mulsf3>
 88e:	cf 57       	subi	r28, 0x7F	; 127
 890:	df 4f       	sbci	r29, 0xFF	; 255
 892:	68 83       	st	Y, r22
 894:	79 83       	std	Y+1, r23	; 0x01
 896:	8a 83       	std	Y+2, r24	; 0x02
 898:	9b 83       	std	Y+3, r25	; 0x03
 89a:	c1 58       	subi	r28, 0x81	; 129
 89c:	d0 40       	sbci	r29, 0x00	; 0
 89e:	cf 57       	subi	r28, 0x7F	; 127
 8a0:	df 4f       	sbci	r29, 0xFF	; 255
 8a2:	88 81       	ld	r24, Y
 8a4:	99 81       	ldd	r25, Y+1	; 0x01
 8a6:	aa 81       	ldd	r26, Y+2	; 0x02
 8a8:	bb 81       	ldd	r27, Y+3	; 0x03
 8aa:	c1 58       	subi	r28, 0x81	; 129
 8ac:	d0 40       	sbci	r29, 0x00	; 0
 8ae:	8a 8b       	std	Y+18, r24	; 0x12
 8b0:	9b 8b       	std	Y+19, r25	; 0x13
 8b2:	ac 8b       	std	Y+20, r26	; 0x14
 8b4:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
 8b6:	20 e0       	ldi	r18, 0x00	; 0
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	40 e8       	ldi	r20, 0x80	; 128
 8bc:	5f e3       	ldi	r21, 0x3F	; 63
 8be:	6a 89       	ldd	r22, Y+18	; 0x12
 8c0:	7b 89       	ldd	r23, Y+19	; 0x13
 8c2:	8c 89       	ldd	r24, Y+20	; 0x14
 8c4:	9d 89       	ldd	r25, Y+21	; 0x15
 8c6:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__cmpsf2>
 8ca:	88 23       	and	r24, r24
 8cc:	2c f4       	brge	.+10     	; 0x8d8 <__stack+0x79>
		__ticks = 1;
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	9f 8b       	std	Y+23, r25	; 0x17
 8d4:	8e 8b       	std	Y+22, r24	; 0x16
 8d6:	71 c0       	rjmp	.+226    	; 0x9ba <__stack+0x15b>
	else if (__tmp > 65535)
 8d8:	20 e0       	ldi	r18, 0x00	; 0
 8da:	3f ef       	ldi	r19, 0xFF	; 255
 8dc:	4f e7       	ldi	r20, 0x7F	; 127
 8de:	57 e4       	ldi	r21, 0x47	; 71
 8e0:	6a 89       	ldd	r22, Y+18	; 0x12
 8e2:	7b 89       	ldd	r23, Y+19	; 0x13
 8e4:	8c 89       	ldd	r24, Y+20	; 0x14
 8e6:	9d 89       	ldd	r25, Y+21	; 0x15
 8e8:	0e 94 ba 06 	call	0xd74	; 0xd74 <__gesf2>
 8ec:	18 16       	cp	r1, r24
 8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__stack+0x93>
 8f0:	4e c0       	rjmp	.+156    	; 0x98e <__stack+0x12f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	40 e2       	ldi	r20, 0x20	; 32
 8f8:	51 e4       	ldi	r21, 0x41	; 65
 8fa:	6e 85       	ldd	r22, Y+14	; 0x0e
 8fc:	7f 85       	ldd	r23, Y+15	; 0x0f
 8fe:	88 89       	ldd	r24, Y+16	; 0x10
 900:	99 89       	ldd	r25, Y+17	; 0x11
 902:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__mulsf3>
 906:	cb 57       	subi	r28, 0x7B	; 123
 908:	df 4f       	sbci	r29, 0xFF	; 255
 90a:	68 83       	st	Y, r22
 90c:	79 83       	std	Y+1, r23	; 0x01
 90e:	8a 83       	std	Y+2, r24	; 0x02
 910:	9b 83       	std	Y+3, r25	; 0x03
 912:	c5 58       	subi	r28, 0x85	; 133
 914:	d0 40       	sbci	r29, 0x00	; 0
 916:	cb 57       	subi	r28, 0x7B	; 123
 918:	df 4f       	sbci	r29, 0xFF	; 255
 91a:	88 81       	ld	r24, Y
 91c:	99 81       	ldd	r25, Y+1	; 0x01
 91e:	aa 81       	ldd	r26, Y+2	; 0x02
 920:	bb 81       	ldd	r27, Y+3	; 0x03
 922:	c5 58       	subi	r28, 0x85	; 133
 924:	d0 40       	sbci	r29, 0x00	; 0
 926:	25 96       	adiw	r28, 0x05	; 5
 928:	8c af       	std	Y+60, r24	; 0x3c
 92a:	9d af       	std	Y+61, r25	; 0x3d
 92c:	ae af       	std	Y+62, r26	; 0x3e
 92e:	bf af       	std	Y+63, r27	; 0x3f
 930:	25 97       	sbiw	r28, 0x05	; 5
 932:	25 96       	adiw	r28, 0x05	; 5
 934:	6c ad       	ldd	r22, Y+60	; 0x3c
 936:	7d ad       	ldd	r23, Y+61	; 0x3d
 938:	8e ad       	ldd	r24, Y+62	; 0x3e
 93a:	9f ad       	ldd	r25, Y+63	; 0x3f
 93c:	25 97       	sbiw	r28, 0x05	; 5
 93e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 942:	c7 57       	subi	r28, 0x77	; 119
 944:	df 4f       	sbci	r29, 0xFF	; 255
 946:	68 83       	st	Y, r22
 948:	79 83       	std	Y+1, r23	; 0x01
 94a:	8a 83       	std	Y+2, r24	; 0x02
 94c:	9b 83       	std	Y+3, r25	; 0x03
 94e:	c9 58       	subi	r28, 0x89	; 137
 950:	d0 40       	sbci	r29, 0x00	; 0
 952:	c7 57       	subi	r28, 0x77	; 119
 954:	df 4f       	sbci	r29, 0xFF	; 255
 956:	a8 81       	ld	r26, Y
 958:	b9 81       	ldd	r27, Y+1	; 0x01
 95a:	c9 58       	subi	r28, 0x89	; 137
 95c:	d0 40       	sbci	r29, 0x00	; 0
 95e:	bf 8b       	std	Y+23, r27	; 0x17
 960:	ae 8b       	std	Y+22, r26	; 0x16
		while(__ticks)
 962:	10 c0       	rjmp	.+32     	; 0x984 <__stack+0x125>
 964:	88 ec       	ldi	r24, 0xC8	; 200
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	99 8f       	std	Y+25, r25	; 0x19
 96a:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 96c:	88 8d       	ldd	r24, Y+24	; 0x18
 96e:	99 8d       	ldd	r25, Y+25	; 0x19
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <__stack+0x111>
 974:	99 8f       	std	Y+25, r25	; 0x19
 976:	88 8f       	std	Y+24, r24	; 0x18
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 978:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 97a:	8e 89       	ldd	r24, Y+22	; 0x16
 97c:	9f 89       	ldd	r25, Y+23	; 0x17
 97e:	01 97       	sbiw	r24, 0x01	; 1
 980:	9f 8b       	std	Y+23, r25	; 0x17
 982:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 984:	8e 89       	ldd	r24, Y+22	; 0x16
 986:	9f 89       	ldd	r25, Y+23	; 0x17
 988:	89 2b       	or	r24, r25
 98a:	61 f7       	brne	.-40     	; 0x964 <__stack+0x105>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
 98c:	63 c0       	rjmp	.+198    	; 0xa54 <__stack+0x1f5>
	}
	else
		__ticks = (uint16_t)__tmp;
 98e:	6a 89       	ldd	r22, Y+18	; 0x12
 990:	7b 89       	ldd	r23, Y+19	; 0x13
 992:	8c 89       	ldd	r24, Y+20	; 0x14
 994:	9d 89       	ldd	r25, Y+21	; 0x15
 996:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 99a:	c3 57       	subi	r28, 0x73	; 115
 99c:	df 4f       	sbci	r29, 0xFF	; 255
 99e:	68 83       	st	Y, r22
 9a0:	79 83       	std	Y+1, r23	; 0x01
 9a2:	8a 83       	std	Y+2, r24	; 0x02
 9a4:	9b 83       	std	Y+3, r25	; 0x03
 9a6:	cd 58       	subi	r28, 0x8D	; 141
 9a8:	d0 40       	sbci	r29, 0x00	; 0
 9aa:	c3 57       	subi	r28, 0x73	; 115
 9ac:	df 4f       	sbci	r29, 0xFF	; 255
 9ae:	e8 81       	ld	r30, Y
 9b0:	f9 81       	ldd	r31, Y+1	; 0x01
 9b2:	cd 58       	subi	r28, 0x8D	; 141
 9b4:	d0 40       	sbci	r29, 0x00	; 0
 9b6:	ff 8b       	std	Y+23, r31	; 0x17
 9b8:	ee 8b       	std	Y+22, r30	; 0x16
 9ba:	8e 89       	ldd	r24, Y+22	; 0x16
 9bc:	9f 89       	ldd	r25, Y+23	; 0x17
 9be:	9b 8f       	std	Y+27, r25	; 0x1b
 9c0:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 9c2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 9c4:	9b 8d       	ldd	r25, Y+27	; 0x1b
 9c6:	01 97       	sbiw	r24, 0x01	; 1
 9c8:	f1 f7       	brne	.-4      	; 0x9c6 <__stack+0x167>
 9ca:	9b 8f       	std	Y+27, r25	; 0x1b
 9cc:	8a 8f       	std	Y+26, r24	; 0x1a
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 9ce:	42 c0       	rjmp	.+132    	; 0xa54 <__stack+0x1f5>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 9d0:	20 e0       	ldi	r18, 0x00	; 0
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	4f e7       	ldi	r20, 0x7F	; 127
 9d6:	53 e4       	ldi	r21, 0x43	; 67
 9d8:	6d 81       	ldd	r22, Y+5	; 0x05
 9da:	7e 81       	ldd	r23, Y+6	; 0x06
 9dc:	8f 81       	ldd	r24, Y+7	; 0x07
 9de:	98 85       	ldd	r25, Y+8	; 0x08
 9e0:	0e 94 ba 06 	call	0xd74	; 0xd74 <__gesf2>
 9e4:	18 16       	cp	r1, r24
 9e6:	14 f5       	brge	.+68     	; 0xa2c <__stack+0x1cd>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 9e8:	69 85       	ldd	r22, Y+9	; 0x09
 9ea:	7a 85       	ldd	r23, Y+10	; 0x0a
 9ec:	8b 85       	ldd	r24, Y+11	; 0x0b
 9ee:	9c 85       	ldd	r25, Y+12	; 0x0c
 9f0:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 9f4:	cf 56       	subi	r28, 0x6F	; 111
 9f6:	df 4f       	sbci	r29, 0xFF	; 255
 9f8:	68 83       	st	Y, r22
 9fa:	79 83       	std	Y+1, r23	; 0x01
 9fc:	8a 83       	std	Y+2, r24	; 0x02
 9fe:	9b 83       	std	Y+3, r25	; 0x03
 a00:	c1 59       	subi	r28, 0x91	; 145
 a02:	d0 40       	sbci	r29, 0x00	; 0
 a04:	cf 56       	subi	r28, 0x6F	; 111
 a06:	df 4f       	sbci	r29, 0xFF	; 255
 a08:	88 81       	ld	r24, Y
 a0a:	99 81       	ldd	r25, Y+1	; 0x01
 a0c:	c1 59       	subi	r28, 0x91	; 145
 a0e:	d0 40       	sbci	r29, 0x00	; 0
 a10:	9d 8f       	std	Y+29, r25	; 0x1d
 a12:	8c 8f       	std	Y+28, r24	; 0x1c
 a14:	8c 8d       	ldd	r24, Y+28	; 0x1c
 a16:	9d 8d       	ldd	r25, Y+29	; 0x1d
 a18:	9f 8f       	std	Y+31, r25	; 0x1f
 a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 a1c:	8e 8d       	ldd	r24, Y+30	; 0x1e
 a1e:	9f 8d       	ldd	r25, Y+31	; 0x1f
 a20:	01 97       	sbiw	r24, 0x01	; 1
 a22:	f1 f7       	brne	.-4      	; 0xa20 <__stack+0x1c1>
 a24:	9f 8f       	std	Y+31, r25	; 0x1f
 a26:	8e 8f       	std	Y+30, r24	; 0x1e
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
 a28:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
 a2a:	1b c0       	rjmp	.+54     	; 0xa62 <__stack+0x203>
	}
	else
		__ticks = (uint8_t)__tmp;
 a2c:	6d 81       	ldd	r22, Y+5	; 0x05
 a2e:	7e 81       	ldd	r23, Y+6	; 0x06
 a30:	8f 81       	ldd	r24, Y+7	; 0x07
 a32:	98 85       	ldd	r25, Y+8	; 0x08
 a34:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fixunssfsi>
 a38:	cb 56       	subi	r28, 0x6B	; 107
 a3a:	df 4f       	sbci	r29, 0xFF	; 255
 a3c:	68 83       	st	Y, r22
 a3e:	79 83       	std	Y+1, r23	; 0x01
 a40:	8a 83       	std	Y+2, r24	; 0x02
 a42:	9b 83       	std	Y+3, r25	; 0x03
 a44:	c5 59       	subi	r28, 0x95	; 149
 a46:	d0 40       	sbci	r29, 0x00	; 0
 a48:	cb 56       	subi	r28, 0x6B	; 107
 a4a:	df 4f       	sbci	r29, 0xFF	; 255
 a4c:	98 81       	ld	r25, Y
 a4e:	c5 59       	subi	r28, 0x95	; 149
 a50:	d0 40       	sbci	r29, 0x00	; 0
 a52:	9d 87       	std	Y+13, r25	; 0x0d
 a54:	8d 85       	ldd	r24, Y+13	; 0x0d
 a56:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 a58:	88 a1       	ldd	r24, Y+32	; 0x20
 a5a:	8a 95       	dec	r24
 a5c:	f1 f7       	brne	.-4      	; 0xa5a <__stack+0x1fb>
 a5e:	88 a3       	std	Y+32, r24	; 0x20
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
}
 a60:	00 00       	nop
{
	PORT_voidInit();

	while(1)
	{
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
 a62:	14 cd       	rjmp	.-1496   	; 0x48c <main+0x1a>

00000a64 <__subsf3>:
 a64:	50 58       	subi	r21, 0x80	; 128

00000a66 <__addsf3>:
 a66:	bb 27       	eor	r27, r27
 a68:	aa 27       	eor	r26, r26
 a6a:	0e 94 4a 05 	call	0xa94	; 0xa94 <__addsf3x>
 a6e:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__fp_round>
 a72:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscA>
 a76:	38 f0       	brcs	.+14     	; 0xa86 <__addsf3+0x20>
 a78:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscB>
 a7c:	20 f0       	brcs	.+8      	; 0xa86 <__addsf3+0x20>
 a7e:	39 f4       	brne	.+14     	; 0xa8e <__addsf3+0x28>
 a80:	9f 3f       	cpi	r25, 0xFF	; 255
 a82:	19 f4       	brne	.+6      	; 0xa8a <__addsf3+0x24>
 a84:	26 f4       	brtc	.+8      	; 0xa8e <__addsf3+0x28>
 a86:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_nan>
 a8a:	0e f4       	brtc	.+2      	; 0xa8e <__addsf3+0x28>
 a8c:	e0 95       	com	r30
 a8e:	e7 fb       	bst	r30, 7
 a90:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_inf>

00000a94 <__addsf3x>:
 a94:	e9 2f       	mov	r30, r25
 a96:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_split3>
 a9a:	58 f3       	brcs	.-42     	; 0xa72 <__addsf3+0xc>
 a9c:	ba 17       	cp	r27, r26
 a9e:	62 07       	cpc	r22, r18
 aa0:	73 07       	cpc	r23, r19
 aa2:	84 07       	cpc	r24, r20
 aa4:	95 07       	cpc	r25, r21
 aa6:	20 f0       	brcs	.+8      	; 0xab0 <__addsf3x+0x1c>
 aa8:	79 f4       	brne	.+30     	; 0xac8 <__addsf3x+0x34>
 aaa:	a6 f5       	brtc	.+104    	; 0xb14 <__addsf3x+0x80>
 aac:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__fp_zero>
 ab0:	0e f4       	brtc	.+2      	; 0xab4 <__addsf3x+0x20>
 ab2:	e0 95       	com	r30
 ab4:	0b 2e       	mov	r0, r27
 ab6:	ba 2f       	mov	r27, r26
 ab8:	a0 2d       	mov	r26, r0
 aba:	0b 01       	movw	r0, r22
 abc:	b9 01       	movw	r22, r18
 abe:	90 01       	movw	r18, r0
 ac0:	0c 01       	movw	r0, r24
 ac2:	ca 01       	movw	r24, r20
 ac4:	a0 01       	movw	r20, r0
 ac6:	11 24       	eor	r1, r1
 ac8:	ff 27       	eor	r31, r31
 aca:	59 1b       	sub	r21, r25
 acc:	99 f0       	breq	.+38     	; 0xaf4 <__addsf3x+0x60>
 ace:	59 3f       	cpi	r21, 0xF9	; 249
 ad0:	50 f4       	brcc	.+20     	; 0xae6 <__addsf3x+0x52>
 ad2:	50 3e       	cpi	r21, 0xE0	; 224
 ad4:	68 f1       	brcs	.+90     	; 0xb30 <__addsf3x+0x9c>
 ad6:	1a 16       	cp	r1, r26
 ad8:	f0 40       	sbci	r31, 0x00	; 0
 ada:	a2 2f       	mov	r26, r18
 adc:	23 2f       	mov	r18, r19
 ade:	34 2f       	mov	r19, r20
 ae0:	44 27       	eor	r20, r20
 ae2:	58 5f       	subi	r21, 0xF8	; 248
 ae4:	f3 cf       	rjmp	.-26     	; 0xacc <__addsf3x+0x38>
 ae6:	46 95       	lsr	r20
 ae8:	37 95       	ror	r19
 aea:	27 95       	ror	r18
 aec:	a7 95       	ror	r26
 aee:	f0 40       	sbci	r31, 0x00	; 0
 af0:	53 95       	inc	r21
 af2:	c9 f7       	brne	.-14     	; 0xae6 <__addsf3x+0x52>
 af4:	7e f4       	brtc	.+30     	; 0xb14 <__addsf3x+0x80>
 af6:	1f 16       	cp	r1, r31
 af8:	ba 0b       	sbc	r27, r26
 afa:	62 0b       	sbc	r22, r18
 afc:	73 0b       	sbc	r23, r19
 afe:	84 0b       	sbc	r24, r20
 b00:	ba f0       	brmi	.+46     	; 0xb30 <__addsf3x+0x9c>
 b02:	91 50       	subi	r25, 0x01	; 1
 b04:	a1 f0       	breq	.+40     	; 0xb2e <__addsf3x+0x9a>
 b06:	ff 0f       	add	r31, r31
 b08:	bb 1f       	adc	r27, r27
 b0a:	66 1f       	adc	r22, r22
 b0c:	77 1f       	adc	r23, r23
 b0e:	88 1f       	adc	r24, r24
 b10:	c2 f7       	brpl	.-16     	; 0xb02 <__addsf3x+0x6e>
 b12:	0e c0       	rjmp	.+28     	; 0xb30 <__addsf3x+0x9c>
 b14:	ba 0f       	add	r27, r26
 b16:	62 1f       	adc	r22, r18
 b18:	73 1f       	adc	r23, r19
 b1a:	84 1f       	adc	r24, r20
 b1c:	48 f4       	brcc	.+18     	; 0xb30 <__addsf3x+0x9c>
 b1e:	87 95       	ror	r24
 b20:	77 95       	ror	r23
 b22:	67 95       	ror	r22
 b24:	b7 95       	ror	r27
 b26:	f7 95       	ror	r31
 b28:	9e 3f       	cpi	r25, 0xFE	; 254
 b2a:	08 f0       	brcs	.+2      	; 0xb2e <__addsf3x+0x9a>
 b2c:	b0 cf       	rjmp	.-160    	; 0xa8e <__addsf3+0x28>
 b2e:	93 95       	inc	r25
 b30:	88 0f       	add	r24, r24
 b32:	08 f0       	brcs	.+2      	; 0xb36 <__addsf3x+0xa2>
 b34:	99 27       	eor	r25, r25
 b36:	ee 0f       	add	r30, r30
 b38:	97 95       	ror	r25
 b3a:	87 95       	ror	r24
 b3c:	08 95       	ret

00000b3e <__cmpsf2>:
 b3e:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_cmp>
 b42:	08 f4       	brcc	.+2      	; 0xb46 <__cmpsf2+0x8>
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	08 95       	ret

00000b48 <__divsf3>:
 b48:	0e 94 b8 05 	call	0xb70	; 0xb70 <__divsf3x>
 b4c:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__fp_round>
 b50:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscB>
 b54:	58 f0       	brcs	.+22     	; 0xb6c <__divsf3+0x24>
 b56:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscA>
 b5a:	40 f0       	brcs	.+16     	; 0xb6c <__divsf3+0x24>
 b5c:	29 f4       	brne	.+10     	; 0xb68 <__divsf3+0x20>
 b5e:	5f 3f       	cpi	r21, 0xFF	; 255
 b60:	29 f0       	breq	.+10     	; 0xb6c <__divsf3+0x24>
 b62:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_inf>
 b66:	51 11       	cpse	r21, r1
 b68:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_szero>
 b6c:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_nan>

00000b70 <__divsf3x>:
 b70:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_split3>
 b74:	68 f3       	brcs	.-38     	; 0xb50 <__divsf3+0x8>

00000b76 <__divsf3_pse>:
 b76:	99 23       	and	r25, r25
 b78:	b1 f3       	breq	.-20     	; 0xb66 <__divsf3+0x1e>
 b7a:	55 23       	and	r21, r21
 b7c:	91 f3       	breq	.-28     	; 0xb62 <__divsf3+0x1a>
 b7e:	95 1b       	sub	r25, r21
 b80:	55 0b       	sbc	r21, r21
 b82:	bb 27       	eor	r27, r27
 b84:	aa 27       	eor	r26, r26
 b86:	62 17       	cp	r22, r18
 b88:	73 07       	cpc	r23, r19
 b8a:	84 07       	cpc	r24, r20
 b8c:	38 f0       	brcs	.+14     	; 0xb9c <__divsf3_pse+0x26>
 b8e:	9f 5f       	subi	r25, 0xFF	; 255
 b90:	5f 4f       	sbci	r21, 0xFF	; 255
 b92:	22 0f       	add	r18, r18
 b94:	33 1f       	adc	r19, r19
 b96:	44 1f       	adc	r20, r20
 b98:	aa 1f       	adc	r26, r26
 b9a:	a9 f3       	breq	.-22     	; 0xb86 <__divsf3_pse+0x10>
 b9c:	35 d0       	rcall	.+106    	; 0xc08 <__divsf3_pse+0x92>
 b9e:	0e 2e       	mov	r0, r30
 ba0:	3a f0       	brmi	.+14     	; 0xbb0 <__divsf3_pse+0x3a>
 ba2:	e0 e8       	ldi	r30, 0x80	; 128
 ba4:	32 d0       	rcall	.+100    	; 0xc0a <__divsf3_pse+0x94>
 ba6:	91 50       	subi	r25, 0x01	; 1
 ba8:	50 40       	sbci	r21, 0x00	; 0
 baa:	e6 95       	lsr	r30
 bac:	00 1c       	adc	r0, r0
 bae:	ca f7       	brpl	.-14     	; 0xba2 <__divsf3_pse+0x2c>
 bb0:	2b d0       	rcall	.+86     	; 0xc08 <__divsf3_pse+0x92>
 bb2:	fe 2f       	mov	r31, r30
 bb4:	29 d0       	rcall	.+82     	; 0xc08 <__divsf3_pse+0x92>
 bb6:	66 0f       	add	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	bb 1f       	adc	r27, r27
 bbe:	26 17       	cp	r18, r22
 bc0:	37 07       	cpc	r19, r23
 bc2:	48 07       	cpc	r20, r24
 bc4:	ab 07       	cpc	r26, r27
 bc6:	b0 e8       	ldi	r27, 0x80	; 128
 bc8:	09 f0       	breq	.+2      	; 0xbcc <__divsf3_pse+0x56>
 bca:	bb 0b       	sbc	r27, r27
 bcc:	80 2d       	mov	r24, r0
 bce:	bf 01       	movw	r22, r30
 bd0:	ff 27       	eor	r31, r31
 bd2:	93 58       	subi	r25, 0x83	; 131
 bd4:	5f 4f       	sbci	r21, 0xFF	; 255
 bd6:	3a f0       	brmi	.+14     	; 0xbe6 <__divsf3_pse+0x70>
 bd8:	9e 3f       	cpi	r25, 0xFE	; 254
 bda:	51 05       	cpc	r21, r1
 bdc:	78 f0       	brcs	.+30     	; 0xbfc <__divsf3_pse+0x86>
 bde:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_inf>
 be2:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_szero>
 be6:	5f 3f       	cpi	r21, 0xFF	; 255
 be8:	e4 f3       	brlt	.-8      	; 0xbe2 <__divsf3_pse+0x6c>
 bea:	98 3e       	cpi	r25, 0xE8	; 232
 bec:	d4 f3       	brlt	.-12     	; 0xbe2 <__divsf3_pse+0x6c>
 bee:	86 95       	lsr	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	b7 95       	ror	r27
 bf6:	f7 95       	ror	r31
 bf8:	9f 5f       	subi	r25, 0xFF	; 255
 bfa:	c9 f7       	brne	.-14     	; 0xbee <__divsf3_pse+0x78>
 bfc:	88 0f       	add	r24, r24
 bfe:	91 1d       	adc	r25, r1
 c00:	96 95       	lsr	r25
 c02:	87 95       	ror	r24
 c04:	97 f9       	bld	r25, 7
 c06:	08 95       	ret
 c08:	e1 e0       	ldi	r30, 0x01	; 1
 c0a:	66 0f       	add	r22, r22
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 1f       	adc	r24, r24
 c10:	bb 1f       	adc	r27, r27
 c12:	62 17       	cp	r22, r18
 c14:	73 07       	cpc	r23, r19
 c16:	84 07       	cpc	r24, r20
 c18:	ba 07       	cpc	r27, r26
 c1a:	20 f0       	brcs	.+8      	; 0xc24 <__divsf3_pse+0xae>
 c1c:	62 1b       	sub	r22, r18
 c1e:	73 0b       	sbc	r23, r19
 c20:	84 0b       	sbc	r24, r20
 c22:	ba 0b       	sbc	r27, r26
 c24:	ee 1f       	adc	r30, r30
 c26:	88 f7       	brcc	.-30     	; 0xc0a <__divsf3_pse+0x94>
 c28:	e0 95       	com	r30
 c2a:	08 95       	ret

00000c2c <__fixunssfsi>:
 c2c:	0e 94 99 06 	call	0xd32	; 0xd32 <__fp_splitA>
 c30:	88 f0       	brcs	.+34     	; 0xc54 <__fixunssfsi+0x28>
 c32:	9f 57       	subi	r25, 0x7F	; 127
 c34:	98 f0       	brcs	.+38     	; 0xc5c <__fixunssfsi+0x30>
 c36:	b9 2f       	mov	r27, r25
 c38:	99 27       	eor	r25, r25
 c3a:	b7 51       	subi	r27, 0x17	; 23
 c3c:	b0 f0       	brcs	.+44     	; 0xc6a <__fixunssfsi+0x3e>
 c3e:	e1 f0       	breq	.+56     	; 0xc78 <__fixunssfsi+0x4c>
 c40:	66 0f       	add	r22, r22
 c42:	77 1f       	adc	r23, r23
 c44:	88 1f       	adc	r24, r24
 c46:	99 1f       	adc	r25, r25
 c48:	1a f0       	brmi	.+6      	; 0xc50 <__fixunssfsi+0x24>
 c4a:	ba 95       	dec	r27
 c4c:	c9 f7       	brne	.-14     	; 0xc40 <__fixunssfsi+0x14>
 c4e:	14 c0       	rjmp	.+40     	; 0xc78 <__fixunssfsi+0x4c>
 c50:	b1 30       	cpi	r27, 0x01	; 1
 c52:	91 f0       	breq	.+36     	; 0xc78 <__fixunssfsi+0x4c>
 c54:	0e 94 b3 06 	call	0xd66	; 0xd66 <__fp_zero>
 c58:	b1 e0       	ldi	r27, 0x01	; 1
 c5a:	08 95       	ret
 c5c:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <__fp_zero>
 c60:	67 2f       	mov	r22, r23
 c62:	78 2f       	mov	r23, r24
 c64:	88 27       	eor	r24, r24
 c66:	b8 5f       	subi	r27, 0xF8	; 248
 c68:	39 f0       	breq	.+14     	; 0xc78 <__fixunssfsi+0x4c>
 c6a:	b9 3f       	cpi	r27, 0xF9	; 249
 c6c:	cc f3       	brlt	.-14     	; 0xc60 <__fixunssfsi+0x34>
 c6e:	86 95       	lsr	r24
 c70:	77 95       	ror	r23
 c72:	67 95       	ror	r22
 c74:	b3 95       	inc	r27
 c76:	d9 f7       	brne	.-10     	; 0xc6e <__fixunssfsi+0x42>
 c78:	3e f4       	brtc	.+14     	; 0xc88 <__fixunssfsi+0x5c>
 c7a:	90 95       	com	r25
 c7c:	80 95       	com	r24
 c7e:	70 95       	com	r23
 c80:	61 95       	neg	r22
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	08 95       	ret

00000c8a <__fp_cmp>:
 c8a:	99 0f       	add	r25, r25
 c8c:	00 08       	sbc	r0, r0
 c8e:	55 0f       	add	r21, r21
 c90:	aa 0b       	sbc	r26, r26
 c92:	e0 e8       	ldi	r30, 0x80	; 128
 c94:	fe ef       	ldi	r31, 0xFE	; 254
 c96:	16 16       	cp	r1, r22
 c98:	17 06       	cpc	r1, r23
 c9a:	e8 07       	cpc	r30, r24
 c9c:	f9 07       	cpc	r31, r25
 c9e:	c0 f0       	brcs	.+48     	; 0xcd0 <__fp_cmp+0x46>
 ca0:	12 16       	cp	r1, r18
 ca2:	13 06       	cpc	r1, r19
 ca4:	e4 07       	cpc	r30, r20
 ca6:	f5 07       	cpc	r31, r21
 ca8:	98 f0       	brcs	.+38     	; 0xcd0 <__fp_cmp+0x46>
 caa:	62 1b       	sub	r22, r18
 cac:	73 0b       	sbc	r23, r19
 cae:	84 0b       	sbc	r24, r20
 cb0:	95 0b       	sbc	r25, r21
 cb2:	39 f4       	brne	.+14     	; 0xcc2 <__fp_cmp+0x38>
 cb4:	0a 26       	eor	r0, r26
 cb6:	61 f0       	breq	.+24     	; 0xcd0 <__fp_cmp+0x46>
 cb8:	23 2b       	or	r18, r19
 cba:	24 2b       	or	r18, r20
 cbc:	25 2b       	or	r18, r21
 cbe:	21 f4       	brne	.+8      	; 0xcc8 <__fp_cmp+0x3e>
 cc0:	08 95       	ret
 cc2:	0a 26       	eor	r0, r26
 cc4:	09 f4       	brne	.+2      	; 0xcc8 <__fp_cmp+0x3e>
 cc6:	a1 40       	sbci	r26, 0x01	; 1
 cc8:	a6 95       	lsr	r26
 cca:	8f ef       	ldi	r24, 0xFF	; 255
 ccc:	81 1d       	adc	r24, r1
 cce:	81 1d       	adc	r24, r1
 cd0:	08 95       	ret

00000cd2 <__fp_inf>:
 cd2:	97 f9       	bld	r25, 7
 cd4:	9f 67       	ori	r25, 0x7F	; 127
 cd6:	80 e8       	ldi	r24, 0x80	; 128
 cd8:	70 e0       	ldi	r23, 0x00	; 0
 cda:	60 e0       	ldi	r22, 0x00	; 0
 cdc:	08 95       	ret

00000cde <__fp_nan>:
 cde:	9f ef       	ldi	r25, 0xFF	; 255
 ce0:	80 ec       	ldi	r24, 0xC0	; 192
 ce2:	08 95       	ret

00000ce4 <__fp_pscA>:
 ce4:	00 24       	eor	r0, r0
 ce6:	0a 94       	dec	r0
 ce8:	16 16       	cp	r1, r22
 cea:	17 06       	cpc	r1, r23
 cec:	18 06       	cpc	r1, r24
 cee:	09 06       	cpc	r0, r25
 cf0:	08 95       	ret

00000cf2 <__fp_pscB>:
 cf2:	00 24       	eor	r0, r0
 cf4:	0a 94       	dec	r0
 cf6:	12 16       	cp	r1, r18
 cf8:	13 06       	cpc	r1, r19
 cfa:	14 06       	cpc	r1, r20
 cfc:	05 06       	cpc	r0, r21
 cfe:	08 95       	ret

00000d00 <__fp_round>:
 d00:	09 2e       	mov	r0, r25
 d02:	03 94       	inc	r0
 d04:	00 0c       	add	r0, r0
 d06:	11 f4       	brne	.+4      	; 0xd0c <__fp_round+0xc>
 d08:	88 23       	and	r24, r24
 d0a:	52 f0       	brmi	.+20     	; 0xd20 <__fp_round+0x20>
 d0c:	bb 0f       	add	r27, r27
 d0e:	40 f4       	brcc	.+16     	; 0xd20 <__fp_round+0x20>
 d10:	bf 2b       	or	r27, r31
 d12:	11 f4       	brne	.+4      	; 0xd18 <__fp_round+0x18>
 d14:	60 ff       	sbrs	r22, 0
 d16:	04 c0       	rjmp	.+8      	; 0xd20 <__fp_round+0x20>
 d18:	6f 5f       	subi	r22, 0xFF	; 255
 d1a:	7f 4f       	sbci	r23, 0xFF	; 255
 d1c:	8f 4f       	sbci	r24, 0xFF	; 255
 d1e:	9f 4f       	sbci	r25, 0xFF	; 255
 d20:	08 95       	ret

00000d22 <__fp_split3>:
 d22:	57 fd       	sbrc	r21, 7
 d24:	90 58       	subi	r25, 0x80	; 128
 d26:	44 0f       	add	r20, r20
 d28:	55 1f       	adc	r21, r21
 d2a:	59 f0       	breq	.+22     	; 0xd42 <__fp_splitA+0x10>
 d2c:	5f 3f       	cpi	r21, 0xFF	; 255
 d2e:	71 f0       	breq	.+28     	; 0xd4c <__fp_splitA+0x1a>
 d30:	47 95       	ror	r20

00000d32 <__fp_splitA>:
 d32:	88 0f       	add	r24, r24
 d34:	97 fb       	bst	r25, 7
 d36:	99 1f       	adc	r25, r25
 d38:	61 f0       	breq	.+24     	; 0xd52 <__fp_splitA+0x20>
 d3a:	9f 3f       	cpi	r25, 0xFF	; 255
 d3c:	79 f0       	breq	.+30     	; 0xd5c <__fp_splitA+0x2a>
 d3e:	87 95       	ror	r24
 d40:	08 95       	ret
 d42:	12 16       	cp	r1, r18
 d44:	13 06       	cpc	r1, r19
 d46:	14 06       	cpc	r1, r20
 d48:	55 1f       	adc	r21, r21
 d4a:	f2 cf       	rjmp	.-28     	; 0xd30 <__fp_split3+0xe>
 d4c:	46 95       	lsr	r20
 d4e:	f1 df       	rcall	.-30     	; 0xd32 <__fp_splitA>
 d50:	08 c0       	rjmp	.+16     	; 0xd62 <__fp_splitA+0x30>
 d52:	16 16       	cp	r1, r22
 d54:	17 06       	cpc	r1, r23
 d56:	18 06       	cpc	r1, r24
 d58:	99 1f       	adc	r25, r25
 d5a:	f1 cf       	rjmp	.-30     	; 0xd3e <__fp_splitA+0xc>
 d5c:	86 95       	lsr	r24
 d5e:	71 05       	cpc	r23, r1
 d60:	61 05       	cpc	r22, r1
 d62:	08 94       	sec
 d64:	08 95       	ret

00000d66 <__fp_zero>:
 d66:	e8 94       	clt

00000d68 <__fp_szero>:
 d68:	bb 27       	eor	r27, r27
 d6a:	66 27       	eor	r22, r22
 d6c:	77 27       	eor	r23, r23
 d6e:	cb 01       	movw	r24, r22
 d70:	97 f9       	bld	r25, 7
 d72:	08 95       	ret

00000d74 <__gesf2>:
 d74:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fp_cmp>
 d78:	08 f4       	brcc	.+2      	; 0xd7c <__gesf2+0x8>
 d7a:	8f ef       	ldi	r24, 0xFF	; 255
 d7c:	08 95       	ret

00000d7e <__mulsf3>:
 d7e:	0e 94 d2 06 	call	0xda4	; 0xda4 <__mulsf3x>
 d82:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__fp_round>
 d86:	0e 94 72 06 	call	0xce4	; 0xce4 <__fp_pscA>
 d8a:	38 f0       	brcs	.+14     	; 0xd9a <__mulsf3+0x1c>
 d8c:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__fp_pscB>
 d90:	20 f0       	brcs	.+8      	; 0xd9a <__mulsf3+0x1c>
 d92:	95 23       	and	r25, r21
 d94:	11 f0       	breq	.+4      	; 0xd9a <__mulsf3+0x1c>
 d96:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_inf>
 d9a:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__fp_nan>
 d9e:	11 24       	eor	r1, r1
 da0:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_szero>

00000da4 <__mulsf3x>:
 da4:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_split3>
 da8:	70 f3       	brcs	.-36     	; 0xd86 <__mulsf3+0x8>

00000daa <__mulsf3_pse>:
 daa:	95 9f       	mul	r25, r21
 dac:	c1 f3       	breq	.-16     	; 0xd9e <__mulsf3+0x20>
 dae:	95 0f       	add	r25, r21
 db0:	50 e0       	ldi	r21, 0x00	; 0
 db2:	55 1f       	adc	r21, r21
 db4:	62 9f       	mul	r22, r18
 db6:	f0 01       	movw	r30, r0
 db8:	72 9f       	mul	r23, r18
 dba:	bb 27       	eor	r27, r27
 dbc:	f0 0d       	add	r31, r0
 dbe:	b1 1d       	adc	r27, r1
 dc0:	63 9f       	mul	r22, r19
 dc2:	aa 27       	eor	r26, r26
 dc4:	f0 0d       	add	r31, r0
 dc6:	b1 1d       	adc	r27, r1
 dc8:	aa 1f       	adc	r26, r26
 dca:	64 9f       	mul	r22, r20
 dcc:	66 27       	eor	r22, r22
 dce:	b0 0d       	add	r27, r0
 dd0:	a1 1d       	adc	r26, r1
 dd2:	66 1f       	adc	r22, r22
 dd4:	82 9f       	mul	r24, r18
 dd6:	22 27       	eor	r18, r18
 dd8:	b0 0d       	add	r27, r0
 dda:	a1 1d       	adc	r26, r1
 ddc:	62 1f       	adc	r22, r18
 dde:	73 9f       	mul	r23, r19
 de0:	b0 0d       	add	r27, r0
 de2:	a1 1d       	adc	r26, r1
 de4:	62 1f       	adc	r22, r18
 de6:	83 9f       	mul	r24, r19
 de8:	a0 0d       	add	r26, r0
 dea:	61 1d       	adc	r22, r1
 dec:	22 1f       	adc	r18, r18
 dee:	74 9f       	mul	r23, r20
 df0:	33 27       	eor	r19, r19
 df2:	a0 0d       	add	r26, r0
 df4:	61 1d       	adc	r22, r1
 df6:	23 1f       	adc	r18, r19
 df8:	84 9f       	mul	r24, r20
 dfa:	60 0d       	add	r22, r0
 dfc:	21 1d       	adc	r18, r1
 dfe:	82 2f       	mov	r24, r18
 e00:	76 2f       	mov	r23, r22
 e02:	6a 2f       	mov	r22, r26
 e04:	11 24       	eor	r1, r1
 e06:	9f 57       	subi	r25, 0x7F	; 127
 e08:	50 40       	sbci	r21, 0x00	; 0
 e0a:	9a f0       	brmi	.+38     	; 0xe32 <__mulsf3_pse+0x88>
 e0c:	f1 f0       	breq	.+60     	; 0xe4a <__mulsf3_pse+0xa0>
 e0e:	88 23       	and	r24, r24
 e10:	4a f0       	brmi	.+18     	; 0xe24 <__mulsf3_pse+0x7a>
 e12:	ee 0f       	add	r30, r30
 e14:	ff 1f       	adc	r31, r31
 e16:	bb 1f       	adc	r27, r27
 e18:	66 1f       	adc	r22, r22
 e1a:	77 1f       	adc	r23, r23
 e1c:	88 1f       	adc	r24, r24
 e1e:	91 50       	subi	r25, 0x01	; 1
 e20:	50 40       	sbci	r21, 0x00	; 0
 e22:	a9 f7       	brne	.-22     	; 0xe0e <__mulsf3_pse+0x64>
 e24:	9e 3f       	cpi	r25, 0xFE	; 254
 e26:	51 05       	cpc	r21, r1
 e28:	80 f0       	brcs	.+32     	; 0xe4a <__mulsf3_pse+0xa0>
 e2a:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__fp_inf>
 e2e:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__fp_szero>
 e32:	5f 3f       	cpi	r21, 0xFF	; 255
 e34:	e4 f3       	brlt	.-8      	; 0xe2e <__mulsf3_pse+0x84>
 e36:	98 3e       	cpi	r25, 0xE8	; 232
 e38:	d4 f3       	brlt	.-12     	; 0xe2e <__mulsf3_pse+0x84>
 e3a:	86 95       	lsr	r24
 e3c:	77 95       	ror	r23
 e3e:	67 95       	ror	r22
 e40:	b7 95       	ror	r27
 e42:	f7 95       	ror	r31
 e44:	e7 95       	ror	r30
 e46:	9f 5f       	subi	r25, 0xFF	; 255
 e48:	c1 f7       	brne	.-16     	; 0xe3a <__mulsf3_pse+0x90>
 e4a:	fe 2b       	or	r31, r30
 e4c:	88 0f       	add	r24, r24
 e4e:	91 1d       	adc	r25, r1
 e50:	96 95       	lsr	r25
 e52:	87 95       	ror	r24
 e54:	97 f9       	bld	r25, 7
 e56:	08 95       	ret

00000e58 <_exit>:
 e58:	f8 94       	cli

00000e5a <__stop_program>:
 e5a:	ff cf       	rjmp	.-2      	; 0xe5a <__stop_program>
