
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000011f4  00001288  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00001288  2**0
                  ALLOC
  3 .stab         00002118  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ae  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000444e  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004460  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  000044a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000532  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000004cb  00000000  00000000  00004a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000103  00000000  00000000  00004edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f4  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_1>
       8:	0c 94 6d 04 	jmp	0x8da	; 0x8da <__vector_2>
       c:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	20 e0       	ldi	r18, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 36       	cpi	r26, 0x66	; 102
      6c:	b2 07       	cpc	r27, r18
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 42 05 	call	0xa84	; 0xa84 <main>
      74:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
      7c:	cf 93       	push	r28
      7e:	df 93       	push	r29
      80:	00 d0       	rcall	.+0      	; 0x82 <DIO_u8SetPinValue+0x6>
      82:	00 d0       	rcall	.+0      	; 0x84 <DIO_u8SetPinValue+0x8>
      84:	cd b7       	in	r28, 0x3d	; 61
      86:	de b7       	in	r29, 0x3e	; 62
      88:	8a 83       	std	Y+2, r24	; 0x02
      8a:	6b 83       	std	Y+3, r22	; 0x03
      8c:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
      8e:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
      90:	8b 81       	ldd	r24, Y+3	; 0x03
      92:	88 30       	cpi	r24, 0x08	; 8
      94:	08 f0       	brcs	.+2      	; 0x98 <DIO_u8SetPinValue+0x1c>
      96:	f1 c0       	rjmp	.+482    	; 0x27a <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
      98:	8c 81       	ldd	r24, Y+4	; 0x04
      9a:	81 30       	cpi	r24, 0x01	; 1
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
      9e:	71 c0       	rjmp	.+226    	; 0x182 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
      a0:	8a 81       	ldd	r24, Y+2	; 0x02
      a2:	88 2f       	mov	r24, r24
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	84 30       	cpi	r24, 0x04	; 4
      a8:	91 05       	cpc	r25, r1
      aa:	09 f4       	brne	.+2      	; 0xae <DIO_u8SetPinValue+0x32>
      ac:	52 c0       	rjmp	.+164    	; 0x152 <DIO_u8SetPinValue+0xd6>
      ae:	85 30       	cpi	r24, 0x05	; 5
      b0:	91 05       	cpc	r25, r1
      b2:	0c f0       	brlt	.+2      	; 0xb6 <DIO_u8SetPinValue+0x3a>
      b4:	64 c0       	rjmp	.+200    	; 0x17e <DIO_u8SetPinValue+0x102>
      b6:	83 30       	cpi	r24, 0x03	; 3
      b8:	91 05       	cpc	r25, r1
      ba:	a9 f1       	breq	.+106    	; 0x126 <DIO_u8SetPinValue+0xaa>
      bc:	84 30       	cpi	r24, 0x04	; 4
      be:	91 05       	cpc	r25, r1
      c0:	0c f0       	brlt	.+2      	; 0xc4 <DIO_u8SetPinValue+0x48>
      c2:	5d c0       	rjmp	.+186    	; 0x17e <DIO_u8SetPinValue+0x102>
      c4:	00 97       	sbiw	r24, 0x00	; 0
      c6:	19 f0       	breq	.+6      	; 0xce <DIO_u8SetPinValue+0x52>
      c8:	01 97       	sbiw	r24, 0x01	; 1
      ca:	b9 f0       	breq	.+46     	; 0xfa <DIO_u8SetPinValue+0x7e>
      cc:	58 c0       	rjmp	.+176    	; 0x17e <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
      ce:	8b e3       	ldi	r24, 0x3B	; 59
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	fc 01       	movw	r30, r24
      d4:	80 81       	ld	r24, Z
      d6:	48 2f       	mov	r20, r24
      d8:	8b 81       	ldd	r24, Y+3	; 0x03
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_u8SetPinValue+0x6c>
      e4:	88 0f       	add	r24, r24
      e6:	99 1f       	adc	r25, r25
      e8:	2a 95       	dec	r18
      ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_u8SetPinValue+0x68>
      ec:	24 2f       	mov	r18, r20
      ee:	28 2b       	or	r18, r24
      f0:	8b e3       	ldi	r24, 0x3B	; 59
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	fc 01       	movw	r30, r24
      f6:	20 83       	st	Z, r18
      f8:	c2 c0       	rjmp	.+388    	; 0x27e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
      fa:	88 e3       	ldi	r24, 0x38	; 56
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	fc 01       	movw	r30, r24
     100:	80 81       	ld	r24, Z
     102:	48 2f       	mov	r20, r24
     104:	8b 81       	ldd	r24, Y+3	; 0x03
     106:	28 2f       	mov	r18, r24
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_u8SetPinValue+0x98>
     110:	88 0f       	add	r24, r24
     112:	99 1f       	adc	r25, r25
     114:	2a 95       	dec	r18
     116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_u8SetPinValue+0x94>
     118:	24 2f       	mov	r18, r20
     11a:	28 2b       	or	r18, r24
     11c:	88 e3       	ldi	r24, 0x38	; 56
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	fc 01       	movw	r30, r24
     122:	20 83       	st	Z, r18
     124:	ac c0       	rjmp	.+344    	; 0x27e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
     126:	85 e3       	ldi	r24, 0x35	; 53
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	fc 01       	movw	r30, r24
     12c:	80 81       	ld	r24, Z
     12e:	48 2f       	mov	r20, r24
     130:	8b 81       	ldd	r24, Y+3	; 0x03
     132:	28 2f       	mov	r18, r24
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_u8SetPinValue+0xc4>
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	2a 95       	dec	r18
     142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_u8SetPinValue+0xc0>
     144:	24 2f       	mov	r18, r20
     146:	28 2b       	or	r18, r24
     148:	85 e3       	ldi	r24, 0x35	; 53
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	fc 01       	movw	r30, r24
     14e:	20 83       	st	Z, r18
     150:	96 c0       	rjmp	.+300    	; 0x27e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
     152:	82 e3       	ldi	r24, 0x32	; 50
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	80 81       	ld	r24, Z
     15a:	48 2f       	mov	r20, r24
     15c:	8b 81       	ldd	r24, Y+3	; 0x03
     15e:	28 2f       	mov	r18, r24
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_u8SetPinValue+0xf0>
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	2a 95       	dec	r18
     16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_u8SetPinValue+0xec>
     170:	24 2f       	mov	r18, r20
     172:	28 2b       	or	r18, r24
     174:	82 e3       	ldi	r24, 0x32	; 50
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18
     17c:	80 c0       	rjmp	.+256    	; 0x27e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
     17e:	19 82       	std	Y+1, r1	; 0x01
     180:	7e c0       	rjmp	.+252    	; 0x27e <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
     182:	8c 81       	ldd	r24, Y+4	; 0x04
     184:	88 23       	and	r24, r24
     186:	09 f0       	breq	.+2      	; 0x18a <DIO_u8SetPinValue+0x10e>
     188:	75 c0       	rjmp	.+234    	; 0x274 <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	88 2f       	mov	r24, r24
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	84 30       	cpi	r24, 0x04	; 4
     192:	91 05       	cpc	r25, r1
     194:	09 f4       	brne	.+2      	; 0x198 <DIO_u8SetPinValue+0x11c>
     196:	55 c0       	rjmp	.+170    	; 0x242 <DIO_u8SetPinValue+0x1c6>
     198:	85 30       	cpi	r24, 0x05	; 5
     19a:	91 05       	cpc	r25, r1
     19c:	0c f0       	brlt	.+2      	; 0x1a0 <DIO_u8SetPinValue+0x124>
     19e:	68 c0       	rjmp	.+208    	; 0x270 <DIO_u8SetPinValue+0x1f4>
     1a0:	83 30       	cpi	r24, 0x03	; 3
     1a2:	91 05       	cpc	r25, r1
     1a4:	b9 f1       	breq	.+110    	; 0x214 <DIO_u8SetPinValue+0x198>
     1a6:	84 30       	cpi	r24, 0x04	; 4
     1a8:	91 05       	cpc	r25, r1
     1aa:	0c f0       	brlt	.+2      	; 0x1ae <DIO_u8SetPinValue+0x132>
     1ac:	61 c0       	rjmp	.+194    	; 0x270 <DIO_u8SetPinValue+0x1f4>
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <DIO_u8SetPinValue+0x13c>
     1b2:	01 97       	sbiw	r24, 0x01	; 1
     1b4:	c1 f0       	breq	.+48     	; 0x1e6 <DIO_u8SetPinValue+0x16a>
     1b6:	5c c0       	rjmp	.+184    	; 0x270 <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
     1b8:	8b e3       	ldi	r24, 0x3B	; 59
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	80 81       	ld	r24, Z
     1c0:	48 2f       	mov	r20, r24
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_u8SetPinValue+0x156>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	2a 95       	dec	r18
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_u8SetPinValue+0x152>
     1d6:	80 95       	com	r24
     1d8:	24 2f       	mov	r18, r20
     1da:	28 23       	and	r18, r24
     1dc:	8b e3       	ldi	r24, 0x3B	; 59
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	fc 01       	movw	r30, r24
     1e2:	20 83       	st	Z, r18
     1e4:	4c c0       	rjmp	.+152    	; 0x27e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
     1e6:	88 e3       	ldi	r24, 0x38	; 56
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	fc 01       	movw	r30, r24
     1ec:	80 81       	ld	r24, Z
     1ee:	48 2f       	mov	r20, r24
     1f0:	8b 81       	ldd	r24, Y+3	; 0x03
     1f2:	28 2f       	mov	r18, r24
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_u8SetPinValue+0x184>
     1fc:	88 0f       	add	r24, r24
     1fe:	99 1f       	adc	r25, r25
     200:	2a 95       	dec	r18
     202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_u8SetPinValue+0x180>
     204:	80 95       	com	r24
     206:	24 2f       	mov	r18, r20
     208:	28 23       	and	r18, r24
     20a:	88 e3       	ldi	r24, 0x38	; 56
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	fc 01       	movw	r30, r24
     210:	20 83       	st	Z, r18
     212:	35 c0       	rjmp	.+106    	; 0x27e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
     214:	85 e3       	ldi	r24, 0x35	; 53
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	80 81       	ld	r24, Z
     21c:	48 2f       	mov	r20, r24
     21e:	8b 81       	ldd	r24, Y+3	; 0x03
     220:	28 2f       	mov	r18, r24
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_u8SetPinValue+0x1b2>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	2a 95       	dec	r18
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_u8SetPinValue+0x1ae>
     232:	80 95       	com	r24
     234:	24 2f       	mov	r18, r20
     236:	28 23       	and	r18, r24
     238:	85 e3       	ldi	r24, 0x35	; 53
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
     240:	1e c0       	rjmp	.+60     	; 0x27e <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
     242:	82 e3       	ldi	r24, 0x32	; 50
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	fc 01       	movw	r30, r24
     248:	80 81       	ld	r24, Z
     24a:	48 2f       	mov	r20, r24
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	28 2f       	mov	r18, r24
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_u8SetPinValue+0x1e0>
     258:	88 0f       	add	r24, r24
     25a:	99 1f       	adc	r25, r25
     25c:	2a 95       	dec	r18
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_u8SetPinValue+0x1dc>
     260:	80 95       	com	r24
     262:	24 2f       	mov	r18, r20
     264:	28 23       	and	r18, r24
     266:	82 e3       	ldi	r24, 0x32	; 50
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	fc 01       	movw	r30, r24
     26c:	20 83       	st	Z, r18
     26e:	07 c0       	rjmp	.+14     	; 0x27e <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
     270:	19 82       	std	Y+1, r1	; 0x01
     272:	05 c0       	rjmp	.+10     	; 0x27e <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	89 83       	std	Y+1, r24	; 0x01
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
     27e:	89 81       	ldd	r24, Y+1	; 0x01

}
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	08 95       	ret

0000028e <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	00 d0       	rcall	.+0      	; 0x294 <DIO_u8SetPortValue+0x6>
     294:	0f 92       	push	r0
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	8a 83       	std	Y+2, r24	; 0x02
     29c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     29e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	88 2f       	mov	r24, r24
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	84 30       	cpi	r24, 0x04	; 4
     2a8:	91 05       	cpc	r25, r1
     2aa:	01 f1       	breq	.+64     	; 0x2ec <DIO_u8SetPortValue+0x5e>
     2ac:	85 30       	cpi	r24, 0x05	; 5
     2ae:	91 05       	cpc	r25, r1
     2b0:	1c f5       	brge	.+70     	; 0x2f8 <DIO_u8SetPortValue+0x6a>
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	91 05       	cpc	r25, r1
     2b6:	a1 f0       	breq	.+40     	; 0x2e0 <DIO_u8SetPortValue+0x52>
     2b8:	84 30       	cpi	r24, 0x04	; 4
     2ba:	91 05       	cpc	r25, r1
     2bc:	ec f4       	brge	.+58     	; 0x2f8 <DIO_u8SetPortValue+0x6a>
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <DIO_u8SetPortValue+0x3a>
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	39 f0       	breq	.+14     	; 0x2d4 <DIO_u8SetPortValue+0x46>
     2c6:	18 c0       	rjmp	.+48     	; 0x2f8 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
     2c8:	8b e3       	ldi	r24, 0x3B	; 59
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	2b 81       	ldd	r18, Y+3	; 0x03
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
     2d2:	15 c0       	rjmp	.+42     	; 0x2fe <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
     2d4:	88 e3       	ldi	r24, 0x38	; 56
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	2b 81       	ldd	r18, Y+3	; 0x03
     2da:	fc 01       	movw	r30, r24
     2dc:	20 83       	st	Z, r18
     2de:	0f c0       	rjmp	.+30     	; 0x2fe <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
     2e0:	85 e3       	ldi	r24, 0x35	; 53
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2b 81       	ldd	r18, Y+3	; 0x03
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
     2ea:	09 c0       	rjmp	.+18     	; 0x2fe <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
     2ec:	82 e3       	ldi	r24, 0x32	; 50
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2b 81       	ldd	r18, Y+3	; 0x03
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	89 83       	std	Y+1, r24	; 0x01
     2fc:	00 00       	nop
				}


	return Local_u8ErrorState;
     2fe:	89 81       	ldd	r24, Y+1	; 0x01

}
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	00 d0       	rcall	.+0      	; 0x312 <DIO_u8GetPinValue+0x6>
     312:	00 d0       	rcall	.+0      	; 0x314 <DIO_u8GetPinValue+0x8>
     314:	0f 92       	push	r0
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	8a 83       	std	Y+2, r24	; 0x02
     31c:	6b 83       	std	Y+3, r22	; 0x03
     31e:	5d 83       	std	Y+5, r21	; 0x05
     320:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
     322:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
     324:	8c 81       	ldd	r24, Y+4	; 0x04
     326:	9d 81       	ldd	r25, Y+5	; 0x05
     328:	89 2b       	or	r24, r25
     32a:	09 f4       	brne	.+2      	; 0x32e <DIO_u8GetPinValue+0x22>
     32c:	73 c0       	rjmp	.+230    	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	88 30       	cpi	r24, 0x08	; 8
     332:	08 f0       	brcs	.+2      	; 0x336 <DIO_u8GetPinValue+0x2a>
     334:	6f c0       	rjmp	.+222    	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
				{
					switch(Copy_u8Port)
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	91 05       	cpc	r25, r1
     340:	09 f4       	brne	.+2      	; 0x344 <DIO_u8GetPinValue+0x38>
     342:	4f c0       	rjmp	.+158    	; 0x3e2 <DIO_u8GetPinValue+0xd6>
     344:	85 30       	cpi	r24, 0x05	; 5
     346:	91 05       	cpc	r25, r1
     348:	0c f0       	brlt	.+2      	; 0x34c <DIO_u8GetPinValue+0x40>
     34a:	60 c0       	rjmp	.+192    	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
     34c:	83 30       	cpi	r24, 0x03	; 3
     34e:	91 05       	cpc	r25, r1
     350:	99 f1       	breq	.+102    	; 0x3b8 <DIO_u8GetPinValue+0xac>
     352:	84 30       	cpi	r24, 0x04	; 4
     354:	91 05       	cpc	r25, r1
     356:	0c f0       	brlt	.+2      	; 0x35a <DIO_u8GetPinValue+0x4e>
     358:	59 c0       	rjmp	.+178    	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
     35a:	00 97       	sbiw	r24, 0x00	; 0
     35c:	19 f0       	breq	.+6      	; 0x364 <DIO_u8GetPinValue+0x58>
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	b1 f0       	breq	.+44     	; 0x38e <DIO_u8GetPinValue+0x82>
     362:	54 c0       	rjmp	.+168    	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
     364:	89 e3       	ldi	r24, 0x39	; 57
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	fc 01       	movw	r30, r24
     36a:	80 81       	ld	r24, Z
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	2b 81       	ldd	r18, Y+3	; 0x03
     372:	22 2f       	mov	r18, r18
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_u8GetPinValue+0x70>
     378:	95 95       	asr	r25
     37a:	87 95       	ror	r24
     37c:	2a 95       	dec	r18
     37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_u8GetPinValue+0x6c>
     380:	28 2f       	mov	r18, r24
     382:	21 70       	andi	r18, 0x01	; 1
     384:	8c 81       	ldd	r24, Y+4	; 0x04
     386:	9d 81       	ldd	r25, Y+5	; 0x05
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
     38c:	42 c0       	rjmp	.+132    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
     38e:	86 e3       	ldi	r24, 0x36	; 54
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	2b 81       	ldd	r18, Y+3	; 0x03
     39c:	22 2f       	mov	r18, r18
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_u8GetPinValue+0x9a>
     3a2:	95 95       	asr	r25
     3a4:	87 95       	ror	r24
     3a6:	2a 95       	dec	r18
     3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_u8GetPinValue+0x96>
     3aa:	28 2f       	mov	r18, r24
     3ac:	21 70       	andi	r18, 0x01	; 1
     3ae:	8c 81       	ldd	r24, Y+4	; 0x04
     3b0:	9d 81       	ldd	r25, Y+5	; 0x05
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
     3b6:	2d c0       	rjmp	.+90     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
     3b8:	83 e3       	ldi	r24, 0x33	; 51
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 2f       	mov	r24, r24
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	2b 81       	ldd	r18, Y+3	; 0x03
     3c6:	22 2f       	mov	r18, r18
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_u8GetPinValue+0xc4>
     3cc:	95 95       	asr	r25
     3ce:	87 95       	ror	r24
     3d0:	2a 95       	dec	r18
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_u8GetPinValue+0xc0>
     3d4:	28 2f       	mov	r18, r24
     3d6:	21 70       	andi	r18, 0x01	; 1
     3d8:	8c 81       	ldd	r24, Y+4	; 0x04
     3da:	9d 81       	ldd	r25, Y+5	; 0x05
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
     3e0:	18 c0       	rjmp	.+48     	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
     3e2:	80 e3       	ldi	r24, 0x30	; 48
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	fc 01       	movw	r30, r24
     3e8:	80 81       	ld	r24, Z
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	2b 81       	ldd	r18, Y+3	; 0x03
     3f0:	22 2f       	mov	r18, r18
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8GetPinValue+0xee>
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	2a 95       	dec	r18
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8GetPinValue+0xea>
     3fe:	28 2f       	mov	r18, r24
     400:	21 70       	andi	r18, 0x01	; 1
     402:	8c 81       	ldd	r24, Y+4	; 0x04
     404:	9d 81       	ldd	r25, Y+5	; 0x05
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18
     40a:	03 c0       	rjmp	.+6      	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
					     default : Local_u8ErrorState=1; break;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	89 83       	std	Y+1, r24	; 0x01
     410:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
     412:	02 c0       	rjmp	.+4      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
					}

				}
				else
				{
				Local_u8ErrorState=1;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
     418:	89 81       	ldd	r24, Y+1	; 0x01


}
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <EXTI_voidInt0Init>:




void EXTI_voidInt0Init(void)
{
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE ==ON_CHANGE
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
     432:	85 e5       	ldi	r24, 0x55	; 85
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	fc 01       	movw	r30, r24
     438:	20 81       	ld	r18, Z
     43a:	85 e5       	ldi	r24, 0x55	; 85
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	22 60       	ori	r18, 0x02	; 2
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
	CLR_BIT(MCUCR,MCUCR_ISC00);
     444:	85 e5       	ldi	r24, 0x55	; 85
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	fc 01       	movw	r30, r24
     44a:	20 81       	ld	r18, Z
     44c:	85 e5       	ldi	r24, 0x55	; 85
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	2e 7f       	andi	r18, 0xFE	; 254
     452:	fc 01       	movw	r30, r24
     454:	20 83       	st	Z, r18

#endif

   /*Check peripheral interrupt enable (PIE) initial state*/
#if INT0_INITIAL_STATE ==ENABLED
	SET_BIT(GICR,GICR_INT0);
     456:	8b e5       	ldi	r24, 0x5B	; 91
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	20 81       	ld	r18, Z
     45e:	8b e5       	ldi	r24, 0x5B	; 91
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	20 64       	ori	r18, 0x40	; 64
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
#else
#error "Wrong INT0_INITIAL_STATE Configuration Option"

#endif

}
     468:	00 00       	nop
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC11);
	SET_BIT(MCUCR,MCUCR_ISC10);

#elif INT1_SENSE == FALLING_EDGE

	SET_BIT(MCUCR,MCUCR_ISC11);
     478:	85 e5       	ldi	r24, 0x55	; 85
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	fc 01       	movw	r30, r24
     47e:	20 81       	ld	r18, Z
     480:	85 e5       	ldi	r24, 0x55	; 85
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	28 60       	ori	r18, 0x08	; 8
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
	CLR_BIT(MCUCR,MCUCR_ISC10);
     48a:	85 e5       	ldi	r24, 0x55	; 85
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	20 81       	ld	r18, Z
     492:	85 e5       	ldi	r24, 0x55	; 85
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	2b 7f       	andi	r18, 0xFB	; 251
     498:	fc 01       	movw	r30, r24
     49a:	20 83       	st	Z, r18

#endif

	   /*Check peripheral interrupt enable (PIE) initial state*/
#if INT1_INITIAL_STATE ==ENABLED
		SET_BIT(GICR,GICR_INT1);
     49c:	8b e5       	ldi	r24, 0x5B	; 91
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 81       	ld	r18, Z
     4a4:	8b e5       	ldi	r24, 0x5B	; 91
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 68       	ori	r18, 0x80	; 128
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
#else
#error "Wrong INT1_INITIAL_STATE Configuration Option"

#endif

}
     4ae:	00 00       	nop
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	/*(PIF) Check sense Control*/
#if INT2_SENSE == FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
     4be:	84 e5       	ldi	r24, 0x54	; 84
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 81       	ld	r18, Z
     4c6:	84 e5       	ldi	r24, 0x54	; 84
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	2f 7b       	andi	r18, 0xBF	; 191
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
#endif

	/*Check peripheral(Specific) interrupt enable (PIE) initial state*/

#if INT2_INITIAL_STATE==DISABLE
	SET_BIT(GICR,GICR_INT2);
     4d0:	8b e5       	ldi	r24, 0x5B	; 91
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 81       	ld	r18, Z
     4d8:	8b e5       	ldi	r24, 0x5B	; 91
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	20 62       	ori	r18, 0x20	; 32
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
#else
#error "Wrong INT2_INITIAL_STATE Configuration Option"

#endif

}
     4e2:	00 00       	nop
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	08 95       	ret

000004ea <EXTI_u8Int0SetSenseControl>:
 *  								3-FALLING_EDGE
 *  								4-RISING_EDGE
 *  Output: Error Status with type u8
 *  */
u8 EXTI_u8Int0SetSenseControl(u8 Copy_u8Sense)
{
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <EXTI_u8Int0SetSenseControl+0x6>
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     4f6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Sense)
     4f8:	8a 81       	ldd	r24, Y+2	; 0x02
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	84 30       	cpi	r24, 0x04	; 4
     500:	91 05       	cpc	r25, r1
     502:	c1 f1       	breq	.+112    	; 0x574 <EXTI_u8Int0SetSenseControl+0x8a>
     504:	85 30       	cpi	r24, 0x05	; 5
     506:	91 05       	cpc	r25, r1
     508:	0c f0       	brlt	.+2      	; 0x50c <EXTI_u8Int0SetSenseControl+0x22>
     50a:	5a c0       	rjmp	.+180    	; 0x5c0 <EXTI_u8Int0SetSenseControl+0xd6>
     50c:	83 30       	cpi	r24, 0x03	; 3
     50e:	91 05       	cpc	r25, r1
     510:	09 f4       	brne	.+2      	; 0x514 <EXTI_u8Int0SetSenseControl+0x2a>
     512:	43 c0       	rjmp	.+134    	; 0x59a <EXTI_u8Int0SetSenseControl+0xb0>
     514:	84 30       	cpi	r24, 0x04	; 4
     516:	91 05       	cpc	r25, r1
     518:	0c f0       	brlt	.+2      	; 0x51c <EXTI_u8Int0SetSenseControl+0x32>
     51a:	52 c0       	rjmp	.+164    	; 0x5c0 <EXTI_u8Int0SetSenseControl+0xd6>
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	91 05       	cpc	r25, r1
     520:	19 f0       	breq	.+6      	; 0x528 <EXTI_u8Int0SetSenseControl+0x3e>
     522:	02 97       	sbiw	r24, 0x02	; 2
     524:	a1 f0       	breq	.+40     	; 0x54e <EXTI_u8Int0SetSenseControl+0x64>
     526:	4c c0       	rjmp	.+152    	; 0x5c0 <EXTI_u8Int0SetSenseControl+0xd6>
	{
	case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00);break;
     528:	85 e5       	ldi	r24, 0x55	; 85
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	fc 01       	movw	r30, r24
     52e:	20 81       	ld	r18, Z
     530:	85 e5       	ldi	r24, 0x55	; 85
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2d 7f       	andi	r18, 0xFD	; 253
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18
     53a:	85 e5       	ldi	r24, 0x55	; 85
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	fc 01       	movw	r30, r24
     540:	20 81       	ld	r18, Z
     542:	85 e5       	ldi	r24, 0x55	; 85
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	2e 7f       	andi	r18, 0xFE	; 254
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
     54c:	3b c0       	rjmp	.+118    	; 0x5c4 <EXTI_u8Int0SetSenseControl+0xda>

	case ON_CHANGE: SET_BIT(MCUCR,MCUCR_ISC00); CLR_BIT(MCUCR,MCUCR_ISC01);break;
     54e:	85 e5       	ldi	r24, 0x55	; 85
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	fc 01       	movw	r30, r24
     554:	20 81       	ld	r18, Z
     556:	85 e5       	ldi	r24, 0x55	; 85
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	21 60       	ori	r18, 0x01	; 1
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
     560:	85 e5       	ldi	r24, 0x55	; 85
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	20 81       	ld	r18, Z
     568:	85 e5       	ldi	r24, 0x55	; 85
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	2d 7f       	andi	r18, 0xFD	; 253
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
     572:	28 c0       	rjmp	.+80     	; 0x5c4 <EXTI_u8Int0SetSenseControl+0xda>

	case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00);break;
     574:	85 e5       	ldi	r24, 0x55	; 85
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	fc 01       	movw	r30, r24
     57a:	20 81       	ld	r18, Z
     57c:	85 e5       	ldi	r24, 0x55	; 85
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	22 60       	ori	r18, 0x02	; 2
     582:	fc 01       	movw	r30, r24
     584:	20 83       	st	Z, r18
     586:	85 e5       	ldi	r24, 0x55	; 85
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	fc 01       	movw	r30, r24
     58c:	20 81       	ld	r18, Z
     58e:	85 e5       	ldi	r24, 0x55	; 85
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	21 60       	ori	r18, 0x01	; 1
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	15 c0       	rjmp	.+42     	; 0x5c4 <EXTI_u8Int0SetSenseControl+0xda>

	case FALLING_EDGE:SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00);break;
     59a:	85 e5       	ldi	r24, 0x55	; 85
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	fc 01       	movw	r30, r24
     5a0:	20 81       	ld	r18, Z
     5a2:	85 e5       	ldi	r24, 0x55	; 85
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	22 60       	ori	r18, 0x02	; 2
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18
     5ac:	85 e5       	ldi	r24, 0x55	; 85
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 81       	ld	r18, Z
     5b4:	85 e5       	ldi	r24, 0x55	; 85
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	2e 7f       	andi	r18, 0xFE	; 254
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <EXTI_u8Int0SetSenseControl+0xda>

	default: Local_u8ErrorState=NOK;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
}
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <EXTI_u8Int1SetSenseControl>:
 *  								3-FALLING_EDGE
 *  								4-RISING_EDGE
 *  Output: Error Status with type u8
 *  */
u8 EXTI_u8Int1SetSenseControl(u8 Copy_u8Sense)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <EXTI_u8Int1SetSenseControl+0x6>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     5dc:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Sense)
     5de:	8a 81       	ldd	r24, Y+2	; 0x02
     5e0:	88 2f       	mov	r24, r24
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	84 30       	cpi	r24, 0x04	; 4
     5e6:	91 05       	cpc	r25, r1
     5e8:	c1 f1       	breq	.+112    	; 0x65a <EXTI_u8Int1SetSenseControl+0x8a>
     5ea:	85 30       	cpi	r24, 0x05	; 5
     5ec:	91 05       	cpc	r25, r1
     5ee:	0c f0       	brlt	.+2      	; 0x5f2 <EXTI_u8Int1SetSenseControl+0x22>
     5f0:	5a c0       	rjmp	.+180    	; 0x6a6 <EXTI_u8Int1SetSenseControl+0xd6>
     5f2:	83 30       	cpi	r24, 0x03	; 3
     5f4:	91 05       	cpc	r25, r1
     5f6:	09 f4       	brne	.+2      	; 0x5fa <EXTI_u8Int1SetSenseControl+0x2a>
     5f8:	43 c0       	rjmp	.+134    	; 0x680 <EXTI_u8Int1SetSenseControl+0xb0>
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	91 05       	cpc	r25, r1
     5fe:	0c f0       	brlt	.+2      	; 0x602 <EXTI_u8Int1SetSenseControl+0x32>
     600:	52 c0       	rjmp	.+164    	; 0x6a6 <EXTI_u8Int1SetSenseControl+0xd6>
     602:	81 30       	cpi	r24, 0x01	; 1
     604:	91 05       	cpc	r25, r1
     606:	19 f0       	breq	.+6      	; 0x60e <EXTI_u8Int1SetSenseControl+0x3e>
     608:	02 97       	sbiw	r24, 0x02	; 2
     60a:	a1 f0       	breq	.+40     	; 0x634 <EXTI_u8Int1SetSenseControl+0x64>
     60c:	4c c0       	rjmp	.+152    	; 0x6a6 <EXTI_u8Int1SetSenseControl+0xd6>
		{
		case LOW_LEVEL: CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10);break;
     60e:	85 e5       	ldi	r24, 0x55	; 85
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	20 81       	ld	r18, Z
     616:	85 e5       	ldi	r24, 0x55	; 85
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	27 7f       	andi	r18, 0xF7	; 247
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
     620:	85 e5       	ldi	r24, 0x55	; 85
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	20 81       	ld	r18, Z
     628:	85 e5       	ldi	r24, 0x55	; 85
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	2b 7f       	andi	r18, 0xFB	; 251
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
     632:	3b c0       	rjmp	.+118    	; 0x6aa <EXTI_u8Int1SetSenseControl+0xda>

		case ON_CHANGE: CLR_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10);break;
     634:	85 e5       	ldi	r24, 0x55	; 85
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	fc 01       	movw	r30, r24
     63a:	20 81       	ld	r18, Z
     63c:	85 e5       	ldi	r24, 0x55	; 85
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	27 7f       	andi	r18, 0xF7	; 247
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
     646:	85 e5       	ldi	r24, 0x55	; 85
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	fc 01       	movw	r30, r24
     64c:	20 81       	ld	r18, Z
     64e:	85 e5       	ldi	r24, 0x55	; 85
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	24 60       	ori	r18, 0x04	; 4
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
     658:	28 c0       	rjmp	.+80     	; 0x6aa <EXTI_u8Int1SetSenseControl+0xda>

		case RISING_EDGE: SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10);break;
     65a:	85 e5       	ldi	r24, 0x55	; 85
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	20 81       	ld	r18, Z
     662:	85 e5       	ldi	r24, 0x55	; 85
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	28 60       	ori	r18, 0x08	; 8
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
     66c:	85 e5       	ldi	r24, 0x55	; 85
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	fc 01       	movw	r30, r24
     672:	20 81       	ld	r18, Z
     674:	85 e5       	ldi	r24, 0x55	; 85
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	24 60       	ori	r18, 0x04	; 4
     67a:	fc 01       	movw	r30, r24
     67c:	20 83       	st	Z, r18
     67e:	15 c0       	rjmp	.+42     	; 0x6aa <EXTI_u8Int1SetSenseControl+0xda>

		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10);break;
     680:	85 e5       	ldi	r24, 0x55	; 85
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	fc 01       	movw	r30, r24
     686:	20 81       	ld	r18, Z
     688:	85 e5       	ldi	r24, 0x55	; 85
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	28 60       	ori	r18, 0x08	; 8
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
     692:	85 e5       	ldi	r24, 0x55	; 85
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	fc 01       	movw	r30, r24
     698:	20 81       	ld	r18, Z
     69a:	85 e5       	ldi	r24, 0x55	; 85
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	2b 7f       	andi	r18, 0xFB	; 251
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <EXTI_u8Int1SetSenseControl+0xda>

		default: Local_u8ErrorState=NOK;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	89 83       	std	Y+1, r24	; 0x01

		}
		return Local_u8ErrorState;
     6aa:	89 81       	ldd	r24, Y+1	; 0x01

}
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <EXTI_u8Int2SetSenseControl>:
 *  								1-FALLING_EDGE
 *  								2-RISING_EDGE
 *  Output: Error Status with type u8
 *  */
u8 EXTI_u8Int2SetSenseControl(u8 Copy_u8Sense)
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <EXTI_u8Int2SetSenseControl+0x6>
     6bc:	cd b7       	in	r28, 0x3d	; 61
     6be:	de b7       	in	r29, 0x3e	; 62
     6c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     6c2:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Sense)
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	91 05       	cpc	r25, r1
     6ce:	61 f0       	breq	.+24     	; 0x6e8 <EXTI_u8Int2SetSenseControl+0x32>
     6d0:	04 97       	sbiw	r24, 0x04	; 4
     6d2:	a1 f4       	brne	.+40     	; 0x6fc <EXTI_u8Int2SetSenseControl+0x46>
		{

		case RISING_EDGE:SET_BIT(MCUCSR,MCUCSR_ISC2);break;
     6d4:	84 e5       	ldi	r24, 0x54	; 84
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	fc 01       	movw	r30, r24
     6da:	20 81       	ld	r18, Z
     6dc:	84 e5       	ldi	r24, 0x54	; 84
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	20 64       	ori	r18, 0x40	; 64
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
     6e6:	0c c0       	rjmp	.+24     	; 0x700 <EXTI_u8Int2SetSenseControl+0x4a>

		case FALLING_EDGE: 	CLR_BIT(MCUCSR,MCUCSR_ISC2);break;
     6e8:	84 e5       	ldi	r24, 0x54	; 84
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 81       	ld	r18, Z
     6f0:	84 e5       	ldi	r24, 0x54	; 84
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	2f 7b       	andi	r18, 0xBF	; 191
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <EXTI_u8Int2SetSenseControl+0x4a>

		default: Local_u8ErrorState=NOK;
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	89 83       	std	Y+1, r24	; 0x01

		}
		return Local_u8ErrorState;
     700:	89 81       	ldd	r24, Y+1	; 0x01

}
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <EXTI_u8IntEnable>:

u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <EXTI_u8IntEnable+0x6>
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     718:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Int)
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	83 30       	cpi	r24, 0x03	; 3
     722:	91 05       	cpc	r25, r1
     724:	e9 f0       	breq	.+58     	; 0x760 <EXTI_u8IntEnable+0x54>
     726:	84 30       	cpi	r24, 0x04	; 4
     728:	91 05       	cpc	r25, r1
     72a:	24 f5       	brge	.+72     	; 0x774 <EXTI_u8IntEnable+0x68>
     72c:	81 30       	cpi	r24, 0x01	; 1
     72e:	91 05       	cpc	r25, r1
     730:	19 f0       	breq	.+6      	; 0x738 <EXTI_u8IntEnable+0x2c>
     732:	02 97       	sbiw	r24, 0x02	; 2
     734:	59 f0       	breq	.+22     	; 0x74c <EXTI_u8IntEnable+0x40>
     736:	1e c0       	rjmp	.+60     	; 0x774 <EXTI_u8IntEnable+0x68>
		{
		case INT0 :SET_BIT(GICR,GICR_INT0); break;
     738:	8b e5       	ldi	r24, 0x5B	; 91
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fc 01       	movw	r30, r24
     73e:	20 81       	ld	r18, Z
     740:	8b e5       	ldi	r24, 0x5B	; 91
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	20 64       	ori	r18, 0x40	; 64
     746:	fc 01       	movw	r30, r24
     748:	20 83       	st	Z, r18
     74a:	16 c0       	rjmp	.+44     	; 0x778 <EXTI_u8IntEnable+0x6c>
		case INT1: SET_BIT(GICR,GICR_INT1); break;
     74c:	8b e5       	ldi	r24, 0x5B	; 91
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	fc 01       	movw	r30, r24
     752:	20 81       	ld	r18, Z
     754:	8b e5       	ldi	r24, 0x5B	; 91
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	20 68       	ori	r18, 0x80	; 128
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
     75e:	0c c0       	rjmp	.+24     	; 0x778 <EXTI_u8IntEnable+0x6c>
		case INT2 :SET_BIT(GICR,GICR_INT2); break;
     760:	8b e5       	ldi	r24, 0x5B	; 91
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	20 81       	ld	r18, Z
     768:	8b e5       	ldi	r24, 0x5B	; 91
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	20 62       	ori	r18, 0x20	; 32
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
     772:	02 c0       	rjmp	.+4      	; 0x778 <EXTI_u8IntEnable+0x6c>
		default: Local_u8ErrorState=NOK;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
     778:	89 81       	ldd	r24, Y+1	; 0x01
}
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <EXTI_u8IntDisable>:

u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	00 d0       	rcall	.+0      	; 0x78a <EXTI_u8IntDisable+0x6>
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     790:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8Int)
     792:	8a 81       	ldd	r24, Y+2	; 0x02
     794:	88 2f       	mov	r24, r24
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	91 05       	cpc	r25, r1
     79c:	e9 f0       	breq	.+58     	; 0x7d8 <EXTI_u8IntDisable+0x54>
     79e:	84 30       	cpi	r24, 0x04	; 4
     7a0:	91 05       	cpc	r25, r1
     7a2:	24 f5       	brge	.+72     	; 0x7ec <EXTI_u8IntDisable+0x68>
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	91 05       	cpc	r25, r1
     7a8:	19 f0       	breq	.+6      	; 0x7b0 <EXTI_u8IntDisable+0x2c>
     7aa:	02 97       	sbiw	r24, 0x02	; 2
     7ac:	59 f0       	breq	.+22     	; 0x7c4 <EXTI_u8IntDisable+0x40>
     7ae:	1e c0       	rjmp	.+60     	; 0x7ec <EXTI_u8IntDisable+0x68>
		{
		case INT0 :CLR_BIT(GICR,GICR_INT0); break;
     7b0:	8b e5       	ldi	r24, 0x5B	; 91
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 81       	ld	r18, Z
     7b8:	8b e5       	ldi	r24, 0x5B	; 91
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2f 7b       	andi	r18, 0xBF	; 191
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
     7c2:	16 c0       	rjmp	.+44     	; 0x7f0 <EXTI_u8IntDisable+0x6c>
		case INT1: CLR_BIT(GICR,GICR_INT1); break;
     7c4:	8b e5       	ldi	r24, 0x5B	; 91
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 81       	ld	r18, Z
     7cc:	8b e5       	ldi	r24, 0x5B	; 91
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	2f 77       	andi	r18, 0x7F	; 127
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
     7d6:	0c c0       	rjmp	.+24     	; 0x7f0 <EXTI_u8IntDisable+0x6c>
		case INT2 :CLR_BIT(GICR,GICR_INT2); break;
     7d8:	8b e5       	ldi	r24, 0x5B	; 91
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	20 81       	ld	r18, Z
     7e0:	8b e5       	ldi	r24, 0x5B	; 91
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	2f 7d       	andi	r18, 0xDF	; 223
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <EXTI_u8IntDisable+0x6c>
		default: Local_u8ErrorState=NOK;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_u8ErrorState;
     7f0:	89 81       	ldd	r24, Y+1	; 0x01


}
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <EXTI_u8Int0SetCallBack>:
/*create Global Pointer to function to hold INT0 ISR Address*/
void (*EXTI_pvInt0Func)(void)=NULL;

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	00 d0       	rcall	.+0      	; 0x802 <EXTI_u8Int0SetCallBack+0x6>
     802:	0f 92       	push	r0
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	9b 83       	std	Y+3, r25	; 0x03
     80a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     80c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func !=NULL)
     80e:	8a 81       	ldd	r24, Y+2	; 0x02
     810:	9b 81       	ldd	r25, Y+3	; 0x03
     812:	89 2b       	or	r24, r25
     814:	39 f0       	breq	.+14     	; 0x824 <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	9b 81       	ldd	r25, Y+3	; 0x03
     81a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
     81e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
     822:	02 c0       	rjmp	.+4      	; 0x828 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     828:	89 81       	ldd	r24, Y+1	; 0x01
}
     82a:	0f 90       	pop	r0
     82c:	0f 90       	pop	r0
     82e:	0f 90       	pop	r0
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <__vector_1>:

/*ISR of INT0 */
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)
{
     836:	1f 92       	push	r1
     838:	0f 92       	push	r0
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	0f 92       	push	r0
     83e:	11 24       	eor	r1, r1
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	ef 93       	push	r30
     856:	ff 93       	push	r31
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func !=NULL)
     860:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     864:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
     868:	89 2b       	or	r24, r25
     86a:	31 f0       	breq	.+12     	; 0x878 <__stack+0x19>
	{
		EXTI_pvInt0Func();
     86c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
     870:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
     874:	fc 01       	movw	r30, r24
     876:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
     878:	00 00       	nop
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	ff 91       	pop	r31
     880:	ef 91       	pop	r30
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	0f 90       	pop	r0
     898:	0f be       	out	0x3f, r0	; 63
     89a:	0f 90       	pop	r0
     89c:	1f 90       	pop	r1
     89e:	18 95       	reti

000008a0 <EXTI_u8Int1SetCallBack>:

/*create Global Pointer to function to hold INT1 ISR Address*/
void (*EXTI_pvInt1Func)(void)=NULL;
u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func)(void))
{
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <EXTI_u8Int1SetCallBack+0x6>
     8a6:	0f 92       	push	r0
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	9b 83       	std	Y+3, r25	; 0x03
     8ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     8b0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func !=NULL)
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	9b 81       	ldd	r25, Y+3	; 0x03
     8b6:	89 2b       	or	r24, r25
     8b8:	39 f0       	breq	.+14     	; 0x8c8 <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func=Copy_pvInt1Func;
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	9b 81       	ldd	r25, Y+3	; 0x03
     8be:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <EXTI_pvInt1Func+0x1>
     8c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <EXTI_pvInt1Func>
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <__vector_2>:

/*ISR of INT1 */
void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)
{
     8da:	1f 92       	push	r1
     8dc:	0f 92       	push	r0
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	2f 93       	push	r18
     8e6:	3f 93       	push	r19
     8e8:	4f 93       	push	r20
     8ea:	5f 93       	push	r21
     8ec:	6f 93       	push	r22
     8ee:	7f 93       	push	r23
     8f0:	8f 93       	push	r24
     8f2:	9f 93       	push	r25
     8f4:	af 93       	push	r26
     8f6:	bf 93       	push	r27
     8f8:	ef 93       	push	r30
     8fa:	ff 93       	push	r31
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func !=NULL)
     904:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <EXTI_pvInt1Func>
     908:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <EXTI_pvInt1Func+0x1>
     90c:	89 2b       	or	r24, r25
     90e:	31 f0       	breq	.+12     	; 0x91c <__vector_2+0x42>
	{
		EXTI_pvInt1Func();
     910:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <EXTI_pvInt1Func>
     914:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <EXTI_pvInt1Func+0x1>
     918:	fc 01       	movw	r30, r24
     91a:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
     91c:	00 00       	nop
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <EXTI_u8Int2SetCallBack>:

/*create Global Pointer to function to hold INT2 ISR Address*/
void (*EXTI_pvInt2Func)(void)=NULL;
u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func)(void))
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	00 d0       	rcall	.+0      	; 0x94a <EXTI_u8Int2SetCallBack+0x6>
     94a:	0f 92       	push	r0
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	9b 83       	std	Y+3, r25	; 0x03
     952:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
     954:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func !=NULL)
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	9b 81       	ldd	r25, Y+3	; 0x03
     95a:	89 2b       	or	r24, r25
     95c:	39 f0       	breq	.+14     	; 0x96c <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func=Copy_pvInt2Func;
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	9b 81       	ldd	r25, Y+3	; 0x03
     962:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <EXTI_pvInt2Func+0x1>
     966:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <EXTI_pvInt2Func>
     96a:	02 c0       	rjmp	.+4      	; 0x970 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState=NULL_POINTER;
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
     970:	89 81       	ldd	r24, Y+1	; 0x01
}
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <__vector_3>:

/*ISR of INT2 */
void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	2f 93       	push	r18
     98a:	3f 93       	push	r19
     98c:	4f 93       	push	r20
     98e:	5f 93       	push	r21
     990:	6f 93       	push	r22
     992:	7f 93       	push	r23
     994:	8f 93       	push	r24
     996:	9f 93       	push	r25
     998:	af 93       	push	r26
     99a:	bf 93       	push	r27
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func !=NULL)
     9a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI_pvInt2Func>
     9ac:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <EXTI_pvInt2Func+0x1>
     9b0:	89 2b       	or	r24, r25
     9b2:	31 f0       	breq	.+12     	; 0x9c0 <__vector_3+0x42>
	{
		EXTI_pvInt2Func();
     9b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <EXTI_pvInt2Func>
     9b8:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <EXTI_pvInt2Func+0x1>
     9bc:	fc 01       	movw	r30, r24
     9be:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
     9c0:	00 00       	nop
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	bf 91       	pop	r27
     9cc:	af 91       	pop	r26
     9ce:	9f 91       	pop	r25
     9d0:	8f 91       	pop	r24
     9d2:	7f 91       	pop	r23
     9d4:	6f 91       	pop	r22
     9d6:	5f 91       	pop	r21
     9d8:	4f 91       	pop	r20
     9da:	3f 91       	pop	r19
     9dc:	2f 91       	pop	r18
     9de:	0f 90       	pop	r0
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	0f 90       	pop	r0
     9e4:	1f 90       	pop	r1
     9e6:	18 95       	reti

000009e8 <GIE_voidEnable>:
#include"GIE_interface.h"
#include"GIE_register.h"


void GIE_voidEnable(void)
{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     9f0:	8f e5       	ldi	r24, 0x5F	; 95
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 81       	ld	r18, Z
     9f8:	8f e5       	ldi	r24, 0x5F	; 95
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	20 68       	ori	r18, 0x80	; 128
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
	
}
     a02:	00 00       	nop
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	08 95       	ret

00000a0a <GIE_voidDisable>:
void GIE_voidDisable(void)
{
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,SREG_I);
     a12:	8f e5       	ldi	r24, 0x5F	; 95
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	fc 01       	movw	r30, r24
     a18:	20 81       	ld	r18, Z
     a1a:	8f e5       	ldi	r24, 0x5F	; 95
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	2f 77       	andi	r18, 0x7F	; 127
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
	
     a24:	00 00       	nop
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     a34:	8a e3       	ldi	r24, 0x3A	; 58
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	fc 01       	movw	r30, r24
     a3c:	20 83       	st	Z, r18
	DDRB=PORTB_DIR;
     a3e:	87 e3       	ldi	r24, 0x37	; 55
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	20 e8       	ldi	r18, 0x80	; 128
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
	DDRC=PORTC_DIR;
     a48:	84 e3       	ldi	r24, 0x34	; 52
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	20 e8       	ldi	r18, 0x80	; 128
     a4e:	fc 01       	movw	r30, r24
     a50:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
     a52:	81 e3       	ldi	r24, 0x31	; 49
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	fc 01       	movw	r30, r24
     a58:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
     a5a:	8b e3       	ldi	r24, 0x3B	; 59
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	fc 01       	movw	r30, r24
     a60:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
     a62:	88 e3       	ldi	r24, 0x38	; 56
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	fc 01       	movw	r30, r24
     a68:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
     a6a:	85 e3       	ldi	r24, 0x35	; 53
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	fc 01       	movw	r30, r24
     a70:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
     a72:	82 e3       	ldi	r24, 0x32	; 50
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	2c e0       	ldi	r18, 0x0C	; 12
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
}
     a7c:	00 00       	nop
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <main>:
#include "EXTI_interface.h"
#include "GIE_interface.h"
void INT0_ISR(void);
void INT1_ISR(void);
void main(void)
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
     a8c:	0e 94 16 05 	call	0xa2c	; 0xa2c <PORT_voidInit>

	EXTI_voidInt0Init();
     a90:	0e 94 15 02 	call	0x42a	; 0x42a <EXTI_voidInt0Init>
    EXTI_voidInt1Init();
     a94:	0e 94 38 02 	call	0x470	; 0x470 <EXTI_voidInt1Init>
	EXTI_u8Int0SetCallBack(INT0_ISR);
     a98:	87 e5       	ldi	r24, 0x57	; 87
     a9a:	95 e0       	ldi	r25, 0x05	; 5
     a9c:	0e 94 fe 03 	call	0x7fc	; 0x7fc <EXTI_u8Int0SetCallBack>
	EXTI_u8Int1SetCallBack(INT1_ISR);
     aa0:	8a e9       	ldi	r24, 0x9A	; 154
     aa2:	96 e0       	ldi	r25, 0x06	; 6
     aa4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <EXTI_u8Int1SetCallBack>
	GIE_voidEnable();
     aa8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <GIE_voidEnable>

	while(1)
     aac:	ff cf       	rjmp	.-2      	; 0xaac <main+0x28>

00000aae <INT0_ISR>:
	}

}

void INT0_ISR()
{
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	c4 54       	subi	r28, 0x44	; 68
     ab8:	d1 09       	sbc	r29, r1
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a8 e4       	ldi	r26, 0x48	; 72
     ad4:	b2 e4       	ldi	r27, 0x42	; 66
     ad6:	8f 87       	std	Y+15, r24	; 0x0f
     ad8:	98 8b       	std	Y+16, r25	; 0x10
     ada:	a9 8b       	std	Y+17, r26	; 0x11
     adc:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	4a ef       	ldi	r20, 0xFA	; 250
     ae4:	54 e4       	ldi	r21, 0x44	; 68
     ae6:	6f 85       	ldd	r22, Y+15	; 0x0f
     ae8:	78 89       	ldd	r23, Y+16	; 0x10
     aea:	89 89       	ldd	r24, Y+17	; 0x11
     aec:	9a 89       	ldd	r25, Y+18	; 0x12
     aee:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     af2:	6d a3       	std	Y+37, r22	; 0x25
     af4:	7e a3       	std	Y+38, r23	; 0x26
     af6:	8f a3       	std	Y+39, r24	; 0x27
     af8:	98 a7       	std	Y+40, r25	; 0x28
     afa:	8d a1       	ldd	r24, Y+37	; 0x25
     afc:	9e a1       	ldd	r25, Y+38	; 0x26
     afe:	af a1       	ldd	r26, Y+39	; 0x27
     b00:	b8 a5       	ldd	r27, Y+40	; 0x28
     b02:	8b 8b       	std	Y+19, r24	; 0x13
     b04:	9c 8b       	std	Y+20, r25	; 0x14
     b06:	ad 8b       	std	Y+21, r26	; 0x15
     b08:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e8       	ldi	r20, 0x80	; 128
     b10:	5f e3       	ldi	r21, 0x3F	; 63
     b12:	6b 89       	ldd	r22, Y+19	; 0x13
     b14:	7c 89       	ldd	r23, Y+20	; 0x14
     b16:	8d 89       	ldd	r24, Y+21	; 0x15
     b18:	9e 89       	ldd	r25, Y+22	; 0x16
     b1a:	0e 94 dd 07 	call	0xfba	; 0xfba <__cmpsf2>
     b1e:	88 23       	and	r24, r24
     b20:	2c f4       	brge	.+10     	; 0xb2c <INT0_ISR+0x7e>
		__ticks = 1;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	98 8f       	std	Y+24, r25	; 0x18
     b28:	8f 8b       	std	Y+23, r24	; 0x17
     b2a:	54 c0       	rjmp	.+168    	; 0xbd4 <INT0_ISR+0x126>
	else if (__tmp > 65535)
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	3f ef       	ldi	r19, 0xFF	; 255
     b30:	4f e7       	ldi	r20, 0x7F	; 127
     b32:	57 e4       	ldi	r21, 0x47	; 71
     b34:	6b 89       	ldd	r22, Y+19	; 0x13
     b36:	7c 89       	ldd	r23, Y+20	; 0x14
     b38:	8d 89       	ldd	r24, Y+21	; 0x15
     b3a:	9e 89       	ldd	r25, Y+22	; 0x16
     b3c:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__gesf2>
     b40:	18 16       	cp	r1, r24
     b42:	d4 f5       	brge	.+116    	; 0xbb8 <INT0_ISR+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e2       	ldi	r20, 0x20	; 32
     b4a:	51 e4       	ldi	r21, 0x41	; 65
     b4c:	6f 85       	ldd	r22, Y+15	; 0x0f
     b4e:	78 89       	ldd	r23, Y+16	; 0x10
     b50:	89 89       	ldd	r24, Y+17	; 0x11
     b52:	9a 89       	ldd	r25, Y+18	; 0x12
     b54:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     b58:	69 a7       	std	Y+41, r22	; 0x29
     b5a:	7a a7       	std	Y+42, r23	; 0x2a
     b5c:	8b a7       	std	Y+43, r24	; 0x2b
     b5e:	9c a7       	std	Y+44, r25	; 0x2c
     b60:	89 a5       	ldd	r24, Y+41	; 0x29
     b62:	9a a5       	ldd	r25, Y+42	; 0x2a
     b64:	ab a5       	ldd	r26, Y+43	; 0x2b
     b66:	bc a5       	ldd	r27, Y+44	; 0x2c
     b68:	89 a3       	std	Y+33, r24	; 0x21
     b6a:	9a a3       	std	Y+34, r25	; 0x22
     b6c:	ab a3       	std	Y+35, r26	; 0x23
     b6e:	bc a3       	std	Y+36, r27	; 0x24
     b70:	69 a1       	ldd	r22, Y+33	; 0x21
     b72:	7a a1       	ldd	r23, Y+34	; 0x22
     b74:	8b a1       	ldd	r24, Y+35	; 0x23
     b76:	9c a1       	ldd	r25, Y+36	; 0x24
     b78:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     b7c:	6d a7       	std	Y+45, r22	; 0x2d
     b7e:	7e a7       	std	Y+46, r23	; 0x2e
     b80:	8f a7       	std	Y+47, r24	; 0x2f
     b82:	98 ab       	std	Y+48, r25	; 0x30
     b84:	ad a5       	ldd	r26, Y+45	; 0x2d
     b86:	be a5       	ldd	r27, Y+46	; 0x2e
     b88:	b8 8f       	std	Y+24, r27	; 0x18
     b8a:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     b8c:	10 c0       	rjmp	.+32     	; 0xbae <INT0_ISR+0x100>
     b8e:	88 ec       	ldi	r24, 0xC8	; 200
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9a 8f       	std	Y+26, r25	; 0x1a
     b94:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b96:	89 8d       	ldd	r24, Y+25	; 0x19
     b98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b9a:	01 97       	sbiw	r24, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <INT0_ISR+0xec>
     b9e:	9a 8f       	std	Y+26, r25	; 0x1a
     ba0:	89 8f       	std	Y+25, r24	; 0x19
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     ba2:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba4:	8f 89       	ldd	r24, Y+23	; 0x17
     ba6:	98 8d       	ldd	r25, Y+24	; 0x18
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	98 8f       	std	Y+24, r25	; 0x18
     bac:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bae:	8f 89       	ldd	r24, Y+23	; 0x17
     bb0:	98 8d       	ldd	r25, Y+24	; 0x18
     bb2:	89 2b       	or	r24, r25
     bb4:	61 f7       	brne	.-40     	; 0xb8e <INT0_ISR+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     bb6:	19 c0       	rjmp	.+50     	; 0xbea <INT0_ISR+0x13c>
	}
	else
		__ticks = (uint16_t)__tmp;
     bb8:	6b 89       	ldd	r22, Y+19	; 0x13
     bba:	7c 89       	ldd	r23, Y+20	; 0x14
     bbc:	8d 89       	ldd	r24, Y+21	; 0x15
     bbe:	9e 89       	ldd	r25, Y+22	; 0x16
     bc0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     bc4:	69 ab       	std	Y+49, r22	; 0x31
     bc6:	7a ab       	std	Y+50, r23	; 0x32
     bc8:	8b ab       	std	Y+51, r24	; 0x33
     bca:	9c ab       	std	Y+52, r25	; 0x34
     bcc:	89 a9       	ldd	r24, Y+49	; 0x31
     bce:	9a a9       	ldd	r25, Y+50	; 0x32
     bd0:	98 8f       	std	Y+24, r25	; 0x18
     bd2:	8f 8b       	std	Y+23, r24	; 0x17
     bd4:	8f 89       	ldd	r24, Y+23	; 0x17
     bd6:	98 8d       	ldd	r25, Y+24	; 0x18
     bd8:	9c 8f       	std	Y+28, r25	; 0x1c
     bda:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <INT0_ISR+0x132>
     be4:	9c 8f       	std	Y+28, r25	; 0x1c
     be6:	8b 8f       	std	Y+27, r24	; 0x1b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     be8:	00 00       	nop
	_delay_ms(50);
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a8 e4       	ldi	r26, 0x48	; 72
     bfa:	b2 e4       	ldi	r27, 0x42	; 66
     bfc:	89 83       	std	Y+1, r24	; 0x01
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	ab 83       	std	Y+3, r26	; 0x03
     c02:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	4a ef       	ldi	r20, 0xFA	; 250
     c0a:	54 e4       	ldi	r21, 0x44	; 68
     c0c:	69 81       	ldd	r22, Y+1	; 0x01
     c0e:	7a 81       	ldd	r23, Y+2	; 0x02
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     c18:	6d ab       	std	Y+53, r22	; 0x35
     c1a:	7e ab       	std	Y+54, r23	; 0x36
     c1c:	8f ab       	std	Y+55, r24	; 0x37
     c1e:	98 af       	std	Y+56, r25	; 0x38
     c20:	8d a9       	ldd	r24, Y+53	; 0x35
     c22:	9e a9       	ldd	r25, Y+54	; 0x36
     c24:	af a9       	ldd	r26, Y+55	; 0x37
     c26:	b8 ad       	ldd	r27, Y+56	; 0x38
     c28:	8d 83       	std	Y+5, r24	; 0x05
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	af 83       	std	Y+7, r26	; 0x07
     c2e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e8       	ldi	r20, 0x80	; 128
     c36:	5f e3       	ldi	r21, 0x3F	; 63
     c38:	6d 81       	ldd	r22, Y+5	; 0x05
     c3a:	7e 81       	ldd	r23, Y+6	; 0x06
     c3c:	8f 81       	ldd	r24, Y+7	; 0x07
     c3e:	98 85       	ldd	r25, Y+8	; 0x08
     c40:	0e 94 dd 07 	call	0xfba	; 0xfba <__cmpsf2>
     c44:	88 23       	and	r24, r24
     c46:	2c f4       	brge	.+10     	; 0xc52 <INT0_ISR+0x1a4>
		__ticks = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9a 87       	std	Y+10, r25	; 0x0a
     c4e:	89 87       	std	Y+9, r24	; 0x09
     c50:	5b c0       	rjmp	.+182    	; 0xd08 <INT0_ISR+0x25a>
	else if (__tmp > 65535)
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	3f ef       	ldi	r19, 0xFF	; 255
     c56:	4f e7       	ldi	r20, 0x7F	; 127
     c58:	57 e4       	ldi	r21, 0x47	; 71
     c5a:	6d 81       	ldd	r22, Y+5	; 0x05
     c5c:	7e 81       	ldd	r23, Y+6	; 0x06
     c5e:	8f 81       	ldd	r24, Y+7	; 0x07
     c60:	98 85       	ldd	r25, Y+8	; 0x08
     c62:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__gesf2>
     c66:	18 16       	cp	r1, r24
     c68:	0c f0       	brlt	.+2      	; 0xc6c <INT0_ISR+0x1be>
     c6a:	3c c0       	rjmp	.+120    	; 0xce4 <INT0_ISR+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	40 e2       	ldi	r20, 0x20	; 32
     c72:	51 e4       	ldi	r21, 0x41	; 65
     c74:	69 81       	ldd	r22, Y+1	; 0x01
     c76:	7a 81       	ldd	r23, Y+2	; 0x02
     c78:	8b 81       	ldd	r24, Y+3	; 0x03
     c7a:	9c 81       	ldd	r25, Y+4	; 0x04
     c7c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     c80:	69 af       	std	Y+57, r22	; 0x39
     c82:	7a af       	std	Y+58, r23	; 0x3a
     c84:	8b af       	std	Y+59, r24	; 0x3b
     c86:	9c af       	std	Y+60, r25	; 0x3c
     c88:	89 ad       	ldd	r24, Y+57	; 0x39
     c8a:	9a ad       	ldd	r25, Y+58	; 0x3a
     c8c:	ab ad       	ldd	r26, Y+59	; 0x3b
     c8e:	bc ad       	ldd	r27, Y+60	; 0x3c
     c90:	8d 8f       	std	Y+29, r24	; 0x1d
     c92:	9e 8f       	std	Y+30, r25	; 0x1e
     c94:	af 8f       	std	Y+31, r26	; 0x1f
     c96:	b8 a3       	std	Y+32, r27	; 0x20
     c98:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c9a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c9e:	98 a1       	ldd	r25, Y+32	; 0x20
     ca0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     ca4:	21 96       	adiw	r28, 0x01	; 1
     ca6:	6c af       	std	Y+60, r22	; 0x3c
     ca8:	7d af       	std	Y+61, r23	; 0x3d
     caa:	8e af       	std	Y+62, r24	; 0x3e
     cac:	9f af       	std	Y+63, r25	; 0x3f
     cae:	21 97       	sbiw	r28, 0x01	; 1
     cb0:	ad ad       	ldd	r26, Y+61	; 0x3d
     cb2:	be ad       	ldd	r27, Y+62	; 0x3e
     cb4:	ba 87       	std	Y+10, r27	; 0x0a
     cb6:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     cb8:	10 c0       	rjmp	.+32     	; 0xcda <INT0_ISR+0x22c>
     cba:	88 ec       	ldi	r24, 0xC8	; 200
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	9c 87       	std	Y+12, r25	; 0x0c
     cc0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc2:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc4:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <INT0_ISR+0x218>
     cca:	9c 87       	std	Y+12, r25	; 0x0c
     ccc:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     cce:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	89 85       	ldd	r24, Y+9	; 0x09
     cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9a 87       	std	Y+10, r25	; 0x0a
     cd8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	89 2b       	or	r24, r25
     ce0:	61 f7       	brne	.-40     	; 0xcba <INT0_ISR+0x20c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     ce2:	1d c0       	rjmp	.+58     	; 0xd1e <INT0_ISR+0x270>
	}
	else
		__ticks = (uint16_t)__tmp;
     ce4:	6d 81       	ldd	r22, Y+5	; 0x05
     ce6:	7e 81       	ldd	r23, Y+6	; 0x06
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     cf0:	25 96       	adiw	r28, 0x05	; 5
     cf2:	6c af       	std	Y+60, r22	; 0x3c
     cf4:	7d af       	std	Y+61, r23	; 0x3d
     cf6:	8e af       	std	Y+62, r24	; 0x3e
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	25 97       	sbiw	r28, 0x05	; 5
     cfc:	23 96       	adiw	r28, 0x03	; 3
     cfe:	8e ad       	ldd	r24, Y+62	; 0x3e
     d00:	9f ad       	ldd	r25, Y+63	; 0x3f
     d02:	23 97       	sbiw	r28, 0x03	; 3
     d04:	9a 87       	std	Y+10, r25	; 0x0a
     d06:	89 87       	std	Y+9, r24	; 0x09
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	9e 87       	std	Y+14, r25	; 0x0e
     d0e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d10:	8d 85       	ldd	r24, Y+13	; 0x0d
     d12:	9e 85       	ldd	r25, Y+14	; 0x0e
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <INT0_ISR+0x266>
     d18:	9e 87       	std	Y+14, r25	; 0x0e
     d1a:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     d1c:	00 00       	nop
	_delay_ms(50);
}
     d1e:	00 00       	nop
     d20:	cc 5b       	subi	r28, 0xBC	; 188
     d22:	df 4f       	sbci	r29, 0xFF	; 255
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	08 95       	ret

00000d34 <INT1_ISR>:
void INT1_ISR()
{
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	c4 54       	subi	r28, 0x44	; 68
     d3e:	d1 09       	sbc	r29, r1
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN7,DIO_u8PIN_HIGH);
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	67 e0       	ldi	r22, 0x07	; 7
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a8 e4       	ldi	r26, 0x48	; 72
     d5a:	b2 e4       	ldi	r27, 0x42	; 66
     d5c:	8f 87       	std	Y+15, r24	; 0x0f
     d5e:	98 8b       	std	Y+16, r25	; 0x10
     d60:	a9 8b       	std	Y+17, r26	; 0x11
     d62:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a ef       	ldi	r20, 0xFA	; 250
     d6a:	54 e4       	ldi	r21, 0x44	; 68
     d6c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d6e:	78 89       	ldd	r23, Y+16	; 0x10
     d70:	89 89       	ldd	r24, Y+17	; 0x11
     d72:	9a 89       	ldd	r25, Y+18	; 0x12
     d74:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     d78:	6d a3       	std	Y+37, r22	; 0x25
     d7a:	7e a3       	std	Y+38, r23	; 0x26
     d7c:	8f a3       	std	Y+39, r24	; 0x27
     d7e:	98 a7       	std	Y+40, r25	; 0x28
     d80:	8d a1       	ldd	r24, Y+37	; 0x25
     d82:	9e a1       	ldd	r25, Y+38	; 0x26
     d84:	af a1       	ldd	r26, Y+39	; 0x27
     d86:	b8 a5       	ldd	r27, Y+40	; 0x28
     d88:	8b 8b       	std	Y+19, r24	; 0x13
     d8a:	9c 8b       	std	Y+20, r25	; 0x14
     d8c:	ad 8b       	std	Y+21, r26	; 0x15
     d8e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	6b 89       	ldd	r22, Y+19	; 0x13
     d9a:	7c 89       	ldd	r23, Y+20	; 0x14
     d9c:	8d 89       	ldd	r24, Y+21	; 0x15
     d9e:	9e 89       	ldd	r25, Y+22	; 0x16
     da0:	0e 94 dd 07 	call	0xfba	; 0xfba <__cmpsf2>
     da4:	88 23       	and	r24, r24
     da6:	2c f4       	brge	.+10     	; 0xdb2 <INT1_ISR+0x7e>
		__ticks = 1;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	98 8f       	std	Y+24, r25	; 0x18
     dae:	8f 8b       	std	Y+23, r24	; 0x17
     db0:	54 c0       	rjmp	.+168    	; 0xe5a <INT1_ISR+0x126>
	else if (__tmp > 65535)
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	6b 89       	ldd	r22, Y+19	; 0x13
     dbc:	7c 89       	ldd	r23, Y+20	; 0x14
     dbe:	8d 89       	ldd	r24, Y+21	; 0x15
     dc0:	9e 89       	ldd	r25, Y+22	; 0x16
     dc2:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__gesf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	d4 f5       	brge	.+116    	; 0xe3e <INT1_ISR+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	6f 85       	ldd	r22, Y+15	; 0x0f
     dd4:	78 89       	ldd	r23, Y+16	; 0x10
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     dde:	69 a7       	std	Y+41, r22	; 0x29
     de0:	7a a7       	std	Y+42, r23	; 0x2a
     de2:	8b a7       	std	Y+43, r24	; 0x2b
     de4:	9c a7       	std	Y+44, r25	; 0x2c
     de6:	89 a5       	ldd	r24, Y+41	; 0x29
     de8:	9a a5       	ldd	r25, Y+42	; 0x2a
     dea:	ab a5       	ldd	r26, Y+43	; 0x2b
     dec:	bc a5       	ldd	r27, Y+44	; 0x2c
     dee:	89 a3       	std	Y+33, r24	; 0x21
     df0:	9a a3       	std	Y+34, r25	; 0x22
     df2:	ab a3       	std	Y+35, r26	; 0x23
     df4:	bc a3       	std	Y+36, r27	; 0x24
     df6:	69 a1       	ldd	r22, Y+33	; 0x21
     df8:	7a a1       	ldd	r23, Y+34	; 0x22
     dfa:	8b a1       	ldd	r24, Y+35	; 0x23
     dfc:	9c a1       	ldd	r25, Y+36	; 0x24
     dfe:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     e02:	6d a7       	std	Y+45, r22	; 0x2d
     e04:	7e a7       	std	Y+46, r23	; 0x2e
     e06:	8f a7       	std	Y+47, r24	; 0x2f
     e08:	98 ab       	std	Y+48, r25	; 0x30
     e0a:	ad a5       	ldd	r26, Y+45	; 0x2d
     e0c:	be a5       	ldd	r27, Y+46	; 0x2e
     e0e:	b8 8f       	std	Y+24, r27	; 0x18
     e10:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     e12:	10 c0       	rjmp	.+32     	; 0xe34 <INT1_ISR+0x100>
     e14:	88 ec       	ldi	r24, 0xC8	; 200
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9a 8f       	std	Y+26, r25	; 0x1a
     e1a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e1c:	89 8d       	ldd	r24, Y+25	; 0x19
     e1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <INT1_ISR+0xec>
     e24:	9a 8f       	std	Y+26, r25	; 0x1a
     e26:	89 8f       	std	Y+25, r24	; 0x19
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     e28:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	8f 89       	ldd	r24, Y+23	; 0x17
     e2c:	98 8d       	ldd	r25, Y+24	; 0x18
     e2e:	01 97       	sbiw	r24, 0x01	; 1
     e30:	98 8f       	std	Y+24, r25	; 0x18
     e32:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e34:	8f 89       	ldd	r24, Y+23	; 0x17
     e36:	98 8d       	ldd	r25, Y+24	; 0x18
     e38:	89 2b       	or	r24, r25
     e3a:	61 f7       	brne	.-40     	; 0xe14 <INT1_ISR+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     e3c:	19 c0       	rjmp	.+50     	; 0xe70 <INT1_ISR+0x13c>
	}
	else
		__ticks = (uint16_t)__tmp;
     e3e:	6b 89       	ldd	r22, Y+19	; 0x13
     e40:	7c 89       	ldd	r23, Y+20	; 0x14
     e42:	8d 89       	ldd	r24, Y+21	; 0x15
     e44:	9e 89       	ldd	r25, Y+22	; 0x16
     e46:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     e4a:	69 ab       	std	Y+49, r22	; 0x31
     e4c:	7a ab       	std	Y+50, r23	; 0x32
     e4e:	8b ab       	std	Y+51, r24	; 0x33
     e50:	9c ab       	std	Y+52, r25	; 0x34
     e52:	89 a9       	ldd	r24, Y+49	; 0x31
     e54:	9a a9       	ldd	r25, Y+50	; 0x32
     e56:	98 8f       	std	Y+24, r25	; 0x18
     e58:	8f 8b       	std	Y+23, r24	; 0x17
     e5a:	8f 89       	ldd	r24, Y+23	; 0x17
     e5c:	98 8d       	ldd	r25, Y+24	; 0x18
     e5e:	9c 8f       	std	Y+28, r25	; 0x1c
     e60:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <INT1_ISR+0x132>
     e6a:	9c 8f       	std	Y+28, r25	; 0x1c
     e6c:	8b 8f       	std	Y+27, r24	; 0x1b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     e6e:	00 00       	nop
	_delay_ms(50);
	DIO_u8SetPinValue(DIO_u8PORTB,DIO_u8PIN7,DIO_u8PIN_LOW);
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	67 e0       	ldi	r22, 0x07	; 7
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a8 e4       	ldi	r26, 0x48	; 72
     e80:	b2 e4       	ldi	r27, 0x42	; 66
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	ab 83       	std	Y+3, r26	; 0x03
     e88:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	4a ef       	ldi	r20, 0xFA	; 250
     e90:	54 e4       	ldi	r21, 0x44	; 68
     e92:	69 81       	ldd	r22, Y+1	; 0x01
     e94:	7a 81       	ldd	r23, Y+2	; 0x02
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     e9e:	6d ab       	std	Y+53, r22	; 0x35
     ea0:	7e ab       	std	Y+54, r23	; 0x36
     ea2:	8f ab       	std	Y+55, r24	; 0x37
     ea4:	98 af       	std	Y+56, r25	; 0x38
     ea6:	8d a9       	ldd	r24, Y+53	; 0x35
     ea8:	9e a9       	ldd	r25, Y+54	; 0x36
     eaa:	af a9       	ldd	r26, Y+55	; 0x37
     eac:	b8 ad       	ldd	r27, Y+56	; 0x38
     eae:	8d 83       	std	Y+5, r24	; 0x05
     eb0:	9e 83       	std	Y+6, r25	; 0x06
     eb2:	af 83       	std	Y+7, r26	; 0x07
     eb4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	6d 81       	ldd	r22, Y+5	; 0x05
     ec0:	7e 81       	ldd	r23, Y+6	; 0x06
     ec2:	8f 81       	ldd	r24, Y+7	; 0x07
     ec4:	98 85       	ldd	r25, Y+8	; 0x08
     ec6:	0e 94 dd 07 	call	0xfba	; 0xfba <__cmpsf2>
     eca:	88 23       	and	r24, r24
     ecc:	2c f4       	brge	.+10     	; 0xed8 <INT1_ISR+0x1a4>
		__ticks = 1;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	9a 87       	std	Y+10, r25	; 0x0a
     ed4:	89 87       	std	Y+9, r24	; 0x09
     ed6:	5b c0       	rjmp	.+182    	; 0xf8e <INT1_ISR+0x25a>
	else if (__tmp > 65535)
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	6d 81       	ldd	r22, Y+5	; 0x05
     ee2:	7e 81       	ldd	r23, Y+6	; 0x06
     ee4:	8f 81       	ldd	r24, Y+7	; 0x07
     ee6:	98 85       	ldd	r25, Y+8	; 0x08
     ee8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__gesf2>
     eec:	18 16       	cp	r1, r24
     eee:	0c f0       	brlt	.+2      	; 0xef2 <INT1_ISR+0x1be>
     ef0:	3c c0       	rjmp	.+120    	; 0xf6a <INT1_ISR+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	69 81       	ldd	r22, Y+1	; 0x01
     efc:	7a 81       	ldd	r23, Y+2	; 0x02
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsf3>
     f06:	69 af       	std	Y+57, r22	; 0x39
     f08:	7a af       	std	Y+58, r23	; 0x3a
     f0a:	8b af       	std	Y+59, r24	; 0x3b
     f0c:	9c af       	std	Y+60, r25	; 0x3c
     f0e:	89 ad       	ldd	r24, Y+57	; 0x39
     f10:	9a ad       	ldd	r25, Y+58	; 0x3a
     f12:	ab ad       	ldd	r26, Y+59	; 0x3b
     f14:	bc ad       	ldd	r27, Y+60	; 0x3c
     f16:	8d 8f       	std	Y+29, r24	; 0x1d
     f18:	9e 8f       	std	Y+30, r25	; 0x1e
     f1a:	af 8f       	std	Y+31, r26	; 0x1f
     f1c:	b8 a3       	std	Y+32, r27	; 0x20
     f1e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f20:	7e 8d       	ldd	r23, Y+30	; 0x1e
     f22:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f24:	98 a1       	ldd	r25, Y+32	; 0x20
     f26:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     f2a:	21 96       	adiw	r28, 0x01	; 1
     f2c:	6c af       	std	Y+60, r22	; 0x3c
     f2e:	7d af       	std	Y+61, r23	; 0x3d
     f30:	8e af       	std	Y+62, r24	; 0x3e
     f32:	9f af       	std	Y+63, r25	; 0x3f
     f34:	21 97       	sbiw	r28, 0x01	; 1
     f36:	ad ad       	ldd	r26, Y+61	; 0x3d
     f38:	be ad       	ldd	r27, Y+62	; 0x3e
     f3a:	ba 87       	std	Y+10, r27	; 0x0a
     f3c:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     f3e:	10 c0       	rjmp	.+32     	; 0xf60 <INT1_ISR+0x22c>
     f40:	88 ec       	ldi	r24, 0xC8	; 200
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9c 87       	std	Y+12, r25	; 0x0c
     f46:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f48:	8b 85       	ldd	r24, Y+11	; 0x0b
     f4a:	9c 85       	ldd	r25, Y+12	; 0x0c
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <INT1_ISR+0x218>
     f50:	9c 87       	std	Y+12, r25	; 0x0c
     f52:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     f54:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f56:	89 85       	ldd	r24, Y+9	; 0x09
     f58:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	9a 87       	std	Y+10, r25	; 0x0a
     f5e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f60:	89 85       	ldd	r24, Y+9	; 0x09
     f62:	9a 85       	ldd	r25, Y+10	; 0x0a
     f64:	89 2b       	or	r24, r25
     f66:	61 f7       	brne	.-40     	; 0xf40 <INT1_ISR+0x20c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
		}
		return;
     f68:	1d c0       	rjmp	.+58     	; 0xfa4 <INT1_ISR+0x270>
	}
	else
		__ticks = (uint16_t)__tmp;
     f6a:	6d 81       	ldd	r22, Y+5	; 0x05
     f6c:	7e 81       	ldd	r23, Y+6	; 0x06
     f6e:	8f 81       	ldd	r24, Y+7	; 0x07
     f70:	98 85       	ldd	r25, Y+8	; 0x08
     f72:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <__fixunssfsi>
     f76:	25 96       	adiw	r28, 0x05	; 5
     f78:	6c af       	std	Y+60, r22	; 0x3c
     f7a:	7d af       	std	Y+61, r23	; 0x3d
     f7c:	8e af       	std	Y+62, r24	; 0x3e
     f7e:	9f af       	std	Y+63, r25	; 0x3f
     f80:	25 97       	sbiw	r28, 0x05	; 5
     f82:	23 96       	adiw	r28, 0x03	; 3
     f84:	8e ad       	ldd	r24, Y+62	; 0x3e
     f86:	9f ad       	ldd	r25, Y+63	; 0x3f
     f88:	23 97       	sbiw	r28, 0x03	; 3
     f8a:	9a 87       	std	Y+10, r25	; 0x0a
     f8c:	89 87       	std	Y+9, r24	; 0x09
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	9e 87       	std	Y+14, r25	; 0x0e
     f94:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <INT1_ISR+0x266>
     f9e:	9e 87       	std	Y+14, r25	; 0x0e
     fa0:	8d 87       	std	Y+13, r24	; 0x0d
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     fa2:	00 00       	nop
	_delay_ms(50);
}
     fa4:	00 00       	nop
     fa6:	cc 5b       	subi	r28, 0xBC	; 188
     fa8:	df 4f       	sbci	r29, 0xFF	; 255
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <__cmpsf2>:
     fba:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_cmp>
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <__cmpsf2+0x8>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	08 95       	ret

00000fc4 <__fixunssfsi>:
     fc4:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_splitA>
     fc8:	88 f0       	brcs	.+34     	; 0xfec <__fixunssfsi+0x28>
     fca:	9f 57       	subi	r25, 0x7F	; 127
     fcc:	98 f0       	brcs	.+38     	; 0xff4 <__fixunssfsi+0x30>
     fce:	b9 2f       	mov	r27, r25
     fd0:	99 27       	eor	r25, r25
     fd2:	b7 51       	subi	r27, 0x17	; 23
     fd4:	b0 f0       	brcs	.+44     	; 0x1002 <__fixunssfsi+0x3e>
     fd6:	e1 f0       	breq	.+56     	; 0x1010 <__fixunssfsi+0x4c>
     fd8:	66 0f       	add	r22, r22
     fda:	77 1f       	adc	r23, r23
     fdc:	88 1f       	adc	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	1a f0       	brmi	.+6      	; 0xfe8 <__fixunssfsi+0x24>
     fe2:	ba 95       	dec	r27
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__fixunssfsi+0x14>
     fe6:	14 c0       	rjmp	.+40     	; 0x1010 <__fixunssfsi+0x4c>
     fe8:	b1 30       	cpi	r27, 0x01	; 1
     fea:	91 f0       	breq	.+36     	; 0x1010 <__fixunssfsi+0x4c>
     fec:	0e 94 57 08 	call	0x10ae	; 0x10ae <__fp_zero>
     ff0:	b1 e0       	ldi	r27, 0x01	; 1
     ff2:	08 95       	ret
     ff4:	0c 94 57 08 	jmp	0x10ae	; 0x10ae <__fp_zero>
     ff8:	67 2f       	mov	r22, r23
     ffa:	78 2f       	mov	r23, r24
     ffc:	88 27       	eor	r24, r24
     ffe:	b8 5f       	subi	r27, 0xF8	; 248
    1000:	39 f0       	breq	.+14     	; 0x1010 <__fixunssfsi+0x4c>
    1002:	b9 3f       	cpi	r27, 0xF9	; 249
    1004:	cc f3       	brlt	.-14     	; 0xff8 <__fixunssfsi+0x34>
    1006:	86 95       	lsr	r24
    1008:	77 95       	ror	r23
    100a:	67 95       	ror	r22
    100c:	b3 95       	inc	r27
    100e:	d9 f7       	brne	.-10     	; 0x1006 <__fixunssfsi+0x42>
    1010:	3e f4       	brtc	.+14     	; 0x1020 <__fixunssfsi+0x5c>
    1012:	90 95       	com	r25
    1014:	80 95       	com	r24
    1016:	70 95       	com	r23
    1018:	61 95       	neg	r22
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8f 4f       	sbci	r24, 0xFF	; 255
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	08 95       	ret

00001022 <__fp_cmp>:
    1022:	99 0f       	add	r25, r25
    1024:	00 08       	sbc	r0, r0
    1026:	55 0f       	add	r21, r21
    1028:	aa 0b       	sbc	r26, r26
    102a:	e0 e8       	ldi	r30, 0x80	; 128
    102c:	fe ef       	ldi	r31, 0xFE	; 254
    102e:	16 16       	cp	r1, r22
    1030:	17 06       	cpc	r1, r23
    1032:	e8 07       	cpc	r30, r24
    1034:	f9 07       	cpc	r31, r25
    1036:	c0 f0       	brcs	.+48     	; 0x1068 <__fp_cmp+0x46>
    1038:	12 16       	cp	r1, r18
    103a:	13 06       	cpc	r1, r19
    103c:	e4 07       	cpc	r30, r20
    103e:	f5 07       	cpc	r31, r21
    1040:	98 f0       	brcs	.+38     	; 0x1068 <__fp_cmp+0x46>
    1042:	62 1b       	sub	r22, r18
    1044:	73 0b       	sbc	r23, r19
    1046:	84 0b       	sbc	r24, r20
    1048:	95 0b       	sbc	r25, r21
    104a:	39 f4       	brne	.+14     	; 0x105a <__fp_cmp+0x38>
    104c:	0a 26       	eor	r0, r26
    104e:	61 f0       	breq	.+24     	; 0x1068 <__fp_cmp+0x46>
    1050:	23 2b       	or	r18, r19
    1052:	24 2b       	or	r18, r20
    1054:	25 2b       	or	r18, r21
    1056:	21 f4       	brne	.+8      	; 0x1060 <__fp_cmp+0x3e>
    1058:	08 95       	ret
    105a:	0a 26       	eor	r0, r26
    105c:	09 f4       	brne	.+2      	; 0x1060 <__fp_cmp+0x3e>
    105e:	a1 40       	sbci	r26, 0x01	; 1
    1060:	a6 95       	lsr	r26
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	81 1d       	adc	r24, r1
    1066:	81 1d       	adc	r24, r1
    1068:	08 95       	ret

0000106a <__fp_split3>:
    106a:	57 fd       	sbrc	r21, 7
    106c:	90 58       	subi	r25, 0x80	; 128
    106e:	44 0f       	add	r20, r20
    1070:	55 1f       	adc	r21, r21
    1072:	59 f0       	breq	.+22     	; 0x108a <__fp_splitA+0x10>
    1074:	5f 3f       	cpi	r21, 0xFF	; 255
    1076:	71 f0       	breq	.+28     	; 0x1094 <__fp_splitA+0x1a>
    1078:	47 95       	ror	r20

0000107a <__fp_splitA>:
    107a:	88 0f       	add	r24, r24
    107c:	97 fb       	bst	r25, 7
    107e:	99 1f       	adc	r25, r25
    1080:	61 f0       	breq	.+24     	; 0x109a <__fp_splitA+0x20>
    1082:	9f 3f       	cpi	r25, 0xFF	; 255
    1084:	79 f0       	breq	.+30     	; 0x10a4 <__fp_splitA+0x2a>
    1086:	87 95       	ror	r24
    1088:	08 95       	ret
    108a:	12 16       	cp	r1, r18
    108c:	13 06       	cpc	r1, r19
    108e:	14 06       	cpc	r1, r20
    1090:	55 1f       	adc	r21, r21
    1092:	f2 cf       	rjmp	.-28     	; 0x1078 <__fp_split3+0xe>
    1094:	46 95       	lsr	r20
    1096:	f1 df       	rcall	.-30     	; 0x107a <__fp_splitA>
    1098:	08 c0       	rjmp	.+16     	; 0x10aa <__fp_splitA+0x30>
    109a:	16 16       	cp	r1, r22
    109c:	17 06       	cpc	r1, r23
    109e:	18 06       	cpc	r1, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	f1 cf       	rjmp	.-30     	; 0x1086 <__fp_splitA+0xc>
    10a4:	86 95       	lsr	r24
    10a6:	71 05       	cpc	r23, r1
    10a8:	61 05       	cpc	r22, r1
    10aa:	08 94       	sec
    10ac:	08 95       	ret

000010ae <__fp_zero>:
    10ae:	e8 94       	clt

000010b0 <__fp_szero>:
    10b0:	bb 27       	eor	r27, r27
    10b2:	66 27       	eor	r22, r22
    10b4:	77 27       	eor	r23, r23
    10b6:	cb 01       	movw	r24, r22
    10b8:	97 f9       	bld	r25, 7
    10ba:	08 95       	ret

000010bc <__gesf2>:
    10bc:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_cmp>
    10c0:	08 f4       	brcc	.+2      	; 0x10c4 <__gesf2+0x8>
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	08 95       	ret

000010c6 <__mulsf3>:
    10c6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3x>
    10ca:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__fp_round>
    10ce:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <__fp_pscA>
    10d2:	38 f0       	brcs	.+14     	; 0x10e2 <__mulsf3+0x1c>
    10d4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <__fp_pscB>
    10d8:	20 f0       	brcs	.+8      	; 0x10e2 <__mulsf3+0x1c>
    10da:	95 23       	and	r25, r21
    10dc:	11 f0       	breq	.+4      	; 0x10e2 <__mulsf3+0x1c>
    10de:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__fp_inf>
    10e2:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__fp_nan>
    10e6:	11 24       	eor	r1, r1
    10e8:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_szero>

000010ec <__mulsf3x>:
    10ec:	0e 94 35 08 	call	0x106a	; 0x106a <__fp_split3>
    10f0:	70 f3       	brcs	.-36     	; 0x10ce <__mulsf3+0x8>

000010f2 <__mulsf3_pse>:
    10f2:	95 9f       	mul	r25, r21
    10f4:	c1 f3       	breq	.-16     	; 0x10e6 <__mulsf3+0x20>
    10f6:	95 0f       	add	r25, r21
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	55 1f       	adc	r21, r21
    10fc:	62 9f       	mul	r22, r18
    10fe:	f0 01       	movw	r30, r0
    1100:	72 9f       	mul	r23, r18
    1102:	bb 27       	eor	r27, r27
    1104:	f0 0d       	add	r31, r0
    1106:	b1 1d       	adc	r27, r1
    1108:	63 9f       	mul	r22, r19
    110a:	aa 27       	eor	r26, r26
    110c:	f0 0d       	add	r31, r0
    110e:	b1 1d       	adc	r27, r1
    1110:	aa 1f       	adc	r26, r26
    1112:	64 9f       	mul	r22, r20
    1114:	66 27       	eor	r22, r22
    1116:	b0 0d       	add	r27, r0
    1118:	a1 1d       	adc	r26, r1
    111a:	66 1f       	adc	r22, r22
    111c:	82 9f       	mul	r24, r18
    111e:	22 27       	eor	r18, r18
    1120:	b0 0d       	add	r27, r0
    1122:	a1 1d       	adc	r26, r1
    1124:	62 1f       	adc	r22, r18
    1126:	73 9f       	mul	r23, r19
    1128:	b0 0d       	add	r27, r0
    112a:	a1 1d       	adc	r26, r1
    112c:	62 1f       	adc	r22, r18
    112e:	83 9f       	mul	r24, r19
    1130:	a0 0d       	add	r26, r0
    1132:	61 1d       	adc	r22, r1
    1134:	22 1f       	adc	r18, r18
    1136:	74 9f       	mul	r23, r20
    1138:	33 27       	eor	r19, r19
    113a:	a0 0d       	add	r26, r0
    113c:	61 1d       	adc	r22, r1
    113e:	23 1f       	adc	r18, r19
    1140:	84 9f       	mul	r24, r20
    1142:	60 0d       	add	r22, r0
    1144:	21 1d       	adc	r18, r1
    1146:	82 2f       	mov	r24, r18
    1148:	76 2f       	mov	r23, r22
    114a:	6a 2f       	mov	r22, r26
    114c:	11 24       	eor	r1, r1
    114e:	9f 57       	subi	r25, 0x7F	; 127
    1150:	50 40       	sbci	r21, 0x00	; 0
    1152:	9a f0       	brmi	.+38     	; 0x117a <__mulsf3_pse+0x88>
    1154:	f1 f0       	breq	.+60     	; 0x1192 <__mulsf3_pse+0xa0>
    1156:	88 23       	and	r24, r24
    1158:	4a f0       	brmi	.+18     	; 0x116c <__mulsf3_pse+0x7a>
    115a:	ee 0f       	add	r30, r30
    115c:	ff 1f       	adc	r31, r31
    115e:	bb 1f       	adc	r27, r27
    1160:	66 1f       	adc	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	91 50       	subi	r25, 0x01	; 1
    1168:	50 40       	sbci	r21, 0x00	; 0
    116a:	a9 f7       	brne	.-22     	; 0x1156 <__mulsf3_pse+0x64>
    116c:	9e 3f       	cpi	r25, 0xFE	; 254
    116e:	51 05       	cpc	r21, r1
    1170:	80 f0       	brcs	.+32     	; 0x1192 <__mulsf3_pse+0xa0>
    1172:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__fp_inf>
    1176:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__fp_szero>
    117a:	5f 3f       	cpi	r21, 0xFF	; 255
    117c:	e4 f3       	brlt	.-8      	; 0x1176 <__mulsf3_pse+0x84>
    117e:	98 3e       	cpi	r25, 0xE8	; 232
    1180:	d4 f3       	brlt	.-12     	; 0x1176 <__mulsf3_pse+0x84>
    1182:	86 95       	lsr	r24
    1184:	77 95       	ror	r23
    1186:	67 95       	ror	r22
    1188:	b7 95       	ror	r27
    118a:	f7 95       	ror	r31
    118c:	e7 95       	ror	r30
    118e:	9f 5f       	subi	r25, 0xFF	; 255
    1190:	c1 f7       	brne	.-16     	; 0x1182 <__mulsf3_pse+0x90>
    1192:	fe 2b       	or	r31, r30
    1194:	88 0f       	add	r24, r24
    1196:	91 1d       	adc	r25, r1
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	97 f9       	bld	r25, 7
    119e:	08 95       	ret

000011a0 <__fp_inf>:
    11a0:	97 f9       	bld	r25, 7
    11a2:	9f 67       	ori	r25, 0x7F	; 127
    11a4:	80 e8       	ldi	r24, 0x80	; 128
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	08 95       	ret

000011ac <__fp_nan>:
    11ac:	9f ef       	ldi	r25, 0xFF	; 255
    11ae:	80 ec       	ldi	r24, 0xC0	; 192
    11b0:	08 95       	ret

000011b2 <__fp_pscA>:
    11b2:	00 24       	eor	r0, r0
    11b4:	0a 94       	dec	r0
    11b6:	16 16       	cp	r1, r22
    11b8:	17 06       	cpc	r1, r23
    11ba:	18 06       	cpc	r1, r24
    11bc:	09 06       	cpc	r0, r25
    11be:	08 95       	ret

000011c0 <__fp_pscB>:
    11c0:	00 24       	eor	r0, r0
    11c2:	0a 94       	dec	r0
    11c4:	12 16       	cp	r1, r18
    11c6:	13 06       	cpc	r1, r19
    11c8:	14 06       	cpc	r1, r20
    11ca:	05 06       	cpc	r0, r21
    11cc:	08 95       	ret

000011ce <__fp_round>:
    11ce:	09 2e       	mov	r0, r25
    11d0:	03 94       	inc	r0
    11d2:	00 0c       	add	r0, r0
    11d4:	11 f4       	brne	.+4      	; 0x11da <__fp_round+0xc>
    11d6:	88 23       	and	r24, r24
    11d8:	52 f0       	brmi	.+20     	; 0x11ee <__fp_round+0x20>
    11da:	bb 0f       	add	r27, r27
    11dc:	40 f4       	brcc	.+16     	; 0x11ee <__fp_round+0x20>
    11de:	bf 2b       	or	r27, r31
    11e0:	11 f4       	brne	.+4      	; 0x11e6 <__fp_round+0x18>
    11e2:	60 ff       	sbrs	r22, 0
    11e4:	04 c0       	rjmp	.+8      	; 0x11ee <__fp_round+0x20>
    11e6:	6f 5f       	subi	r22, 0xFF	; 255
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	8f 4f       	sbci	r24, 0xFF	; 255
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	08 95       	ret

000011f0 <_exit>:
    11f0:	f8 94       	cli

000011f2 <__stop_program>:
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <__stop_program>
