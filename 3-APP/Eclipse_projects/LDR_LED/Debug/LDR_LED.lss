
LDR_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005a2  00000616  2**0
                  ALLOC, LOAD, DATA
  2 .stab         00001194  00000000  00000000  00000618  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009c6  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00002172  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  000021c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000050c  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004b7  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000007e  00000000  00000000  00002ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001f4  00000000  00000000  00002c21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  64:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:
#include"ADC_config.h"
#include"ADC_register.h"
#include"ADC_private.h"

void ADC_voidInit(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADMUX,ADMUX_REFS0);
	CLR_BIT(ADMUX,ADMUX_REFS1);

#elif ADC_REFERENCE_VOLTAGE==AVCC

	SET_BIT(ADMUX,ADMUX_REFS0);
  74:	87 e2       	ldi	r24, 0x27	; 39
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	fc 01       	movw	r30, r24
  7a:	20 81       	ld	r18, Z
  7c:	87 e2       	ldi	r24, 0x27	; 39
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	20 64       	ori	r18, 0x40	; 64
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	CLR_BIT(ADMUX,ADMUX_REFS1);
  86:	87 e2       	ldi	r24, 0x27	; 39
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	fc 01       	movw	r30, r24
  8c:	20 81       	ld	r18, Z
  8e:	87 e2       	ldi	r24, 0x27	; 39
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	2f 77       	andi	r18, 0x7F	; 127
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
#endif

	/*set the adjust result left adjust 8bit resolution right adjust 10bit resolution*/
#if ADC_ADJUST_RESULT==LEFT_ADJUST_RESULT

	SET_BIT(ADMUX,ADMUX_ADLAR);
  98:	87 e2       	ldi	r24, 0x27	; 39
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	fc 01       	movw	r30, r24
  9e:	20 81       	ld	r18, Z
  a0:	87 e2       	ldi	r24, 0x27	; 39
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	20 62       	ori	r18, 0x20	; 32
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
#else
#error "Wrong Adjust Result "
#endif

	/*Set prescaler(Bit Masking) */
	ADCSRA &=ADC_PRESCALER_MASK;
  aa:	86 e2       	ldi	r24, 0x26	; 38
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	20 81       	ld	r18, Z
  b2:	86 e2       	ldi	r24, 0x26	; 38
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	28 7f       	andi	r18, 0xF8	; 248
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	ADCSRA |=ADC_PRESCALER_SELECT;
  bc:	86 e2       	ldi	r24, 0x26	; 38
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	20 81       	ld	r18, Z
  c4:	86 e2       	ldi	r24, 0x26	; 38
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	26 60       	ori	r18, 0x06	; 6
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18

	/*Enable peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  ce:	86 e2       	ldi	r24, 0x26	; 38
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	20 81       	ld	r18, Z
  d6:	86 e2       	ldi	r24, 0x26	; 38
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	20 68       	ori	r18, 0x80	; 128
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
}
  e0:	00 00       	nop
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <ADC_u8GetChannelReading>:

u16 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	00 d0       	rcall	.+0      	; 0xee <ADC_u8GetChannelReading+0x6>
  ee:	0f 92       	push	r0
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u8ADCReading;
	/*Clear the MUX bits in ADMUX register*/
	ADMUX &=ADC_MULTIPLEXER_MASK;
  f6:	87 e2       	ldi	r24, 0x27	; 39
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	20 81       	ld	r18, Z
  fe:	87 e2       	ldi	r24, 0x27	; 39
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	20 7e       	andi	r18, 0xE0	; 224
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	/*set the required channel into the MUX bits*/
	ADMUX |=Copy_u8Channel;
 108:	87 e2       	ldi	r24, 0x27	; 39
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	fc 01       	movw	r30, r24
 10e:	30 81       	ld	r19, Z
 110:	87 e2       	ldi	r24, 0x27	; 39
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2b 81       	ldd	r18, Y+3	; 0x03
 116:	23 2b       	or	r18, r19
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18

	/*start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
 11c:	86 e2       	ldi	r24, 0x26	; 38
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	20 81       	ld	r18, Z
 124:	86 e2       	ldi	r24, 0x26	; 38
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	20 64       	ori	r18, 0x40	; 64
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18

/*set conversion mode: single conversion or auto trigger*/
#if ADC_TRIGGER_MODE==DISABLE

	/*Polling (busy waiting) until the conversion complete flag is set*/
	while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
 12e:	00 00       	nop
 130:	86 e2       	ldi	r24, 0x26	; 38
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	80 81       	ld	r24, Z
 138:	82 95       	swap	r24
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	81 70       	andi	r24, 0x01	; 1
 142:	99 27       	eor	r25, r25
 144:	89 2b       	or	r24, r25
 146:	a1 f3       	breq	.-24     	; 0x130 <ADC_u8GetChannelReading+0x48>

	/*clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
 148:	86 e2       	ldi	r24, 0x26	; 38
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z
 150:	86 e2       	ldi	r24, 0x26	; 38
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	20 61       	ori	r18, 0x10	; 16
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
#error "Wrong Auto Trigger Mode Configuration"
#endif

	/*Return the reading*/
#if ADC_RESOLUTION == EIGHT_BIT_RESOLUTION
	Local_u8ADCReading=ADCH;
 15a:	85 e2       	ldi	r24, 0x25	; 37
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	fc 01       	movw	r30, r24
 160:	80 81       	ld	r24, Z
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	89 83       	std	Y+1, r24	; 0x01
			return Local_u8ADCReading;
 16a:	89 81       	ldd	r24, Y+1	; 0x01
 16c:	9a 81       	ldd	r25, Y+2	; 0x02
	return Local_u8ADCReading;

#else
#error "Wrong Resolution Selection"
#endif
}
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <DIO_u8SetPinValue>:
#include"DIO_private.h"



u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	00 d0       	rcall	.+0      	; 0x180 <DIO_u8SetPinValue+0x6>
 180:	00 d0       	rcall	.+0      	; 0x182 <DIO_u8SetPinValue+0x8>
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	8a 83       	std	Y+2, r24	; 0x02
 188:	6b 83       	std	Y+3, r22	; 0x03
 18a:	4c 83       	std	Y+4, r20	; 0x04

u8 Local_u8ErrorState=0;
 18c:	19 82       	std	Y+1, r1	; 0x01

if(Copy_u8Pin<=DIO_u8PIN7)
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	88 30       	cpi	r24, 0x08	; 8
 192:	08 f0       	brcs	.+2      	; 0x196 <DIO_u8SetPinValue+0x1c>
 194:	f1 c0       	rjmp	.+482    	; 0x378 <DIO_u8SetPinValue+0x1fe>
{
	if(Copy_u8Value==DIO_u8PIN_HIGH)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinValue+0x24>
 19c:	71 c0       	rjmp	.+226    	; 0x280 <DIO_u8SetPinValue+0x106>
		{
		switch(Copy_u8Port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 05       	cpc	r25, r1
 1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_u8SetPinValue+0x32>
 1aa:	52 c0       	rjmp	.+164    	; 0x250 <DIO_u8SetPinValue+0xd6>
 1ac:	85 30       	cpi	r24, 0x05	; 5
 1ae:	91 05       	cpc	r25, r1
 1b0:	0c f0       	brlt	.+2      	; 0x1b4 <DIO_u8SetPinValue+0x3a>
 1b2:	64 c0       	rjmp	.+200    	; 0x27c <DIO_u8SetPinValue+0x102>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	91 05       	cpc	r25, r1
 1b8:	a9 f1       	breq	.+106    	; 0x224 <DIO_u8SetPinValue+0xaa>
 1ba:	84 30       	cpi	r24, 0x04	; 4
 1bc:	91 05       	cpc	r25, r1
 1be:	0c f0       	brlt	.+2      	; 0x1c2 <DIO_u8SetPinValue+0x48>
 1c0:	5d c0       	rjmp	.+186    	; 0x27c <DIO_u8SetPinValue+0x102>
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	19 f0       	breq	.+6      	; 0x1cc <DIO_u8SetPinValue+0x52>
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	b9 f0       	breq	.+46     	; 0x1f8 <DIO_u8SetPinValue+0x7e>
 1ca:	58 c0       	rjmp	.+176    	; 0x27c <DIO_u8SetPinValue+0x102>
		{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin);break;
 1cc:	8b e3       	ldi	r24, 0x3B	; 59
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	fc 01       	movw	r30, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	48 2f       	mov	r20, r24
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_u8SetPinValue+0x6c>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	2a 95       	dec	r18
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_u8SetPinValue+0x68>
 1ea:	24 2f       	mov	r18, r20
 1ec:	28 2b       	or	r18, r24
 1ee:	8b e3       	ldi	r24, 0x3B	; 59
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
 1f6:	c2 c0       	rjmp	.+388    	; 0x37c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin);break;
 1f8:	88 e3       	ldi	r24, 0x38	; 56
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	48 2f       	mov	r20, r24
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_u8SetPinValue+0x98>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	2a 95       	dec	r18
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_u8SetPinValue+0x94>
 216:	24 2f       	mov	r18, r20
 218:	28 2b       	or	r18, r24
 21a:	88 e3       	ldi	r24, 0x38	; 56
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
 222:	ac c0       	rjmp	.+344    	; 0x37c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin);break;
 224:	85 e3       	ldi	r24, 0x35	; 53
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	48 2f       	mov	r20, r24
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_u8SetPinValue+0xc4>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	2a 95       	dec	r18
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_u8SetPinValue+0xc0>
 242:	24 2f       	mov	r18, r20
 244:	28 2b       	or	r18, r24
 246:	85 e3       	ldi	r24, 0x35	; 53
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
 24e:	96 c0       	rjmp	.+300    	; 0x37c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin);break;
 250:	82 e3       	ldi	r24, 0x32	; 50
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	80 81       	ld	r24, Z
 258:	48 2f       	mov	r20, r24
 25a:	8b 81       	ldd	r24, Y+3	; 0x03
 25c:	28 2f       	mov	r18, r24
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_u8SetPinValue+0xf0>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	2a 95       	dec	r18
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_u8SetPinValue+0xec>
 26e:	24 2f       	mov	r18, r20
 270:	28 2b       	or	r18, r24
 272:	82 e3       	ldi	r24, 0x32	; 50
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
 27a:	80 c0       	rjmp	.+256    	; 0x37c <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 27c:	19 82       	std	Y+1, r1	; 0x01
 27e:	7e c0       	rjmp	.+252    	; 0x37c <DIO_u8SetPinValue+0x202>
		}



		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	88 23       	and	r24, r24
 284:	09 f0       	breq	.+2      	; 0x288 <DIO_u8SetPinValue+0x10e>
 286:	75 c0       	rjmp	.+234    	; 0x372 <DIO_u8SetPinValue+0x1f8>
		{
			switch(Copy_u8Port)
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	91 05       	cpc	r25, r1
 292:	09 f4       	brne	.+2      	; 0x296 <DIO_u8SetPinValue+0x11c>
 294:	55 c0       	rjmp	.+170    	; 0x340 <DIO_u8SetPinValue+0x1c6>
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	91 05       	cpc	r25, r1
 29a:	0c f0       	brlt	.+2      	; 0x29e <DIO_u8SetPinValue+0x124>
 29c:	68 c0       	rjmp	.+208    	; 0x36e <DIO_u8SetPinValue+0x1f4>
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	b9 f1       	breq	.+110    	; 0x312 <DIO_u8SetPinValue+0x198>
 2a4:	84 30       	cpi	r24, 0x04	; 4
 2a6:	91 05       	cpc	r25, r1
 2a8:	0c f0       	brlt	.+2      	; 0x2ac <DIO_u8SetPinValue+0x132>
 2aa:	61 c0       	rjmp	.+194    	; 0x36e <DIO_u8SetPinValue+0x1f4>
 2ac:	00 97       	sbiw	r24, 0x00	; 0
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <DIO_u8SetPinValue+0x13c>
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	c1 f0       	breq	.+48     	; 0x2e4 <DIO_u8SetPinValue+0x16a>
 2b4:	5c c0       	rjmp	.+184    	; 0x36e <DIO_u8SetPinValue+0x1f4>
		{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin);break;
 2b6:	8b e3       	ldi	r24, 0x3B	; 59
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	fc 01       	movw	r30, r24
 2bc:	80 81       	ld	r24, Z
 2be:	48 2f       	mov	r20, r24
 2c0:	8b 81       	ldd	r24, Y+3	; 0x03
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_u8SetPinValue+0x156>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	2a 95       	dec	r18
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_u8SetPinValue+0x152>
 2d4:	80 95       	com	r24
 2d6:	24 2f       	mov	r18, r20
 2d8:	28 23       	and	r18, r24
 2da:	8b e3       	ldi	r24, 0x3B	; 59
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	4c c0       	rjmp	.+152    	; 0x37c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin);break;
 2e4:	88 e3       	ldi	r24, 0x38	; 56
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	fc 01       	movw	r30, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_u8SetPinValue+0x184>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	2a 95       	dec	r18
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_u8SetPinValue+0x180>
 302:	80 95       	com	r24
 304:	24 2f       	mov	r18, r20
 306:	28 23       	and	r18, r24
 308:	88 e3       	ldi	r24, 0x38	; 56
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
 310:	35 c0       	rjmp	.+106    	; 0x37c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin);break;
 312:	85 e3       	ldi	r24, 0x35	; 53
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	48 2f       	mov	r20, r24
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_u8SetPinValue+0x1b2>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	2a 95       	dec	r18
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_u8SetPinValue+0x1ae>
 330:	80 95       	com	r24
 332:	24 2f       	mov	r18, r20
 334:	28 23       	and	r18, r24
 336:	85 e3       	ldi	r24, 0x35	; 53
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
 33e:	1e c0       	rjmp	.+60     	; 0x37c <DIO_u8SetPinValue+0x202>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin);break;
 340:	82 e3       	ldi	r24, 0x32	; 50
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	48 2f       	mov	r20, r24
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	28 2f       	mov	r18, r24
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_u8SetPinValue+0x1e0>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	2a 95       	dec	r18
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_u8SetPinValue+0x1dc>
 35e:	80 95       	com	r24
 360:	24 2f       	mov	r18, r20
 362:	28 23       	and	r18, r24
 364:	82 e3       	ldi	r24, 0x32	; 50
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	fc 01       	movw	r30, r24
 36a:	20 83       	st	Z, r18
 36c:	07 c0       	rjmp	.+14     	; 0x37c <DIO_u8SetPinValue+0x202>
			default :Local_u8ErrorState=0;;break;
 36e:	19 82       	std	Y+1, r1	; 0x01
 370:	05 c0       	rjmp	.+10     	; 0x37c <DIO_u8SetPinValue+0x202>


		}
		else
		{
		Local_u8ErrorState=1;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	89 83       	std	Y+1, r24	; 0x01
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_u8SetPinValue+0x202>
		}


}
else{
	 Local_u8ErrorState=1;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	89 83       	std	Y+1, r24	; 0x01

}
return Local_u8ErrorState;
 37c:	89 81       	ldd	r24, Y+1	; 0x01

}
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <DIO_u8SetPortValue>:


u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 d0       	rcall	.+0      	; 0x392 <DIO_u8SetPortValue+0x6>
 392:	0f 92       	push	r0
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	8a 83       	std	Y+2, r24	; 0x02
 39a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 39c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	88 2f       	mov	r24, r24
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	84 30       	cpi	r24, 0x04	; 4
 3a6:	91 05       	cpc	r25, r1
 3a8:	01 f1       	breq	.+64     	; 0x3ea <DIO_u8SetPortValue+0x5e>
 3aa:	85 30       	cpi	r24, 0x05	; 5
 3ac:	91 05       	cpc	r25, r1
 3ae:	1c f5       	brge	.+70     	; 0x3f6 <DIO_u8SetPortValue+0x6a>
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	91 05       	cpc	r25, r1
 3b4:	a1 f0       	breq	.+40     	; 0x3de <DIO_u8SetPortValue+0x52>
 3b6:	84 30       	cpi	r24, 0x04	; 4
 3b8:	91 05       	cpc	r25, r1
 3ba:	ec f4       	brge	.+58     	; 0x3f6 <DIO_u8SetPortValue+0x6a>
 3bc:	00 97       	sbiw	r24, 0x00	; 0
 3be:	19 f0       	breq	.+6      	; 0x3c6 <DIO_u8SetPortValue+0x3a>
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	39 f0       	breq	.+14     	; 0x3d2 <DIO_u8SetPortValue+0x46>
 3c4:	18 c0       	rjmp	.+48     	; 0x3f6 <DIO_u8SetPortValue+0x6a>
				{
					case DIO_u8PORTA: PORTA=Copy_u8Value; break;
 3c6:	8b e3       	ldi	r24, 0x3B	; 59
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	2b 81       	ldd	r18, Y+3	; 0x03
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
 3d0:	15 c0       	rjmp	.+42     	; 0x3fc <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTB: PORTB=Copy_u8Value; break;
 3d2:	88 e3       	ldi	r24, 0x38	; 56
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	2b 81       	ldd	r18, Y+3	; 0x03
 3d8:	fc 01       	movw	r30, r24
 3da:	20 83       	st	Z, r18
 3dc:	0f c0       	rjmp	.+30     	; 0x3fc <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTC: PORTC=Copy_u8Value; break;
 3de:	85 e3       	ldi	r24, 0x35	; 53
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	2b 81       	ldd	r18, Y+3	; 0x03
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <DIO_u8SetPortValue+0x70>
				    case DIO_u8PORTD: PORTD=Copy_u8Value; break;
 3ea:	82 e3       	ldi	r24, 0x32	; 50
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	2b 81       	ldd	r18, Y+3	; 0x03
 3f0:	fc 01       	movw	r30, r24
 3f2:	20 83       	st	Z, r18
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <DIO_u8SetPortValue+0x70>
				    default :Local_u8ErrorState=1; break;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	00 00       	nop
				}


	return Local_u8ErrorState;
 3fc:	89 81       	ldd	r24, Y+1	; 0x01

}
 3fe:	0f 90       	pop	r0
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	08 95       	ret

0000040a <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_pu8Value)
{
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	00 d0       	rcall	.+0      	; 0x410 <DIO_u8GetPinValue+0x6>
 410:	00 d0       	rcall	.+0      	; 0x412 <DIO_u8GetPinValue+0x8>
 412:	0f 92       	push	r0
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	8a 83       	std	Y+2, r24	; 0x02
 41a:	6b 83       	std	Y+3, r22	; 0x03
 41c:	5d 83       	std	Y+5, r21	; 0x05
 41e:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState=0;
 420:	19 82       	std	Y+1, r1	; 0x01
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
 422:	8c 81       	ldd	r24, Y+4	; 0x04
 424:	9d 81       	ldd	r25, Y+5	; 0x05
 426:	89 2b       	or	r24, r25
 428:	09 f4       	brne	.+2      	; 0x42c <DIO_u8GetPinValue+0x22>
 42a:	73 c0       	rjmp	.+230    	; 0x512 <DIO_u8GetPinValue+0x108>
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	88 30       	cpi	r24, 0x08	; 8
 430:	08 f0       	brcs	.+2      	; 0x434 <DIO_u8GetPinValue+0x2a>
 432:	6f c0       	rjmp	.+222    	; 0x512 <DIO_u8GetPinValue+0x108>
				{
					switch(Copy_u8Port)
 434:	8a 81       	ldd	r24, Y+2	; 0x02
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	84 30       	cpi	r24, 0x04	; 4
 43c:	91 05       	cpc	r25, r1
 43e:	09 f4       	brne	.+2      	; 0x442 <DIO_u8GetPinValue+0x38>
 440:	4f c0       	rjmp	.+158    	; 0x4e0 <DIO_u8GetPinValue+0xd6>
 442:	85 30       	cpi	r24, 0x05	; 5
 444:	91 05       	cpc	r25, r1
 446:	0c f0       	brlt	.+2      	; 0x44a <DIO_u8GetPinValue+0x40>
 448:	60 c0       	rjmp	.+192    	; 0x50a <DIO_u8GetPinValue+0x100>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	91 05       	cpc	r25, r1
 44e:	99 f1       	breq	.+102    	; 0x4b6 <DIO_u8GetPinValue+0xac>
 450:	84 30       	cpi	r24, 0x04	; 4
 452:	91 05       	cpc	r25, r1
 454:	0c f0       	brlt	.+2      	; 0x458 <DIO_u8GetPinValue+0x4e>
 456:	59 c0       	rjmp	.+178    	; 0x50a <DIO_u8GetPinValue+0x100>
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	19 f0       	breq	.+6      	; 0x462 <DIO_u8GetPinValue+0x58>
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	b1 f0       	breq	.+44     	; 0x48c <DIO_u8GetPinValue+0x82>
 460:	54 c0       	rjmp	.+168    	; 0x50a <DIO_u8GetPinValue+0x100>
					{
						 case DIO_u8PORTA: *Copy_pu8Value=GET_BIT(PINA,Copy_u8Pin); break;
 462:	89 e3       	ldi	r24, 0x39	; 57
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	fc 01       	movw	r30, r24
 468:	80 81       	ld	r24, Z
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	2b 81       	ldd	r18, Y+3	; 0x03
 470:	22 2f       	mov	r18, r18
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_u8GetPinValue+0x70>
 476:	95 95       	asr	r25
 478:	87 95       	ror	r24
 47a:	2a 95       	dec	r18
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_u8GetPinValue+0x6c>
 47e:	28 2f       	mov	r18, r24
 480:	21 70       	andi	r18, 0x01	; 1
 482:	8c 81       	ldd	r24, Y+4	; 0x04
 484:	9d 81       	ldd	r25, Y+5	; 0x05
 486:	fc 01       	movw	r30, r24
 488:	20 83       	st	Z, r18
 48a:	42 c0       	rjmp	.+132    	; 0x510 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTB: *Copy_pu8Value=GET_BIT(PINB,Copy_u8Pin); break;
 48c:	86 e3       	ldi	r24, 0x36	; 54
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	fc 01       	movw	r30, r24
 492:	80 81       	ld	r24, Z
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2b 81       	ldd	r18, Y+3	; 0x03
 49a:	22 2f       	mov	r18, r18
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_u8GetPinValue+0x9a>
 4a0:	95 95       	asr	r25
 4a2:	87 95       	ror	r24
 4a4:	2a 95       	dec	r18
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_u8GetPinValue+0x96>
 4a8:	28 2f       	mov	r18, r24
 4aa:	21 70       	andi	r18, 0x01	; 1
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	9d 81       	ldd	r25, Y+5	; 0x05
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
 4b4:	2d c0       	rjmp	.+90     	; 0x510 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTC: *Copy_pu8Value=GET_BIT(PINC,Copy_u8Pin); break;
 4b6:	83 e3       	ldi	r24, 0x33	; 51
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	88 2f       	mov	r24, r24
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	2b 81       	ldd	r18, Y+3	; 0x03
 4c4:	22 2f       	mov	r18, r18
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_u8GetPinValue+0xc4>
 4ca:	95 95       	asr	r25
 4cc:	87 95       	ror	r24
 4ce:	2a 95       	dec	r18
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_u8GetPinValue+0xc0>
 4d2:	28 2f       	mov	r18, r24
 4d4:	21 70       	andi	r18, 0x01	; 1
 4d6:	8c 81       	ldd	r24, Y+4	; 0x04
 4d8:	9d 81       	ldd	r25, Y+5	; 0x05
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
 4de:	18 c0       	rjmp	.+48     	; 0x510 <DIO_u8GetPinValue+0x106>
					     case DIO_u8PORTD: *Copy_pu8Value=GET_BIT(PIND,Copy_u8Pin); break;
 4e0:	80 e3       	ldi	r24, 0x30	; 48
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	80 81       	ld	r24, Z
 4e8:	88 2f       	mov	r24, r24
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	2b 81       	ldd	r18, Y+3	; 0x03
 4ee:	22 2f       	mov	r18, r18
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_u8GetPinValue+0xee>
 4f4:	95 95       	asr	r25
 4f6:	87 95       	ror	r24
 4f8:	2a 95       	dec	r18
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_u8GetPinValue+0xea>
 4fc:	28 2f       	mov	r18, r24
 4fe:	21 70       	andi	r18, 0x01	; 1
 500:	8c 81       	ldd	r24, Y+4	; 0x04
 502:	9d 81       	ldd	r25, Y+5	; 0x05
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
 508:	03 c0       	rjmp	.+6      	; 0x510 <DIO_u8GetPinValue+0x106>
					     default : Local_u8ErrorState=1; break;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	89 83       	std	Y+1, r24	; 0x01
 50e:	00 00       	nop
{

	u8 Local_u8ErrorState=0;
	if( (Copy_pu8Value!=NULL) && (Copy_u8Pin<=DIO_u8PIN7) )
				{
					switch(Copy_u8Port)
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_u8GetPinValue+0x10c>
					}

				}
				else
				{
				Local_u8ErrorState=1;
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	89 83       	std	Y+1, r24	; 0x01

				}


	return Local_u8ErrorState;
 516:	89 81       	ldd	r24, Y+1	; 0x01


}
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <PORT_voidInit>:
#include"PORT_interface.h"
#include"PORT_register.h"


void PORT_voidInit()
{
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
 530:	8a e3       	ldi	r24, 0x3A	; 58
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	fc 01       	movw	r30, r24
 536:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
 538:	87 e3       	ldi	r24, 0x37	; 55
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	fc 01       	movw	r30, r24
 53e:	10 82       	st	Z, r1
	DDRC=PORTC_DIR;
 540:	84 e3       	ldi	r24, 0x34	; 52
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	2f ef       	ldi	r18, 0xFF	; 255
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18
	DDRD=PORTD_DIR;
 54a:	81 e3       	ldi	r24, 0x31	; 49
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	fc 01       	movw	r30, r24
 550:	10 82       	st	Z, r1

	PORTA=PORTA_InitVal;
 552:	8b e3       	ldi	r24, 0x3B	; 59
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	fc 01       	movw	r30, r24
 558:	10 82       	st	Z, r1
	PORTB=PORTB_InitVal;
 55a:	88 e3       	ldi	r24, 0x38	; 56
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	fc 01       	movw	r30, r24
 560:	10 82       	st	Z, r1
	PORTC=PORTC_InitVal;
 562:	85 e3       	ldi	r24, 0x35	; 53
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	fc 01       	movw	r30, r24
 568:	10 82       	st	Z, r1
	PORTD=PORTD_InitVal;
 56a:	82 e3       	ldi	r24, 0x32	; 50
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	10 82       	st	Z, r1
}
 572:	00 00       	nop
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	08 95       	ret

0000057a <main>:
#include "DIO_interface.h"
#include "ADC_interface.h"


void main ()
{
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	0f 92       	push	r0
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
 584:	0e 94 94 02 	call	0x528	; 0x528 <PORT_voidInit>
	ADC_voidInit();
 588:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidInit>
	while(1)
	{
		u8 MAX_READING;
		u8 MIN_READING;
		MAX_READING=ADC_u8GetChannelReading(SINGLE_ENDED_ADC0);
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_u8GetChannelReading>
 592:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPortValue(DIO_u8PORTC,MAX_READING);
 594:	69 81       	ldd	r22, Y+1	; 0x01
 596:	83 e0       	ldi	r24, 0x03	; 3
 598:	0e 94 c6 01 	call	0x38c	; 0x38c <DIO_u8SetPortValue>
void main ()
{
	PORT_voidInit();
	ADC_voidInit();
	while(1)
	{
 59c:	f7 cf       	rjmp	.-18     	; 0x58c <main+0x12>

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
